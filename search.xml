<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm——Array</title>
    <url>/algorithm%E2%80%94%E2%80%94array/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="1-数组理论基础"><a href="#1-数组理论基础" class="headerlink" title="1.数组理论基础"></a>1.数组理论基础</h2><p><strong>数组是存放在连续内存空间上的相同类型数据的集合</strong></p>
<p>数组可以通过下标索引的方式获取下标下对应的数据</p>
<blockquote>
<p><img src="/images/2023-05-26-14-19-31-image.png"></p>
</blockquote>
<span id="more"></span>

<p><strong>注意</strong></p>
<ul>
<li><p>数组下标都是从0开始的</p>
</li>
<li><p>数组内存空间的地址是连续的</p>
</li>
<li><p><strong>数组的元素是不能删的，只能覆盖</strong></p>
</li>
</ul>
<h2 id="2-！二分查找"><a href="#2-！二分查找" class="headerlink" title="2.！二分查找"></a>2.！二分查找</h2><p>704.给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>
<div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><a href="#test-1">示例1</a></li><li class="tab"><a href="#test-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9     </span><br><span class="line">输出: 4       </span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2     </span><br><span class="line">输出: -1        </span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1 </span><br></pre></td></tr></table></figure></div></div></div>

<p>提示：</p>
<ul>
<li><p>可以假设nums中的所有元素是不重复的</p>
</li>
<li><p>n将在[1,10000]之间</p>
</li>
<li><p>nums的每个元素都将在[-9999,9999]之间</p>
</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li><p>数组为有序数组</p>
</li>
<li><p>数组中无重复元素</p>
<ul>
<li>存在重复元素，使用二分查找法返回的元素下标可能不是唯一的</li>
</ul>
</li>
</ul>
<p><strong><mark>满足上述两点可考虑二分法</mark></strong></p>
<p>二分法的<strong>区间定义就是不变量</strong></p>
<ul>
<li>在二分查找过程中，保持不变量，即在while寻找中每一次边界处理都要坚持根据区间的定义来操作</li>
</ul>
<p>二分法区间定义</p>
<ul>
<li><p>左闭右闭[left,right]</p>
<ul>
<li><p>while(left&lt;=right)要使用&lt;=，因为left == right是有意义的</p>
</li>
<li><p>if [ num[middle] &gt; target ) right要赋值为 middle - 1 ；因为当前nums[middle]一定不是target，那么下面查找的左区间结束下标位置就是middle - 1</p>
</li>
<li><p>时间复杂度：O(log n)</p>
</li>
<li><p>空间复杂度：O(1)</p>
</li>
</ul>
</li>
<li><p>左闭右开[left,right)</p>
<ul>
<li><p>while(left &lt; right),因为left == right在区间中是没有意义的</p>
</li>
<li><p>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</p>
</li>
</ul>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>左闭右闭区间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid, left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当left=right时，由于nums[right]在查找范围内，所以要包括此情况</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="comment">// 位运算 + 防止大数溢出</span></span><br><span class="line">        mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 如果中间数大于目标值，要把中间数排除查找范围，所以右边界更新为mid-1；如果右边界更新为mid，那中间数还在下次查找范围内</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;  <span class="comment">// 去左面闭区间寻找</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;   <span class="comment">// 去右面闭区间寻找</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>左闭右开区间</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="comment">// right是数组最后一个数的下标+1，nums[right]不在查找范围内，是左闭右开区间</span></span><br><span class="line">    <span class="keyword">let</span> mid, left = <span class="number">0</span>, right = nums.<span class="property">length</span>;    </span><br><span class="line">    <span class="comment">// 当left=right时，由于nums[right]不在查找范围，所以不必包括此情况</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 位运算 + 防止大数溢出</span></span><br><span class="line">        mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 如果中间值大于目标值，中间值不应在下次查找的范围内，但中间值的前一个值应在；</span></span><br><span class="line">        <span class="comment">// 由于right本来就不在查找范围内，所以将右边界更新为中间值，如果更新右边界为mid-1则将中间值的前一个值也踢出了下次寻找范围</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;  <span class="comment">// 去左区间寻找</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;   <span class="comment">// 去右区间寻找</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="-35.搜索插入位置"></a>-35.搜索插入位置</h4><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 O(log n) 的算法。</p>
<div class="tabs" id="test35"><ul class="nav-tabs"><li class="tab active"><a href="#test35-1">示例1</a></li><li class="tab"><a href="#test35-2">示例2</a></li><li class="tab"><a href="#test35-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test35-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test35-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test35-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></div></div></div> 

<p>提示</p>
<ul>
<li><p>1 &lt;= nums.length &lt;= 10^4</p>
</li>
<li><p>-10^4 &lt;= nums[i] &lt;= 10^4</p>
</li>
<li><p>nums 为 <strong>无重复元素 的 升序 排列数组</strong></p>
</li>
<li><p>-10^4 &lt;= target &lt;= 10^4</p>
</li>
</ul>
<h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>存在以下四种情况</p>
<ul>
<li>目标值在数组所有元素之前</li>
<li>目标值等于数组中某一个元素</li>
<li>目标值插入数组中的位置</li>
<li>目标值在数组所有元素之后</li>
</ul>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &lt; target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">    <span class="comment">/*return right +1*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="-34.在排序数组中查找元素的第一个和最后一个位置"></a>-34.在排序数组中查找元素的第一个和最后一个位置</h4><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 target，返回 [-1, -1]。</p>
<p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。</p>
<div class="tabs" id="test34"><ul class="nav-tabs"><li class="tab active"><a href="#test34-1">示例1</a></li><li class="tab"><a href="#test34-2">示例2</a></li><li class="tab"><a href="#test34-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test34-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test34-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test34-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [], target = 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure></div></div></div> 

<p>提示</p>
<ul>
<li><p>0 &lt;= nums.length &lt;= 10^5</p>
</li>
<li><p>-10^9 &lt;= nums[i] &lt;= 10^9</p>
</li>
<li><p>nums 是一个非递减数组</p>
</li>
<li><p>-10^9 &lt;= target &lt;= 10^9</p>
</li>
</ul>
<h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>寻找target在数组里的左右边界，有如下三种情况：</p>
<ul>
<li>情况一：target 在数组范围的右边或者左边，例如数组{3, 4, 5}，target为2或者数组{3, 4, 5},target为6，此时应该返回{-1, -1}</li>
<li>情况二：target 在数组范围中，且数组中不存在target，例如数组{3,6,7},target为5，此时应该返回{-1, -1}</li>
<li>情况三：target 在数组范围中，且数组中存在target，例如数组{3,6,7},target为6，此时应该返回{1, 1}</li>
</ul>
<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> searchRange = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getLeftBorder</span> = (<span class="params">nums, target</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> leftBorder = -<span class="number">2</span>;<span class="comment">// 记录一下leftBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">let</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[middle] &gt;= target)&#123; <span class="comment">// 寻找左边界，nums[middle] == target的时候更新right</span></span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">                leftBorder = right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getRightBorder</span> = (<span class="params">nums, target</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> rightBorder = -<span class="number">2</span>; <span class="comment">// 记录一下rightBorder没有被赋值的情况</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">let</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 寻找右边界，nums[middle] == target的时候更新left</span></span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">                rightBorder = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightBorder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> leftBorder = <span class="title function_">getLeftBorder</span>(nums, target);</span><br><span class="line">    <span class="keyword">let</span> rightBorder = <span class="title function_">getRightBorder</span>(nums, target);</span><br><span class="line">    <span class="comment">// 情况一</span></span><br><span class="line">    <span class="keyword">if</span>(leftBorder === -<span class="number">2</span> || rightBorder === -<span class="number">2</span>) <span class="keyword">return</span> [-<span class="number">1</span>,-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 情况三</span></span><br><span class="line">    <span class="keyword">if</span> (rightBorder - leftBorder &gt; <span class="number">1</span>) <span class="keyword">return</span> [leftBorder + <span class="number">1</span>, rightBorder - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 情况二</span></span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">            <span class="keyword">let</span> tempLeft = tempRight = mid ;</span><br><span class="line">            <span class="keyword">while</span>(nums[tempLeft - <span class="number">1</span>] === target) tempLeft--;</span><br><span class="line">            <span class="keyword">while</span>(nums[tempRight + <span class="number">1</span>] === target) tempRight++;</span><br><span class="line">            <span class="keyword">return</span> [tempLeft, tempRight]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="-69.x 的平方根"></a>-69.x 的平方根</h4><p>给你一个非负整数 x ，计算并返回 x 的 <strong>算术平方根</strong>  。</p>
<p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p>
<p><strong>注意：</strong> 不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p>
<div class="tabs" id="test69"><ul class="nav-tabs"><li class="tab active"><a href="#test69-1">示例1</a></li><li class="tab"><a href="#test69-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test69-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 4</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test69-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 8</span><br><span class="line">输出：2</span><br><span class="line">解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去</span><br></pre></td></tr></table></figure></div></div></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= x &lt;= 2^31 - 1</code></li>
</ul>
<h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><ul>
<li><p>整数x的平方根一定小于或等于x</p>
</li>
<li><p>除0之外的所有整数的平方根都大于或等于1</p>
</li>
<li><p>整数x的平方根一定是在1到x的范围内，取这个范围内的中间数字mid，并判断mid的平方是否小于或等于x</p>
<ul>
<li><p>如果mid的平方小于x,那么接着判断(mid+1)的平方是否大于x，如果(mid+1)的平方大于x，那么mid就是x的平方根</p>
</li>
<li><p>如果mid的平方小于x并且(mid+1)的平方小于x，那么x的平方根比mid大，接下来搜索从mid+1到x的范围</p>
</li>
<li><p>如果mid的平方大于x，则x的平方根小于mid，接下来搜索1到mid-1的范围</p>
</li>
<li><p>然后在相应的范围内重复这个过程，总是取出位于范围中间的mid</p>
</li>
</ul>
</li>
</ul>
<h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mySqrt = <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="comment">// 整数x的平方根一定是在1到x的范围内</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> right = x;</span><br><span class="line">  <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">    <span class="comment">// 中间值  下面这样写是防止溢出</span></span><br><span class="line">    <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 判断mid的平方是否小于或等于x，如果mid的平方小于x</span></span><br><span class="line">    <span class="keyword">if</span> (mid &lt;= x / mid) &#123;</span><br><span class="line">      <span class="comment">// 判断(mid+1)的平方是否大于x，如果(mid+1)的平方大于x，那么mid就是x的平方根</span></span><br><span class="line">      <span class="keyword">if</span> (mid + <span class="number">1</span> &gt; x / (mid + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果mid的平方小于x并且(mid+1)的平方小于x，那么x的平方根比mid大，接下来搜索从mid+1到x的范围</span></span><br><span class="line">      left = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果mid的平方大于x，则x的平方根小于mid，接下来搜索1到mid-1的范围</span></span><br><span class="line">      right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果输入参数是0，left等于1而right等于0，就直接返回0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="-367.有效的完全平方数"></a>-367.有效的完全平方数</h4><p>给你一个正整数 num 。如果 num 是一个完全平方数，则返回 true ，否则返回 false 。</p>
<p><strong>完全平方数</strong> 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。</p>
<p>不能使用任何内置的库函数，如  sqrt 。</p>
<div class="tabs" id="test367"><ul class="nav-tabs"><li class="tab active"><a href="#test367-1">示例1</a></li><li class="tab"><a href="#test367-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test367-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：num = 16</span><br><span class="line">输出：true</span><br><span class="line">解释：返回 true ，因为 4 * 4 = 16 且 4 是一个整数。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test367-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：num = 14</span><br><span class="line">输出：false</span><br><span class="line">解释：返回 false ，因为 3.742 * 3.742 = 14 但 3.742 不是一个整数</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><ul>
<li><p>num 是正整数，若正整数 x 满足<code>x*x = num</code>,则x一定满足<code>1&lt;= x &lt;= num</code>;</p>
</li>
<li><p>1 和 num 作为二分查找搜索区间的初始边界。</p>
</li>
<li><p>时间复杂度：O(log n),n为正整数num的最大值</p>
</li>
<li><p>空间复杂度：O(1)</p>
</li>
</ul>
<h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">num</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPerfectSquare = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = num;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>) + left;</span><br><span class="line">        <span class="keyword">const</span> square = mid * mid;</span><br><span class="line">        <span class="keyword">if</span> (square &lt; num) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (square &gt; num) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-移除元素"><a href="#3-移除元素" class="headerlink" title="3.移除元素"></a>3.移除元素</h2><p>27.给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 原地 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地 修改输入数组</strong>。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p><strong>说明:</strong></p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span></span><br><span class="line">int len = <span class="title function_">removeElement</span>(nums, val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="title function_">print</span>(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="test27"><ul class="nav-tabs"><li class="tab active"><a href="#test27-1">示例1</a></li><li class="tab"><a href="#test27-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test27-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test27-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p><strong>要知道数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖</strong></p>
<h3 id="！双指针法"><a href="#！双指针法" class="headerlink" title="！双指针法"></a>！双指针法</h3><p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p>
<p>定义快慢指针</p>
<ul>
<li><p>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</p>
</li>
<li><p>慢指针：指向更新 新数组下标的位置</p>
</li>
<li><p>时间复杂度：O(n)</p>
</li>
<li><p>空间复杂度：O(1)</p>
</li>
</ul>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] != val)&#123;</span><br><span class="line">            nums[k] = nums[i];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="-26.删除排序数组中的重复项"></a>-26.删除排序数组中的重复项</h4><p>给你一个 升序排列 的数组 <code>nums</code> ，请你 <strong>原</strong>地 删除重复出现的元素，使每个元素 **只出现一次 **，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。然后返回 <code>nums</code> 中唯一元素的个数。</p>
<p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code> ，你需要做以下事情确保你的题解可以被通过：</p>
<ul>
<li><p>更改数组 <code>nums</code> ，使 <code>nums</code> 的前 <code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code> 中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code> 的大小不重要。</p>
</li>
<li><p>返回 <code>k</code> 。</p>
</li>
</ul>
<p><strong>判题标准:</strong></p>
<p>系统会用下面的代码来测试你的题解:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; <span class="comment">// 输入数组</span></span><br><span class="line">int[] expectedNums = [...]; <span class="comment">// 长度正确的期望答案</span></span><br><span class="line"></span><br><span class="line">int k = <span class="title function_">removeDuplicates</span>(nums); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line">assert k == expectedNums.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="test26"><ul class="nav-tabs"><li class="tab active"><a href="#test26-1">示例1</a></li><li class="tab"><a href="#test26-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test26-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test26-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h5><ul>
<li><p>数组<code>nums</code>有序的，只能在原地修改<code>nums</code>数组，不能创建新的数组空间来存储删除重复出现的元素后的结果。</p>
</li>
<li><p>需要一边遍历数组查找相同元素，一边在对比发现不同元素时修改数组元素，</p>
</li>
<li><p>考虑双指针法的快慢指针</p>
<ul>
<li><p>定义<code>slow</code>和<code>fast</code>作为指针</p>
</li>
<li><p>初始化时指针<code>slow</code>指向数组的起始位置（<code>nums[0]</code>）</p>
</li>
<li><p>随着指针<code>fast</code>不断向后移动，将指针<code>fast</code>指向的元素与指针<code>slow</code>指向的元素进行比较</p>
<ul>
<li><p>如果<code>nums[fast] ≠ nums[slow]</code>，那么<code>nums[slow + 1] = nums[fast]</code></p>
</li>
<li><p>如果<code>nums[fast] = nums[slow]</code>，那么指针<code>fast</code>继续向后查找</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>时间复杂度：</strong><code>O(n)</code></p>
</li>
</ul>
<h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="property">length</span> == <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>, fast = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &lt; nums.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast] != nums[slow])&#123;</span><br><span class="line">            slow = slow + <span class="number">1</span>;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="-283.移动零"></a>-283.移动零</h4><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p>
<div class="tabs" id="test283"><ul class="nav-tabs"><li class="tab active"><a href="#test283-1">示例1</a></li><li class="tab"><a href="#test283-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test283-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test283-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h5><p><strong>相当于对整个数组移除元素0，然后slowIndex之后都是移除元素0的冗余元素，把这些元素都赋值为0就可以了</strong>。</p>
<h5 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> fast = <span class="number">0</span>; fast &lt; nums.<span class="property">length</span>; fast++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != <span class="number">0</span>) &#123;</span><br><span class="line">                nums[slow++] = nums[fast];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后面的元素全变成 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = slow; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            nums[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="-844.比较含退格的字符串"></a>-844.比较含退格的字符串</h4><p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code> 。# 代表退格字符。</p>
<p><strong>注意</strong> :如果对空文本输入退格字符，文本继续为空。</p>
<div class="tabs" id="test844"><ul class="nav-tabs"><li class="tab active"><a href="#test844-1">示例1</a></li><li class="tab"><a href="#test844-2">示例2</a></li><li class="tab"><a href="#test844-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test844-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;ac&quot;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test844-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;&quot;。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test844-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a#c&quot;, t = &quot;b&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：s 会变成 &quot;c&quot;，但 t 仍然是 &quot;b&quot;。</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h5><ul>
<li><p>准备指针<code>i``j</code>分别指向<code>S``T</code>的末位字符，再准备变量<code>skipS</code>,<code>skipT</code>来存放S,T字符串中的#数量</p>
</li>
<li><p>从后向前遍历S，遇到以下情况</p>
<ul>
<li><p>若当前字符为#，则<code>skipS</code>自增1</p>
</li>
<li><p>若当前字符不是#，且<code>skipS</code> 不为0，则<code>skipS</code>自减1</p>
</li>
<li><p>若当前字符不是#，且<code>skipS</code>为0，则代表当前字符不会被消除，我们可以用来和 T 中的当前字符作比较。</p>
</li>
</ul>
</li>
<li><p>若对比过程中<code>S</code>,<code>T</code>当前字符不匹配，则遍历结束，返回<code>false</code></p>
</li>
<li><p>若遍历结束，且一一匹配，则返回<code>true</code></p>
</li>
</ul>
<h5 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> backspaceCompare = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = s.<span class="property">length</span> - <span class="number">1</span>,</span><br><span class="line">        j = t.<span class="property">length</span> - <span class="number">1</span>,</span><br><span class="line">        skipS = <span class="number">0</span>,</span><br><span class="line">        skipT = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 大循环</span></span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// S 循环</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] === <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                skipS++;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(skipS &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                skipS--;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// T 循环</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t[j] === <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                skipT++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(skipT &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                skipT--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] !== t[j]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="-977.有序数组的平方"></a>-977.有序数组的平方</h4><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序</p>
<h5 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h5><ul>
<li><p>数组其实是有序的， 只不过负数平方之后可能成为最大数了。</p>
</li>
<li><p>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p>
</li>
<li><p>此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p>
</li>
<li><p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置</p>
</li>
<li><p>如果<code>A[i] * A[i] &lt; A[j] * A[j]</code> 那么<code>result[k--] = A[j] * A[j]</code></p>
</li>
<li><p>如果<code>A[i] * A[i] &gt;= A[j] * A[j]</code> 那么<code>result[k--] = A[i] * A[i]</code></p>
</li>
<li><p>时间复杂度为<code>O(n)</code></p>
</li>
</ul>
<div class="tabs" id="test977"><ul class="nav-tabs"><li class="tab active"><a href="#test977-1">示例1</a></li><li class="tab"><a href="#test977-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test977-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test977-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = nums.<span class="property">length</span> - <span class="number">1</span>; i &lt;= j;) &#123;</span><br><span class="line">      <span class="keyword">const</span> left = <span class="title class_">Math</span>.<span class="title function_">abs</span>(nums[i])</span><br><span class="line">      <span class="keyword">const</span> right = <span class="title class_">Math</span>.<span class="title function_">abs</span>(nums[j])</span><br><span class="line">      <span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">        <span class="comment">// push element to the front of the array</span></span><br><span class="line">        res.<span class="title function_">unshift</span>(right * right)</span><br><span class="line">        j--</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">unshift</span>(left * left)</span><br><span class="line">        i++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-长度最小的子数组"><a href="#4-长度最小的子数组" class="headerlink" title="4.长度最小的子数组"></a>4.长度最小的子数组</h2><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> 。</p>
<p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 连续子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code> </p>
<div class="tabs" id="test209"><ul class="nav-tabs"><li class="tab active"><a href="#test209-1">示例1</a></li><li class="tab"><a href="#test209-2">示例2</a></li><li class="tab"><a href="#test209-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test209-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test209-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test209-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure></div></div></div> 

<h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><p>窗口是 满足其和 ≥ s 的长度最小的 连续 子数组。</p>
<p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p>
<p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="！滑动窗口"><a href="#！滑动窗口" class="headerlink" title="！滑动窗口"></a>！滑动窗口</h3><p><strong>就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果</strong></p>
<p>只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置</p>
<p>确定如下三点：</p>
<ul>
<li>窗口内是什么？</li>
<li>如何移动窗口的起始位置？</li>
<li>如何移动窗口的结束位置？</li>
</ul>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start, end</span><br><span class="line">    start = end = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> len = nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> ans = <span class="title class_">Infinity</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(end &lt; len)&#123;</span><br><span class="line">        sum += nums[end];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">            ans = <span class="title class_">Math</span>.<span class="title function_">min</span>(ans, end - start + <span class="number">1</span>);</span><br><span class="line">            sum -= nums[start];</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        end++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans === <span class="title class_">Infinity</span> ? <span class="number">0</span> : ans</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<h3 id="相关题目-2"><a href="#相关题目-2" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="-904.水果成篮"></a>-904.水果成篮</h4><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 <code>fruits</code> 表示，其中 <code>fruits[i]</code> 是第 <code>i</code> 棵树上的水果 种类 。</p>
<p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p>
<ul>
<li><p>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 <strong>单一类型</strong> 的水果。每个篮子能够装的水果总量没有限制。</p>
</li>
<li><p>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</p>
</li>
<li><p>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</p>
</li>
</ul>
<p>给你一个整数数组 <code>fruits</code> ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p>
<div class="tabs" id="test904"><ul class="nav-tabs"><li class="tab active"><a href="#test904-1">示例1</a></li><li class="tab"><a href="#test904-2">示例2</a></li><li class="tab"><a href="#test904-3">示例3</a></li><li class="tab"><a href="#test904-4">示例4</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test904-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘全部 3 棵树。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test904-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [0,1,2,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘 [1,2,2] 这三棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test904-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,3,2,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：可以采摘 [2,3,2,2] 这四棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test904-4"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：可以采摘 [1,2,1,1,2] 这五棵树。</span><br></pre></td></tr></table></figure></div></div></div> 

<h5 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h5><p>用滑动窗口遍历fruits，当有新种类的水果进入窗口时</p>
<ul>
<li><p>如果窗口中只有一种水果，将这种水果加入arr数组</p>
</li>
<li><p>如果有两种水果，更新窗口的左边界，更新arr中水果的种类</p>
</li>
<li><p>如果进来了一种新的类型的水果 更新前一种水果的位置</p>
</li>
<li><p>更新滑动窗口的最大值</p>
</li>
<li><p>时间复杂度O(n)</p>
</li>
<li><p>空间复杂度O(1)。</p>
</li>
</ul>
<h5 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">fruits</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> totalFruit = <span class="keyword">function</span>(<span class="params">fruits</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">0</span>;<span class="comment">//起始指针</span></span><br><span class="line">    <span class="keyword">let</span> maxLen = <span class="number">0</span>;<span class="comment">//窗口的最大长度 其中最多包涵两种水果</span></span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span><span class="comment">//前一类水果的结束位置</span></span><br><span class="line">    <span class="keyword">let</span> arr = [fruits[l]]<span class="comment">//水果的种类数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; fruits.<span class="property">length</span>; r++)&#123;<span class="comment">//窗口的右指针不断前进</span></span><br><span class="line">        <span class="keyword">if</span>(!arr.<span class="title function_">includes</span>(fruits[r]))&#123;<span class="comment">//如果窗口中不包含 进窗口的水果</span></span><br><span class="line">            <span class="keyword">if</span>(arr.<span class="property">length</span> &lt;= <span class="number">1</span>)&#123;<span class="comment">//如果只有一种水果</span></span><br><span class="line">                arr[<span class="number">1</span>] = fruits[r]<span class="comment">//将这种水果加入arr数组</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果有两种水果</span></span><br><span class="line">                l = n<span class="comment">//更新窗口的左边界</span></span><br><span class="line">                arr[<span class="number">0</span>] = fruits[r-<span class="number">1</span>]<span class="comment">//更新arr中水果的种类</span></span><br><span class="line">                arr[<span class="number">1</span>] = fruits[r]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fruits[r] !== fruits[n])&#123;<span class="comment">//如果进来了一种新的类型的水果 更新前一种水果的位置</span></span><br><span class="line">            n = r</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maxLen = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxLen,r-l+<span class="number">1</span>)<span class="comment">//更新滑动窗口的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="76-最小覆盖字串"><a href="#76-最小覆盖字串" class="headerlink" title="-76.最小覆盖字串"></a>-76.最小覆盖字串</h4><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>
<p><strong>注意：</strong></p>
<ul>
<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>
<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>
</ul>
<div class="tabs" id="test76"><ul class="nav-tabs"><li class="tab active"><a href="#test76-1">示例1</a></li><li class="tab"><a href="#test76-2">示例2</a></li><li class="tab"><a href="#test76-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test76-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br><span class="line">解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#x27;A&#x27;、&#x27;B&#x27; 和 &#x27;C&#x27;。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test76-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test76-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure></div></div></div> 

<h5 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h5><p>使用两个指针一个left，一个right，分别表示窗口的左边界和右边界。</p>
<ul>
<li><p>当窗口内的所有字符不能覆盖t的时候，要扩大窗口，也就是right往右移。</p>
</li>
<li><p>当窗口内的所有字符可以覆盖t的时候，记录窗口的起始位置以及窗口的长度，然后缩小窗口（因为这里求的是能覆盖的最小子串），left往右移。如果缩小的窗口还能覆盖t，保存长度最小的窗口即可。</p>
</li>
<li><p>重复上面的操作，直到窗口的右边不能再移动为止。</p>
</li>
</ul>
<h5 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minWindow = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> minLen = s.<span class="property">length</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> start = s.<span class="property">length</span>;     <span class="comment">// 结果子串的起始位置</span></span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;             <span class="comment">// 存储目标字符和对应的缺失个数</span></span><br><span class="line">  <span class="keyword">let</span> missingType = <span class="number">0</span>;      <span class="comment">// 当前缺失的字符种类数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> t) &#123;      <span class="comment">// t为baac的话，map为&#123;a:2,b:1,c:1&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (!map[c]) &#123;</span><br><span class="line">      missingType++;        <span class="comment">// 需要找齐的种类数 +1</span></span><br><span class="line">      map[c] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      map[c]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> l = <span class="number">0</span>, r = <span class="number">0</span>;                <span class="comment">// 左右指针</span></span><br><span class="line">  <span class="keyword">for</span> (; r &lt; s.<span class="property">length</span>; r++) &#123;      <span class="comment">// 主旋律扩张窗口，超出s串就结束</span></span><br><span class="line">    <span class="keyword">let</span> rightChar = s[r];          <span class="comment">// 获取right指向的新字符</span></span><br><span class="line">    <span class="keyword">if</span> (map[rightChar] !== <span class="literal">undefined</span>) map[rightChar]--; <span class="comment">// 是目标字符，它的缺失个数-1</span></span><br><span class="line">    <span class="keyword">if</span> (map[rightChar] == <span class="number">0</span>) missingType--;   <span class="comment">// 它的缺失个数新变为0，缺失的种类数就-1</span></span><br><span class="line">    <span class="keyword">while</span> (missingType == <span class="number">0</span>) &#123;                <span class="comment">// 当前窗口包含所有字符的前提下，尽量收缩窗口</span></span><br><span class="line">      <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt; minLen) &#123;    <span class="comment">// 窗口宽度如果比minLen小，就更新minLen</span></span><br><span class="line">        minLen = r - l + <span class="number">1</span>;</span><br><span class="line">        start = l;                 <span class="comment">// 更新最小窗口的起点</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> leftChar = s[l];          <span class="comment">// 左指针要右移，左指针指向的字符要被丢弃</span></span><br><span class="line">      <span class="keyword">if</span> (map[leftChar] !== <span class="literal">undefined</span>) map[leftChar]++; <span class="comment">// 被舍弃的是目标字符，缺失个数+1</span></span><br><span class="line">      <span class="keyword">if</span> (map[leftChar] &gt; <span class="number">0</span>) missingType++;      <span class="comment">// 如果缺失个数新变为&gt;0，缺失的种类+1</span></span><br><span class="line">      l++;                          <span class="comment">// 左指针要右移 收缩窗口</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (start == s.<span class="property">length</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">substring</span>(start, start + minLen); <span class="comment">// 根据起点和minLen截取子串</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-螺旋矩阵II"><a href="#5-螺旋矩阵II" class="headerlink" title="5. 螺旋矩阵II"></a>5. 螺旋矩阵II</h2><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n^2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code></p>
<p><img src="/images/2023-05-29-13-21-17-image.png"></p>
<div class="tabs" id="test59"><ul class="nav-tabs"><li class="tab active"><a href="#test59-1">示例1</a></li><li class="tab"><a href="#test59-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test59-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test59-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h3><p>坚持循环不变量原则。</p>
<p>模拟顺时针画矩阵的过程:</p>
<ul>
<li>填充上行从左到右</li>
<li>填充右列从上到下</li>
<li>填充下行从右到左</li>
<li>填充左列从下到上</li>
</ul>
<p>这里一圈下来，我们要画每四条边，这四条边怎么画，每画一条边都要坚持一致的左闭右开，或者左开右闭的原则，这样这一圈才能按照统一的规则画下来。</p>
<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateMatrix = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> startX = startY = <span class="number">0</span>;   <span class="comment">// 起始位置</span></span><br><span class="line">    <span class="keyword">let</span> loop = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>);   <span class="comment">// 旋转圈数</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>);    <span class="comment">// 中间位置</span></span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">1</span>;    <span class="comment">// 控制每一层填充元素个数</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>;     <span class="comment">// 更新填充数字</span></span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (loop--) &#123;</span><br><span class="line">        <span class="keyword">let</span> row = startX, col = startY;</span><br><span class="line">        <span class="comment">// 上行从左到右（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (; col &lt; startY + n - offset; col++) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 右列从上到下（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (; row &lt; startX + n - offset; row++) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下行从右到左（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (; col &gt; startY; col--) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左列做下到上（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> (; row &gt; startX; row--) &#123;</span><br><span class="line">            res[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新起始位置</span></span><br><span class="line">        startX++;</span><br><span class="line">        startY++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新offset</span></span><br><span class="line">        offset += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果n为奇数的话，需要单独给矩阵最中间的位置赋值</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        res[mid][mid] = count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateMatrix = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, t = <span class="number">0</span>, b = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">1</span>, tar = n * n;</span><br><span class="line">        <span class="keyword">let</span> mat = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(num &lt;= tar)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = l; i &lt;= r; i++) mat[t][i] = num++; <span class="comment">// left to right.</span></span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = t; i &lt;= b; i++) mat[i][r] = num++; <span class="comment">// top to bottom.</span></span><br><span class="line">            r--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = r; i &gt;= l; i--) mat[b][i] = num++; <span class="comment">// right to left.</span></span><br><span class="line">            b--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = b; i &gt;= t; i--) mat[i][l] = num++; <span class="comment">// bottom to top.</span></span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>


<h3 id="相关题目-3"><a href="#相关题目-3" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="-54.螺旋矩阵"></a>-54.螺旋矩阵</h4><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素</p>
<p>提示：</p>
<ul>
<li><p>m == matrix.length</p>
</li>
<li><p>n == matrix[i].length</p>
</li>
<li><p>1 &lt;= m, n &lt;= 10</p>
</li>
<li><p>-100 &lt;= matrix[i][j] &lt;= 100</p>
</li>
</ul>
<div class="tabs" id="test54"><ul class="nav-tabs"><li class="tab active"><a href="#test54-1">示例1</a></li><li class="tab"><a href="#test54-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test54-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test54-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h5><ul>
<li><p>如果一条边从头遍历到底，则下一条边遍历的起点随之变化</p>
</li>
<li><p>选择不遍历到底，可以减小横向、竖向遍历之间的影响</p>
</li>
<li><p>一轮迭代结束时，4条边的两端同时收窄 1</p>
</li>
<li><p>一轮迭代所做的事情变得很清晰：遍历一个“圈”，遍历的范围收缩为内圈</p>
</li>
<li><p>一层层向里处理，按顺时针依次遍历：上、右、下、左。</p>
</li>
<li><p>不再形成“环”了，就会剩下：一行或一列，然后单独判断</p>
</li>
</ul>
<p>四个边界</p>
<ul>
<li><p>上边界 top : 0</p>
</li>
<li><p>下边界 bottom : matrix.length - 1</p>
</li>
<li><p>左边界 left : 0</p>
</li>
<li><p>右边界 right : matrix[0].length - 1</p>
</li>
</ul>
<p>矩阵不一定是方阵</p>
<ul>
<li><p>top &lt; bottom &amp;&amp; left &lt; right 是循环的条件</p>
</li>
<li><p>无法构成“环”了，就退出循环，退出时可能是这 3 种情况之一：</p>
<ul>
<li><p>top == bottom &amp;&amp; left &lt; right —— 剩一行</p>
</li>
<li><p>top &lt; bottom &amp;&amp; left == right —— 剩一列</p>
</li>
<li><p>top == bottom &amp;&amp; left == right —— 剩一项（也算 一行/列）</p>
</li>
</ul>
</li>
<li><ul>
<li>处理剩下的单行或单列<ul>
<li><p>因为是按顺时针推入结果数组的，所以</p>
</li>
<li><p>剩下的一行，从左至右 依次推入结果数组</p>
</li>
<li><p>剩下的一列，从上至下 依次推入结果数</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">matrix</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="keyword">function</span>(<span class="params">matrix</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="keyword">let</span> top = <span class="number">0</span>, bottom = matrix.<span class="property">length</span> - <span class="number">1</span>, left = <span class="number">0</span>, right = matrix[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (top &lt; bottom &amp;&amp; left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt; right; i++) res.<span class="title function_">push</span>(matrix[top][i])   <span class="comment">// 上层</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt; bottom; i++) res.<span class="title function_">push</span>(matrix[i][right]) <span class="comment">// 右层</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = right; i &gt; left; i--) res.<span class="title function_">push</span>(matrix[bottom][i])<span class="comment">// 下层</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = bottom; i &gt; top; i--) res.<span class="title function_">push</span>(matrix[i][left])  <span class="comment">// 左层</span></span><br><span class="line">        right--</span><br><span class="line">        top++</span><br><span class="line">        bottom--</span><br><span class="line">        left++  <span class="comment">// 四个边界同时收缩，进入内层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (top === bottom) <span class="comment">// 剩下一行，从左到右依次添加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) res.<span class="title function_">push</span>(matrix[top][i])</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (left === right) <span class="comment">// 剩下一列，从上到下依次添加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt;= bottom; i++) res.<span class="title function_">push</span>(matrix[i][left])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>内容来源链接：<a href="https://leetcode.cn/problems/search-insert-position">力扣</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>前端</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Exercise — Build a Personal Portfolio Webpage</title>
    <url>//index.html</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h5 id="Build-a-Personal-Portfolio-Webpage-——-Test"><a href="#Build-a-Personal-Portfolio-Webpage-——-Test" class="headerlink" title="Build a Personal Portfolio Webpage —— Test"></a>Build a Personal Portfolio Webpage —— Test</h5><h4 id="Objective"><a href="#Objective" class="headerlink" title="Objective:"></a>Objective:</h4><blockquote>
<p>Build an app that is functionally similar to <a href="https://personal-portfolio.freecodecamp.rocks/">https://personal-portfolio.freecodecamp.rocks</a></p>
</blockquote>
<span id="more"></span>

<p><strong>User Stories:</strong></p>
<ol>
<li>Your portfolio should have a welcome section with an <code>id</code> of <code>welcome-section</code></li>
<li>The welcome section should have an <code>h1</code> element that contains text</li>
<li>Your portfolio should have a projects section with an <code>id</code> of <code>projects</code></li>
<li>The projects section should contain at least one element with a <code>class</code> of <code>project-tile</code> to hold a project</li>
<li>The projects section should contain at least one link to a project</li>
<li>Your portfolio should have a navbar with an id of <code>navbar</code></li>
<li>The navbar should contain at least one link that you can click on to navigate to different sections of the page</li>
<li>Your portfolio should have a link with an id of <code>profile-link</code>, which opens your GitHub or freeCodeCamp profile in a new tab</li>
<li>Your portfolio should have at least one media query</li>
<li>The height of the welcome section should be equal to the height of the viewport</li>
<li>The navbar should always be at the top of the viewport</li>
</ol>
<p>Fulfill the user stories and pass all the tests below to complete this project. Give it your own personal style. Happy Coding!</p>
<p><strong>Note:</strong> Be sure to add <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code> in your HTML to link your stylesheet and apply your CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">&quot;welcome-section&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#projects&quot;</span>&gt;</span>xiangmu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;projects&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;project-tile&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;project-tile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;project-tile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;profile-link&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">75em</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#navbar</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完善并作为博客的一页！！！！！！！！！！！</p>
]]></content>
      <categories>
        <category>Project Exercise</category>
        <category>Primary Program</category>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>Project Exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm——LinkedList</title>
    <url>/algorithm%E2%80%94%E2%80%94linkedlist/</url>
    <content><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="1-理论基础"><a href="#1-理论基础" class="headerlink" title="1.理论基础"></a>1.理论基础</h2><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部构成</p>
<span id="more"></span>

<ul>
<li><p>一个是数据域</p>
</li>
<li><p>一个是指针域（存放指向下一个节点的指针）</p>
</li>
</ul>
<p>最后一个节点的指针域指向null（空指针）</p>
<p>链表的入口节点称为链表的头节点（head）</p>
<p><img src="/images/2023-05-30-11-19-15-image.png"></p>
<hr>
<h3 id="1-1-链表的类型"><a href="#1-1-链表的类型" class="headerlink" title="1.1 链表的类型"></a>1.1 链表的类型</h3><ul>
<li><p>单链表</p>
<ul>
<li>指针域只能指向节点的下一个节点</li>
</ul>
</li>
<li><p>双链表</p>
<ul>
<li><p>每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点</p>
</li>
<li><p>双链表既可以向前查询也可以向后查询)</p>
</li>
<li><p><img src="/images/2023-05-30-11-23-09-image.png"></p>
</li>
</ul>
</li>
<li><p>循环列表</p>
<ul>
<li><p>链表首尾相连</p>
</li>
<li><p>可以解决约瑟夫环问题</p>
</li>
<li><p><img src="/images/2023-05-30-11-24-37-image.png"></p>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-链表的存储方式"><a href="#1-2-链表的存储方式" class="headerlink" title="1.2 链表的存储方式"></a>1.2 链表的存储方式</h3><p>链表在内存中不是连续分布的</p>
<p>链表是通过指针域的指针链接在内存中的各个节点，所以链表中的节点是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理</p>
<h3 id="1-3-链表操作"><a href="#1-3-链表操作" class="headerlink" title="1.3 链表操作"></a>1.3 链表操作</h3><p><strong>删除节点</strong></p>
<p><img src="/images/2023-06-01-13-54-52-image.png"></p>
<p><strong>添加节点</strong></p>
<p><img src="/images/2023-06-01-13-56-12-image.png"></p>
<p>可以看出链表的增添和删除都是O(1)操作，也不会影响到其他节点。</p>
<p>但是要注意，要是删除第五个节点，需要从头节点查找到第四个节点通过next指针进行删除操作，查找的时间复杂度是O(n)。</p>
<p><img src="/images/2023-06-01-13-57-15-image.png"></p>
<hr>
<p><strong>链表定义</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">  val;</span><br><span class="line">  next = <span class="literal">null</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-移除链表元素"><a href="#2-移除链表元素" class="headerlink" title="2. 移除链表元素"></a>2. 移除链表元素</h2><p>203.给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>
<p><img src="/images/2023-06-01-14-03-45-image.png"></p>
<div class="tabs" id="test203"><ul class="nav-tabs"><li class="tab active"><a href="#test203-1">示例1</a></li><li class="tab"><a href="#test203-2">示例2</a></li><li class="tab"><a href="#test203-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test203-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test203-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test203-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>链表操作的两种方式：</p>
<ul>
<li><p><strong>直接使用原来的链表来进行删除操作。</strong></p>
<ul>
<li>移除头结点和移除其他节点的操作是不一样的，因为链表的其他节点都是通过前一个节点来移除当前节点，而头结点没有前一个节点。所以头结点如何移除呢，其实只要将头结点向后移动一位就可以，这样就从链表中移除了一个头结点。</li>
</ul>
</li>
<li><p><strong>设置一个虚拟头结点在进行删除操作。</strong></p>
</li>
</ul>
<p><img src="/images/2023-06-01-14-08-23-image.png"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span>(<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">    <span class="keyword">let</span> cur = ret;</span><br><span class="line">    <span class="keyword">while</span>(cur.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">next</span>.<span class="property">val</span> === val) &#123;</span><br><span class="line">            cur.<span class="property">next</span> =  cur.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-设计链表"><a href="#3-设计链表" class="headerlink" title="3.设计链表"></a>3.设计链表</h2><p>707.你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>
<p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。</p>
<p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p>
<p>实现 MyLinkedList 类：</p>
<ul>
<li><p><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</p>
</li>
<li><p><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 -1 。</p>
</li>
<li><p><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</p>
</li>
<li><p><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</p>
</li>
<li><p><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 不会插入 到链表中。</p>
</li>
<li><p><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点</p>
</li>
</ul>
<div class="tabs" id="test707"><ul class="nav-tabs"><li class="tab active"><a href="#test707-1">示例1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test707-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;MyLinkedList&quot;, &quot;addAtHead&quot;, &quot;addAtTail&quot;, &quot;addAtIndex&quot;, &quot;get&quot;, &quot;deleteAtIndex&quot;, &quot;get&quot;]</span><br><span class="line">[[], [1], [3], [1, 2], [1], [1], [1]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, null, 2, null, 3]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MyLinkedList myLinkedList = new MyLinkedList();</span><br><span class="line">myLinkedList.addAtHead(1);</span><br><span class="line">myLinkedList.addAtTail(3);</span><br><span class="line">myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 2</span><br><span class="line">myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3</span><br><span class="line">myLinkedList.get(1);              // 返回 3</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>这道题目设计链表的五个接口：</p>
<ul>
<li>获取链表第index个节点的数值</li>
<li>在链表的最前面插入一个节点</li>
<li>在链表的最后面插入一个节点</li>
<li>在链表第index个节点前面插入一个节点</li>
<li>删除链表的第index个节点</li>
</ul>
<p>可以说这五个接口，已经覆盖了链表的常见操作，是练习链表操作非常好的一道题目</p>
<p><strong>链表操作的两种方式：</strong></p>
<ol>
<li>直接使用原来的链表来进行操作。</li>
<li>设置一个虚拟头结点在进行操作。</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val,next</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span>=val;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span>=next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyLinkedList</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_tail</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span>=<span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getNode</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">_size</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 创建虚拟头节点</span></span><br><span class="line">    <span class="keyword">let</span> cur = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">_head</span>);</span><br><span class="line">    <span class="comment">// 0 -&gt; head</span></span><br><span class="line">    <span class="keyword">while</span>(index-- &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">_size</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNode</span>(index).<span class="property">val</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtHead</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val, <span class="variable language_">this</span>.<span class="property">_head</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span> = node;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>++;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">_tail</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_tail</span> = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtTail</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val, <span class="literal">null</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>++;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">_tail</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_tail</span>.<span class="property">next</span> = node;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_tail</span> = node;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_tail</span> = node;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span> = node;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtIndex</span> = <span class="keyword">function</span>(<span class="params">index, val</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(index &gt; <span class="variable language_">this</span>.<span class="property">_size</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addAtHead</span>(val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index === <span class="variable language_">this</span>.<span class="property">_size</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addAtTail</span>(val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取目标节点的上一个的节点</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="title function_">getNode</span>(index - <span class="number">1</span>);</span><br><span class="line">    node.<span class="property">next</span> = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val, node.<span class="property">next</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">deleteAtIndex</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">_size</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_head</span> = <span class="variable language_">this</span>.<span class="property">_head</span>.<span class="property">next</span>;</span><br><span class="line">        <span class="comment">// 如果删除的这个节点同时是尾节点，要处理尾节点</span></span><br><span class="line">        <span class="keyword">if</span>(index === <span class="variable language_">this</span>.<span class="property">_size</span> - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_tail</span> = <span class="variable language_">this</span>.<span class="property">_head</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_size</span>--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取目标节点的上一个的节点</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="title function_">getNode</span>(index - <span class="number">1</span>);    </span><br><span class="line">    node.<span class="property">next</span> = node.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="comment">// 处理尾节点</span></span><br><span class="line">    <span class="keyword">if</span>(index === <span class="variable language_">this</span>.<span class="property">_size</span> - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_tail</span> = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>--;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyLinkedList()</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.get(index)</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val)</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val)</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val)</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="4-翻转链表"><a href="#4-翻转链表" class="headerlink" title="4.翻转链表"></a>4.翻转链表</h2><p>206.给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<div class="tabs" id="test206"><ul class="nav-tabs"><li class="tab active"><a href="#test206-1">示例1</a></li><li class="tab"><a href="#test206-2">示例2</a></li><li class="tab"><a href="#test206-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test206-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test206-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test206-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>只需要改变链表的next指针的指向，直接将链表反转 ，而不用重新定义一个新的链表，如图所示:</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210218090901207.png" alt="206_反转链表"></p>
<p>之前链表的头节点是元素1， 反转之后头结点就是元素5 ，这里并没有添加或者删除节点，仅仅是改变next指针的方向。</p>
<p>那么接下来看一看是如何反转的呢？</p>
<p>首先定义一个cur指针，指向头结点，再定义一个pre指针，初始化为null。</p>
<p>然后就要开始反转了，首先要把 cur-&gt;next 节点用tmp指针保存一下，也就是保存一下这个节点。</p>
<p>为什么要保存一下这个节点呢，因为接下来要改变 cur-&gt;next 的指向了，将cur-&gt;next 指向pre ，此时已经反转了第一个节点了。</p>
<p>接下来，就是循环走如下代码逻辑了，继续移动pre和cur指针。</p>
<p>最后，cur 指针已经指向了null，循环结束，链表也反转完毕了。 此时我们return pre指针就可以了，pre指针就指向了新的头结点。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p><strong>双指针法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="literal">null</span>, pre = <span class="literal">null</span>, cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        temp = cur.<span class="property">next</span>;</span><br><span class="line">        cur.<span class="property">next</span> = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// temp = cur = null;</span></span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>递归法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="keyword">function</span>(<span class="params">pre, head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> pre;</span><br><span class="line">    <span class="keyword">const</span> temp = head.<span class="property">next</span>;</span><br><span class="line">    head.<span class="property">next</span> = pre;</span><br><span class="line">    pre = head</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(pre, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(<span class="literal">null</span>, head);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-俩俩交换链表中的节点"><a href="#5-俩俩交换链表中的节点" class="headerlink" title="5. 俩俩交换链表中的节点"></a>5. 俩俩交换链表中的节点</h2><p>24.给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>
<p><img src="/images/2023-06-05-13-33-26-image.png"></p>
<div class="tabs" id="test24"><ul class="nav-tabs"><li class="tab active"><a href="#test24-1">示例1</a></li><li class="tab"><a href="#test24-2">示例2</a></li><li class="tab"><a href="#test24-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test24-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test24-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test24-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ul>
<li><p>设置虚拟头结点 dummy，因为真实头结点要换人，设置了 dummy 后，dummy.next 就能找到头结点。</p>
</li>
<li><p>开启 while 循环，一对结点的交换有三个指针要改变，见下图。</p>
<p><img src="/images/2023-06-05-13-46-09-image.png"></p>
</li>
<li><p>指针推进，准备交换下一对结点。</p>
</li>
<li><p>最后返回 dummy.next 。</p>
</li>
</ul>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span> (<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head), temp = ret;</span><br><span class="line">  <span class="keyword">while</span> (temp.<span class="property">next</span> &amp;&amp; temp.<span class="property">next</span>.<span class="property">next</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = temp.<span class="property">next</span>.<span class="property">next</span>, pre = temp.<span class="property">next</span>;</span><br><span class="line">    pre.<span class="property">next</span> = cur.<span class="property">next</span>;</span><br><span class="line">    cur.<span class="property">next</span> = pre;</span><br><span class="line">    temp.<span class="property">next</span> = cur;</span><br><span class="line">    temp = pre;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="6-删除链表的倒数第N个节点"><a href="#6-删除链表的倒数第N个节点" class="headerlink" title="6. 删除链表的倒数第N个节点"></a>6. 删除链表的倒数第N个节点</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><img src="/images/2023-06-05-13-51-29-image.png"></p>
<div class="tabs" id="test6"><ul class="nav-tabs"><li class="tab active"><a href="#test6-1">示例1</a></li><li class="tab"><a href="#test6-2">示例2</a></li><li class="tab"><a href="#test6-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test6-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test6-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test6-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ul>
<li><p>使用虚拟头结点</p>
</li>
<li><p>定义fast指针和slow指针，初始值为虚拟头结点</p>
</li>
<li><p>fast首先走n + 1步 ，为什么是n+1呢，因为只有这样同时移动的时候slow才能指向删除节点的上一个节点（方便做删除操作）</p>
</li>
<li><p>fast和slow同时移动，直到fast指向末尾</p>
</li>
<li><p>删除slow指向的下一个节点</p>
</li>
</ul>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head),</span><br><span class="line">        slow = fast = ret;</span><br><span class="line">    <span class="keyword">while</span>(n--) fast = fast.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">        fast = fast.<span class="property">next</span>; </span><br><span class="line">        slow = slow.<span class="property">next</span></span><br><span class="line">    &#125;;</span><br><span class="line">    slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">return</span> ret.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="7-链表相交"><a href="#7-链表相交" class="headerlink" title="7. 链表相交"></a>7. 链表相交</h2><p>160.给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p>
<p>图示两个链表在节点 c1 开始相交：</p>
<p><img src="/images/2023-06-05-14-17-10-image.png"></p>
<p>题目数据 保证 <code>整个链式结构中不存在环</code>。</p>
<p>注意，函数返回结果后，链表必须 保持其原始结构 。</p>
<div class="tabs" id="test160"><ul class="nav-tabs"><li class="tab active"><a href="#test160-1">示例1</a></li><li class="tab"><a href="#test160-2">示例2</a></li><li class="tab"><a href="#test160-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test160-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test160-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test160-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>双指针法，只有当链表headA和headB都不为空时，两个链表采可能相交</p>
<ul>
<li><p>首先判断两链表是否为空，如果其中至少有一个链表为空，则一定不相交，返回null</p>
</li>
<li><p>当两链表都不为空时，创建连个指针pA和pB，初始时分别指向两个链表的头节点headA和headB，然后将两个指针依次遍历两个链表的每个节点</p>
<ul>
<li><p>每步操作需要同时更新指针pA和pB</p>
</li>
<li><p>如果指针pA不为空，则将其移到下一个节点，指针pB同样</p>
</li>
<li><p>如果指针pA为空，则将指针pA移到链表headB的头节点，指针pB则相反</p>
</li>
<li><p>当指针pA和pB指向同一个节点或者都为空时，返回他们所指向的节点或null</p>
</li>
</ul>
</li>
</ul>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headA</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headB</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span>(<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (headA === <span class="literal">null</span> || headB === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pA = headA, pB = headB;</span><br><span class="line">    <span class="keyword">while</span> (pA !== pB) &#123;</span><br><span class="line">        pA = pA === <span class="literal">null</span> ? headB : pA.<span class="property">next</span>;</span><br><span class="line">        pB = pB === <span class="literal">null</span> ? headA : pB.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pA;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="8-环形链表II"><a href="#8-环形链表II" class="headerlink" title="8. 环形链表II"></a>8. 环形链表II</h2><p>142.给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>不允许修改 链表。</p>
<div class="tabs" id="test142"><ul class="nav-tabs"><li class="tab active"><a href="#test142-1">示例1</a></li><li class="tab"><a href="#test142-2">示例2</a></li><li class="tab"><a href="#test142-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test142-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test142-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test142-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><ul>
<li><p>判断是否有环</p>
<ul>
<li>可以使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。</li>
</ul>
</li>
<li><p>判断环的入口</p>
<ul>
<li><p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。</p>
</li>
<li><p>那么相遇时： slow指针走过的节点数为: <code>x + y</code>， fast指针走过的节点数：<code>x + y + n (y + z)</code>，n为fast指针在环内走了n圈才遇到slow指针， （y+z）为 一圈内节点的个数A。</p>
<p>因为fast指针是一步走两个节点，slow指针一步走一个节点， 所以 fast指针走过的节点数 = slow指针走过的节点数 * 2：</p>
<p><code>(x + y) * 2 = x + y + n (y + z)</code></p>
<p>两边消掉一个（x+y）: <code>x + y = n (y + z)</code></p>
<p>因为要找环形的入口，那么要求的是x，因为x表示 头结点到 环形入口节点的的距离。</p>
<p>所以要求x ，将x单独放在左面：<code>x = n (y + z) - y</code> ,</p>
<p>再从n(y+z)中提出一个 （y+z）来，整理公式之后为如下公式：<code>x = (n - 1) (y + z) + z</code> 注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p>
<p>这个公式说明什么呢？</p>
<p>先拿n为1的情况来举例，意味着fast指针在环形里转了一圈之后，就遇到了 slow指针了。</p>
<p>当 n为1的时候，公式就化解为 <code>x = z</code>，</p>
<p>这就意味着，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p>
<p>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。</p>
<p>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p>
</li>
</ul>
</li>
</ul>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> slow =head.<span class="property">next</span>, fast = head.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span> &amp;&amp; fast!== slow) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fast || !fast.<span class="property">next</span> ) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    slow = head;</span><br><span class="line">    <span class="keyword">while</span> (fast !== slow) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
        <category>LinkedList</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Algorithm</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML notes</title>
    <url>/html-notes/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1-HTML概念"><a href="#1-HTML概念" class="headerlink" title="1. HTML概念"></a>1. HTML概念</h2><p>HTML(HyperText Markup Language,超文本标记语言)是一种用来告知浏览器如何组织页面的标记语言</p>
<span id="more"></span>

<blockquote>
<p>HTML标签不区分大小写</p>
</blockquote>
<h2 id="2-HTML元素"><a href="#2-HTML元素" class="headerlink" title="2. HTML元素"></a>2. HTML元素</h2><p>由开始标签、内容、结束标签构成一个整体</p>
<ul>
<li><p>开始标签（Opening tag）：包含元素的名称，被&lt;&gt;包裹。开头标签标志着元素开始或开始生效的地方</p>
</li>
<li><p>内容（Content）：元素的内容</p>
</li>
<li><p>结束标签（Closing tag）：与开始标签相似，只是其在元素名之前包含一个/。这标志着该元素的结束</p>
</li>
</ul>
<h3 id="2-1-元素"><a href="#2-1-元素" class="headerlink" title="2.1 元素"></a>2.1 元素</h3><h4 id="lt-p-gt-元素"><a href="#lt-p-gt-元素" class="headerlink" title="&lt;p&gt; 元素"></a><code>&lt;p&gt;</code> 元素</h4><ul>
<li>定义段落<code>&lt;p&gt;&lt;/p&gt;</code></li>
</ul>
<h4 id="lt-h-gt-标题元素"><a href="#lt-h-gt-标题元素" class="headerlink" title="&lt;h&gt; 标题元素"></a><code>&lt;h&gt;</code> 标题元素</h4><ul>
<li><p>每个标题（Heading）都必须被包裹在一个标题元素中</p>
</li>
<li><p><code>&lt;h1&gt;</code>–<code>&lt;h6&gt;</code>:共六种标题元素标签，每个元素代表文档中不同级别的内容</p>
</li>
<li><p><code>&lt;h1&gt;</code> 也是一个语义元素，塌缩包裹的文本具有“页面上的顶级标题”的作用。</p>
</li>
<li><p>注意</p>
<ul>
<li><p>最好只对每个页面使用一次 <code>&lt;h1&gt;</code>——这是顶级标题，所有其他标题位于层次结构中的下方。</p>
</li>
<li><p>请确保在层次结构中以正确的顺序使用标题。不要使用 <code>&lt;h3&gt;</code> 来表示副标题，后面再跟 <code>&lt;h2&gt;</code> 来表示二级副标题——这是没有意义的，会导致奇怪的结果。</p>
</li>
<li><p>在现有的六个标题层次中，除非觉得有必要，否则应该争取每页使用不超过三个。有很多层次的文件（例如，深层次的标题层次）会变得笨重，难以浏览。在这种情况下，如果可能的话，建议将内容分散到多个页面。</p>
</li>
</ul>
</li>
</ul>
<h4 id="lt-ul-gt-无序列表标签"><a href="#lt-ul-gt-无序列表标签" class="headerlink" title="&lt;ul&gt; 无序列表标签"></a><code>&lt;ul&gt;</code> 无序列表标签</h4><ul>
<li><p><code>&lt;ul&gt;&lt;/ul&gt;</code>包裹所需要的清单项目</p>
</li>
<li><p><code>&lt;li&gt;&lt;/li&gt;</code> 把每个列出的项目单独包裹起来</p>
</li>
</ul>
<h4 id="lt-ol-gt-有序列表标签"><a href="#lt-ol-gt-有序列表标签" class="headerlink" title="&lt;ol&gt; 有序列表标签"></a><code>&lt;ol&gt;</code> 有序列表标签</h4><p>需要按照项目的顺序列出来</p>
<ul>
<li>结构与无序列表相同，但需要用<code>&lt;ol&gt;</code> 元素包裹所有项目</li>
</ul>
<blockquote>
<p>列表之间可以嵌套</p>
</blockquote>
<h4 id="lt-dl-gt-描述列表"><a href="#lt-dl-gt-描述列表" class="headerlink" title="&lt;dl&gt;描述列表"></a><code>&lt;dl&gt;</code>描述列表</h4><p>使用闭合标签<code>&lt;dl&gt;</code> ，此外，每一项都用 <code>&lt;dt&gt;</code> 元素闭合，每个描述都用 <code>&lt;dd&gt;</code> 元素闭合</p>
<ul>
<li><p>浏览器的默认样式会在描述列表的术语及其定义之间产生缩进</p>
</li>
<li><p>单个术语可以同时有多个描述</p>
</li>
</ul>
<h4 id="lt-img-gt-元素"><a href="#lt-img-gt-元素" class="headerlink" title="&lt;img&gt; 元素"></a><code>&lt;img&gt;</code> 元素</h4><p>是一个空元素，</p>
<ul>
<li>需要src使其生效，<code>src</code> 属性包含了图片的路径。</li>
</ul>
<blockquote>
<p><code>&lt;img src=&quot;&quot;&gt;</code> </p>
</blockquote>
<ul>
<li><p><code>alt</code> 对图片进行描述，用于图片无法显示或不能被看到的情况</p>
</li>
<li><p><code>title</code> 鼠标放置图片上显示信息</p>
</li>
<li><p>可通过<code>width</code>和<code>height</code>元素设置宽高，尽量使用CSS调整图片尺寸</p>
</li>
<li><p><code>srcset</code> 定义了浏览器可选择的图片设置及每个图片的大小，每张图片信息的设置要用逗号分隔。</p>
<p>每个设置为</p>
<ul>
<li><p>一个文件名</p>
</li>
<li><p>一个空格</p>
</li>
<li><p>图片的固有宽度</p>
</li>
</ul>
</li>
<li><p><code>sizes</code> 定义了一组媒体条件并且指明当前某些媒体条件为真时，最佳尺寸是多少</p>
</li>
</ul>
<h4 id="lt-figure-gt-元素"><a href="#lt-figure-gt-元素" class="headerlink" title="&lt;figure&gt; 元素"></a><code>&lt;figure&gt;</code> 元素</h4><p>为元素提供语义容器，在标题和图片之间建立关联 —— <code>&lt;figcaption&gt;</code>    </p>
<p>该元素中不一定要是图片，可以是一个独立内容单元</p>
<ul>
<li><p>用简洁、易懂的方式表达意图</p>
</li>
<li><p>可以置于页面线性流的某处</p>
</li>
<li><p>为主要内容提供重要的补充说明</p>
</li>
<li><p>可以是图片、代码、音频、方程等</p>
</li>
</ul>
<h4 id="lt-video-gt-元素"><a href="#lt-video-gt-元素" class="headerlink" title="&lt;video&gt; 元素"></a><code>&lt;video&gt;</code> 元素</h4><p>嵌入一段视频</p>
<p>属性</p>
<ul>
<li><p><code>src</code> 指向想要嵌入的视频资源地址</p>
</li>
<li><p><code>control</code> 控制视频的回放功能， 可用其来包含浏览器提供的控件页面</p>
</li>
<li><p>标签中内容：也称为后备内容，当浏览器不支持该标签时，就会显示该内容</p>
</li>
<li><p><code>autoplay</code> 会使视频内容立即播放</p>
</li>
<li><p><code>loop</code> 循环播放</p>
</li>
<li><p><code>muted</code> 媒体播放时，默认关闭声音</p>
</li>
<li><p><code>poster</code> 指向一个图像的URL，这个图像会在视频播放前显示，通常用于预览或广告</p>
</li>
<li><p><code>preload</code> 被用来缓冲较大的文件</p>
<ul>
<li><p><code>none</code> 不缓冲</p>
</li>
<li><p><code>auto</code> 页面加载后缓存媒体文件</p>
</li>
<li><p><code>metadata</code> 仅缓冲文件的元数据</p>
</li>
</ul>
</li>
</ul>
<h4 id="lt-audio-gt-元素"><a href="#lt-audio-gt-元素" class="headerlink" title="&lt;audio&gt; 元素"></a><code>&lt;audio&gt;</code> 元素</h4><p>同<code>video</code> 元素</p>
<p>注意：</p>
<ul>
<li><p>不支持<code>width/height</code>属性</p>
</li>
<li><p>不支持<code>poster</code>属性</p>
</li>
</ul>
<h4 id="lt-iframe-gt-元素"><a href="#lt-iframe-gt-元素" class="headerlink" title="&lt;iframe&gt; 元素"></a><code>&lt;iframe&gt;</code> 元素</h4><p>可以将其他Web文档嵌入到当前的文档中。</p>
<p>基本要素</p>
<ul>
<li><p><code>allowfullscreen</code> 可以通过全屏API设置为全屏模式</p>
</li>
<li><p><code>frameborder</code> 如设置为1，则会在此框架和其他框架之间绘制边框，默认行为；0删除边框</p>
</li>
<li><p><code>src</code> 与<code>&lt;video&gt;</code>元素表示文档中的图像，指向要嵌入文档的URL路径</p>
</li>
<li><p><code>sandbox</code> 提高安全性设置</p>
</li>
</ul>
<h4 id="lt-table-gt-表格元素"><a href="#lt-table-gt-表格元素" class="headerlink" title="&lt;table&gt; 表格元素"></a><code>&lt;table&gt;</code> 表格元素</h4><p><code>&lt;table&gt;&lt;/table&gt;</code></p>
<ul>
<li><p><code>&lt;tr&gt;</code> 元素（table row）</p>
</li>
<li><p>在表格中最小的内容容器是单元格，通过<code>&lt;td&gt;</code> 元素创建（table data）</p>
</li>
<li><p><code>&lt;th&gt;</code> 元素添加标题</p>
</li>
<li><p>属性 <code>colspan</code>,<code>rowspan</code> 可以控制单元格宽高</p>
</li>
<li><p><code>&lt;caption&gt;</code> 元素可以为表格添加标题，放在<code>&lt;table&gt;</code> 标签的下面</p>
</li>
</ul>
<p>采用<code>&lt;thead&gt;</code>,<code>&lt;tfoot&gt;</code>,<code>&lt;tbody&gt;</code>使表格结构更明确</p>
<ul>
<li><p><code>&lt;thead&gt;</code> 必须包住表格中作为表头的部分，一般是第一行，往往都是每列的标题</p>
<ul>
<li>若使用<code>&lt;col&gt;/&lt;colground&gt;</code> 元素，那么<code>&lt;thead&gt;</code> 元素需要在其下面</li>
</ul>
</li>
<li><p><code>&lt;tfoot&gt;</code> 元素需要包住表格中作为表脚的部分，一般是最后一行，往往是对前面所有行的总结</p>
</li>
<li><p><code>&lt;tbody&gt;</code> 元素需要包住表格内容中不再表头或表尾的其他部分</p>
</li>
</ul>
<h4 id="强调元素"><a href="#强调元素" class="headerlink" title="强调元素"></a>强调元素</h4><ol>
<li><p><code>&lt;em&gt;</code> 内容呈粗斜体</p>
</li>
<li><p><code>&lt;strong&gt;</code> 内容呈粗体</p>
</li>
</ol>
<h4 id="表象元素"><a href="#表象元素" class="headerlink" title="表象元素"></a>表象元素</h4><ul>
<li><p><code>&lt;i&gt;</code> 被用来传达传统上用斜体表达的意义：外国文字，分类名称，技术术语，一种思想……</p>
</li>
<li><p><code>&lt;b&gt;</code>被用来传达传统上用粗体表达的意义：关键字，产品名称，引导句……</p>
</li>
<li><p><code>&lt;u&gt;</code>被用来传达传统上用下划线表达的意义：专有名词，拼写错误……</p>
</li>
</ul>
<h4 id="换行和水平分割线"><a href="#换行和水平分割线" class="headerlink" title="换行和水平分割线"></a>换行和水平分割线</h4><p><code>&lt;br&gt;</code>：换行元素，可在段落中进行换行；唯一能够生成多个短行结构的元素</p>
<p><code>&lt;hr&gt;</code> ：主题性中断元素，在文档中生成一条水平分割线，表示文本中主题的变化</p>
<h4 id="缩略语"><a href="#缩略语" class="headerlink" title="缩略语"></a>缩略语</h4><p><code>&lt;abbr&gt;</code> 常被用来包裹一个缩略语或缩写，并且提供缩写的解释。</p>
<p>如果为缩写提供扩展信息的意义不大，而且该缩写或首字母缩写是一个相当简短的术语，则应提供该术语的完整扩展，作为 <code>title</code> 属性的值</p>
<h4 id="lt-address-gt-标记联系元素"><a href="#lt-address-gt-标记联系元素" class="headerlink" title="&lt;address&gt; 标记联系元素"></a><code>&lt;address&gt;</code> 标记联系元素</h4><p>仅仅包含联系方式，其中可以包含更复杂的标记和其他形式的联系方式</p>
<blockquote>
<p> <code>&lt;address&gt;</code>元素只能用于提供最近的 <code>&lt;article&gt;</code>)或<code>&lt;body&gt;</code>元素所含文件的联系信息。在一个网站的页脚使用它来包括整个网站的联系信息，或者在一篇文章里面使用它来包括作者的联系信息，这都是正确的，但不能用来标记与该页面内容无关的地址列表。</p>
</blockquote>
<h4 id="上下标元素"><a href="#上下标元素" class="headerlink" title="上下标元素"></a>上下标元素</h4><ul>
<li><p><code>&lt;sup&gt;</code></p>
</li>
<li><p><code>&lt;sub&gt;</code> </p>
</li>
</ul>
<h4 id="展示计算机代码"><a href="#展示计算机代码" class="headerlink" title="展示计算机代码"></a>展示计算机代码</h4><ul>
<li><p><code>&lt;code&gt;</code> 用于标记计算机通用代码</p>
</li>
<li><p><code>&lt;pre&gt;</code> 用于保留空白字符（通常用于代码块）——如果文本中使用了缩进或多余的空白，浏览器将忽略它，你将不会在呈现的页面上看到它。但是，如果你将文本包含在 <code>&lt;pre&gt;&lt;/pre&gt;</code> 标签中，那么空白将会以与你在文本编辑器中看到的相同的方式渲染出来。</p>
</li>
<li><p><code>&lt;var&gt;</code> 用于标记具体变量名。</p>
</li>
<li><p><code>&lt;kbd&gt;</code> 用于标记输入电脑的键盘（或其他类型）输入。</p>
</li>
<li><p><code>&lt;samp&gt;</code> 用于标记计算机程序的输出。</p>
</li>
</ul>
<h4 id="lt-time-gt-标记时间日期"><a href="#lt-time-gt-标记时间日期" class="headerlink" title="&lt;time&gt; 标记时间日期"></a><code>&lt;time&gt;</code> 标记时间日期</h4><p>支持将时间和日期标记为可供机器识别的格式</p>
<h3 id="2-2-嵌套元素"><a href="#2-2-嵌套元素" class="headerlink" title="2.2 嵌套元素"></a>2.2 嵌套元素</h3><p>    可以将元素放到其他元素之中，保证所有元素都正确的打开和关闭。</p>
<h3 id="2-3-块级元素和内联元素"><a href="#2-3-块级元素和内联元素" class="headerlink" title="2.3 块级元素和内联元素"></a>2.3 块级元素和内联元素</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li><p>在页面中以块的形式展现</p>
</li>
<li><p>占据其父元素（容器）的整个水平空间，垂直空间等于其内容的高度</p>
</li>
<li><p>独占一行</p>
<ul>
<li><p>一个块级元素出现在它前面内容的新行上</p>
</li>
<li><p>任何跟在块级元素后面的内容也会出现在新的行上</p>
</li>
</ul>
</li>
<li><p>块级元素通常是页面上的结构元素</p>
</li>
<li><p>一个块级元素不会嵌套在一个内联元素里面</p>
</li>
<li><p>一个块级元素可能嵌套在另一个块级元素里面</p>
</li>
</ul>
<h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul>
<li>块级元素只能出现在<code>&lt;body&gt;</code>元素内</li>
</ul>
<h5 id="元素列表"><a href="#元素列表" class="headerlink" title="元素列表"></a>元素列表</h5><p><code>&lt;address&gt;</code></p>
<ul>
<li>联系方式信息</li>
</ul>
<p><code>&lt;article&gt;</code></p>
<ul>
<li> 文章内容</li>
</ul>
<p><code>&lt;aside&gt;</code></p>
<ul>
<li>伴随内容</li>
</ul>
<p><code>&lt;blockquote&gt;</code></p>
<ul>
<li>块引用</li>
</ul>
<p><code>&lt;dd&gt;</code></p>
<ul>
<li>定义列表中定义条目描述</li>
</ul>
<p><code>&lt;div&gt;</code></p>
<ul>
<li>文档分区</li>
</ul>
<p><code>&lt;dl&gt;</code></p>
<ul>
<li>定义列表</li>
</ul>
<p><code>&lt;fieldset&gt;</code></p>
<ul>
<li>表单元素分组</li>
</ul>
<p><code>&lt;figcaption&gt;</code></p>
<ul>
<li>图文信息组标题</li>
</ul>
<p><code>&lt;figure&gt;</code></p>
<ul>
<li>图文信息组</li>
</ul>
<p><code>&lt;footer&gt;</code></p>
<ul>
<li>区段尾或页尾</li>
</ul>
<p><code>&lt;form&gt;</code></p>
<ul>
<li>表单</li>
</ul>
<p><code>h1</code>-<code>h6</code></p>
<ul>
<li>标题级别 1-6</li>
</ul>
<p><code>&lt;header&gt;</code></p>
<ul>
<li>区段头或页头</li>
</ul>
<p><code>&lt;hgroup&gt;</code></p>
<ul>
<li>标题组</li>
</ul>
<p><code>&lt;hr&gt;</code></p>
<ul>
<li>水平分割线</li>
</ul>
<p><code>&lt;ol&gt;</code></p>
<ul>
<li>有序列表</li>
</ul>
<p><code>&lt;p&gt;</code></p>
<ul>
<li>行</li>
</ul>
<p><code>&lt;pre&gt;</code></p>
<ul>
<li>预格式化文本</li>
</ul>
<p><code>&lt;section&gt;</code></p>
<ul>
<li>一个页面区段</li>
</ul>
<p><code>&lt;table&gt;</code></p>
<ul>
<li>表格</li>
</ul>
<p><code>&lt;ul&gt;</code></p>
<ul>
<li>无序列表</li>
</ul>
<h4 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h4><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul>
<li><p>通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或一组内容</p>
</li>
<li><p>内联元素不会导致文本换行</p>
</li>
<li><p>通常与文本一起使用</p>
</li>
</ul>
<h5 id="元素列表-1"><a href="#元素列表-1" class="headerlink" title="元素列表"></a>元素列表</h5><ul>
<li>b, big, i, small, tt</li>
<li>abbr, acronym, cite, code, dfn, em, kbd,<br>strong, samp, var</li>
<li><a href="#superlink">a</a>, bdo, br, img, map, object, q, script,<br>span, sub, sup</li>
<li>button, input, label, select, textarea</li>
</ul>
<h4 id="块级元素与行内元素的关键区别"><a href="#块级元素与行内元素的关键区别" class="headerlink" title="块级元素与行内元素的关键区别"></a>块级元素与行内元素的关键区别</h4><ul>
<li><p>格式</p>
<ul>
<li><p>默认情况下，块级元素会新起一行</p>
</li>
<li><p>默认情况下，行内元素不会以新行开始</p>
</li>
</ul>
</li>
<li><p>内容模型</p>
<ul>
<li><p>一般块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更“大型”的结构</p>
</li>
<li><p>一般行内元素只能包含数据和其他行内元素</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-4-空元素"><a href="#2-4-空元素" class="headerlink" title="2.4 空元素"></a>2.4 空元素</h3><p>    一些元素只有一个表亲啊，通常用来在此元素所在位置插入/嵌入一些东西，这些元素被称为空元素</p>
<h2 id="3-属性"><a href="#3-属性" class="headerlink" title="3. 属性"></a>3. 属性</h2><p>    元素拥有属性，属性包含元素的额外信息，这些信息不会出现在实际的内容中</p>
<p>    属性必须包含</p>
<ul>
<li><p>一个空格：在属性和元素名称之间。如果一个元素具有多个属性，则每个属性之间必须用空格分隔</p>
</li>
<li><p>属性名称，后面添加等号=</p>
</li>
<li><p>一个属性值，由一对引号引起来</p>
</li>
</ul>
<h4 id="布尔属性"><a href="#布尔属性" class="headerlink" title="布尔属性"></a>布尔属性</h4><p>    布尔属性只能有一个值，这个值一般与属性名称相同</p>
<h2 id="4-HTML文档结构"><a href="#4-HTML文档结构" class="headerlink" title="4. HTML文档结构"></a>4. HTML文档结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的测试站点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我的页面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>&lt;!DOCTYPE html&gt;</code>声明文档类型。</p>
</li>
<li><p><code>&lt;html&gt;&lt;/html&gt;</code> :这个元素包裹了页面中所有内容，有时被称为根元素</p>
</li>
<li><p><code>&lt;head&gt;&lt;/head&gt;</code> :这个元素是一个容器，包含了所有想包含在HTML页面中但不在HTML页面中显示的内容。这些内容包括了关键字、页面描述、CSS样式、字符集声明等。</p>
</li>
<li><p><code>&lt;meta&gt;</code>:这个元素代表了不能由其他HTML元相关元素表示的元数据。</p>
</li>
<li><p><code>&lt;title&gt;&lt;/title&gt;</code> :设置了页面的标题，即出现在该页面加载的浏览器标签中的内容</p>
</li>
<li><p><code>&lt;body&gt;&lt;/body&gt;</code> :包含了你访问页面时所有显示在页面上的内容，包含文本、图片、视频、游戏、可播放音频轨道等等。</p>
</li>
</ol>
<h3 id="4-1HTML头部"><a href="#4-1HTML头部" class="headerlink" title="4.1HTML头部"></a>4.1HTML头部</h3><p>    HTML头部包含HTML <code>&lt;head&gt;</code> 元素的内容，与<code>&lt;body&gt;</code> 元素内容不同，页面在浏览器加载后它的内容不会显示，它的作用是保存页面的一些元数据。</p>
<h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>    采用<code>&lt;title&gt;</code> 元素为文档添加标题</p>
<ul>
<li><p><code>&lt;h1&gt;</code> (en-US)元素在页面加载完毕时显示在页面中，通常只出现一次，用来标记页面内容的标题（故事名称、新闻摘要等等）。</p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/title"><code>&lt;title&gt;</code></a> 元素是一项元数据，用于表示整个 HTML 文档的标题（而不是文档内容）。</p>
</li>
</ul>
<h4 id="元数据-lt-meta-gt-元素"><a href="#元数据-lt-meta-gt-元素" class="headerlink" title="元数据&lt;meta&gt; 元素"></a>元数据<code>&lt;meta&gt;</code> 元素</h4><p>    元数据就是描述数据的数据</p>
<h5 id="指定文档中的字符编码"><a href="#指定文档中的字符编码" class="headerlink" title="指定文档中的字符编码"></a>指定文档中的字符编码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt; </span><br></pre></td></tr></table></figure>

<p>    用改元素指定了文档中被允许使用的字符集，<code>&lt;utf-8&gt;</code> 是一个通用的字符集，包含了任何人类语言中的大部分的字符，意味着web页面可以显示任意的语言。</p>
<blockquote>
<p> 一些浏览器（比如 Chrome）会自动修正错误的编码，所以根据你所使用的浏览器不同，你或许不会看到这个问题。无论如何，你仍然应该为你的页面手动设置编码为 <code>utf-8</code>，来避免在其他浏览器中可能出现的问题。</p>
</blockquote>
<h5 id="添加作者和描述"><a href="#添加作者和描述" class="headerlink" title="添加作者和描述"></a>添加作者和描述</h5><p>    <code>&lt;meta&gt;</code> 元素包含了<code>name</code> 和 <code>content</code> 属性</p>
<ul>
<li><code>name</code> 指定了 meta 元素的类型；说明该元素包含了什么类型的信息。</li>
<li><code>content</code> 指定了实际的元数据内容。</li>
</ul>
<h5 id="自定义图标"><a href="#自定义图标" class="headerlink" title="自定义图标"></a>自定义图标</h5><p>    可在元数据中添加对自定义图标的引用，最常见的用例为favicon</p>
<p>    页面添加网页图标的方式有：</p>
<ol>
<li><p>将其保存在与网站的索引页面相同的目录中，以 <code>.ico</code> 格式保存（大多数浏览器支持更通用的格式，如 <code>.gif</code> 或 <code>.png</code>）</p>
</li>
<li><p>将以下行添加到 HTML 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/head"><code>&lt;head&gt;</code></a> 块中以引用它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-2-应用CSS和JS"><a href="#4-2-应用CSS和JS" class="headerlink" title="4.2 应用CSS和JS"></a>4.2 应用CSS和JS</h3><p>    采用<code>&lt;link&gt;</code> 元素和 <code>&lt;script&gt;</code> 元素</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link"><code>&lt;link&gt;</code></a> 元素经常位于文档的头部，它有 2 个属性，<code>rel=&quot;stylesheet&quot;</code> 表明这是文档的样式表，而 <code>href</code> 包含了样式表文件的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;my-css-file.css&quot; /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script"><code>&lt;script&gt;</code></a> 元素也应当放在文档的头部，并包含 <code>src</code> 属性来指向需要加载的 JavaScript 文件路径，同时最好加上 <code>defer</code> 以告诉浏览器在解析完成 HTML 后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;my-js-file.js&quot; defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p> <code>&lt;script&gt;</code> 元素看起来像一个空元素，但它并不是，因此需要一个结束标记。还可以选择将脚本放入 <code>&lt;script&gt;</code> 元素中，而不是指向外部脚本文件。</p>
</blockquote>
<h3 id="4-3-设置主语言"><a href="#4-3-设置主语言" class="headerlink" title="4.3 设置主语言"></a>4.3 设置主语言</h3><p>    通过添加lang属性到HTML标签</p>
<h3 id="文档的基本组成部分"><a href="#文档的基本组成部分" class="headerlink" title="文档的基本组成部分"></a>文档的基本组成部分</h3><ul>
<li><p>页眉</p>
<ul>
<li>通常横跨于整个页面顶部有一个大标题 和/或 一个标志。这是网站的主要一般信息，通常存在于所有网页。</li>
</ul>
</li>
<li><p>导航栏</p>
<ul>
<li>指向网站各个主要区段的超链接。通常用菜单按钮、链接或标签页表示。类似于标题栏，导航栏通常应在所有网页之间保持一致。</li>
</ul>
</li>
<li><p>主内容</p>
<ul>
<li>中心的大部分区域是当前网页大多数的独有内容，例如视频、文章、地图、新闻等。这些内容是网站的一部分，且会因页面而异。</li>
</ul>
</li>
<li><p>侧边栏</p>
<ul>
<li>一些外围信息、链接、引用、广告等。通常与主内容相关（例如一个新闻页面上，侧边栏可能包含作者信息或相关文章链接），还可能存在其他的重复元素，如辅助导航系统。</li>
</ul>
</li>
<li><p>页脚</p>
<ul>
<li>横跨页面底部的狭长区域。和标题一样，页脚是放置公共信息（比如版权声明或联系方式）的，一般使用较小字体，且通常为次要内容。</li>
</ul>
</li>
</ul>
<h4 id="HTML构建内容"><a href="#HTML构建内容" class="headerlink" title="HTML构建内容"></a>HTML构建内容</h4><p>为了实现语义化标记，HTML 提供了明确这些区段的专用标签，如：</p>
<ul>
<li><p><code>&lt;header&gt;</code>：页眉。</p>
<blockquote>
<p>简介形式的内容。如果它是 <code>&lt;body&gt;</code>的子元素，那么就是网站的全局页眉。如果它是<code>&lt;article&gt;</code>或<code>&lt;section&gt;</code>的子元素，那么它是这些部分特有的页眉</p>
</blockquote>
</li>
<li><p><code>&lt;nav&gt;</code>：导航栏。</p>
</li>
<li><p><code>&lt;main&gt;</code>：主内容。主内容中还可以有各种子内容区段，可用<code>&lt;article&gt;</code> 和<code>&lt;div&gt;</code>等元素表示。</p>
<blockquote>
<p>存放每个页面独有的内容。每个页面上只能用一次 <code>&lt;main&gt;</code>，且直接位于<code>&lt;body&gt;</code>中。最好不要把它嵌套进其他元素。</p>
</blockquote>
</li>
<li><p><code>&lt;aside&gt;</code>：侧边栏，经常嵌套在<code>&lt;main&gt;</code> 中。</p>
</li>
<li><p><code>&lt;footer&gt;</code>：页脚。</p>
</li>
<li><p><code>&lt;section&gt;</code> 与 <code>&lt;article&gt;</code> 类似，但 <code>&lt;section&gt;</code> 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以 标题作为开头；也可以把一篇 <code>&lt;article&gt;</code> 分成若干部分并分别置于不同的 <code>&lt;section&gt;</code> 中，也可以把一个区段 <code>&lt;section&gt;</code> 分成若干部分并分别置于不同的 <code>&lt;article&gt;</code> 中，取决于上下文。</p>
</li>
<li><p><code>&lt;span&gt;</code>是一个内联的（inline）无语义元素，最好只用于无法找到更好的语义元素来包含内容时，或者不想增加特定的含义时。</p>
</li>
<li><p><code>&lt;div&gt;</code>是一个块级无语义元素，应仅用于找不到更好的块级元素时，或者不想增加特定的意义时。</p>
</li>
</ul>
<h2 id="5-特殊字符"><a href="#5-特殊字符" class="headerlink" title="5. 特殊字符"></a>5. 特殊字符</h2><p>    在HTML中，特殊字符需要防止被浏览器视为代码。</p>
<p>    使用字符引用——表示字符的特殊编码，每个字符引用以符号&amp;开始，以分号；结束。</p>
<blockquote>
<p>只要HTML的字符编码设置为UTF-8，就不需要为任何其他字符使用实体引用</p>
</blockquote>
<table>
<thead>
<tr>
<th>原义字符</th>
<th>等价字符引用</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td>&gt;</td>
<td><code>&amp;gt;</code></td>
</tr>
<tr>
<td>“</td>
<td><code>&amp;quot;</code></td>
</tr>
<tr>
<td>‘</td>
<td><code>&amp;apos;</code></td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
</tr>
</tbody></table>
<h2 id="6-HTML注释"><a href="#6-HTML注释" class="headerlink" title="6. HTML注释"></a>6. HTML注释</h2><p>    HTML拥有在代码中写注释的机制，为了将HTML中的一段内容置为注释，需要用<code>&lt;!--</code>和<code>--&gt;</code>包裹起来</p>
<h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7. 超链接"></a>7. 超链接</h2><p id="superlink">超链接</p>使文档连接到任何其他文档（或其他资源），可链接到文档的指定部分。

<p>几乎任何网络内容都可以转换为链接，点击超链接将使网络浏览器转到另一个网址（URL）</p>
<blockquote>
<p>URL 可以指向 HTML 文件、文本文件、图像、文本文档、视频和音频文件以及可以在网络上保存的任何其他内容。如果浏览器不知道如何显示或处理文件，它会询问你是否要打开文件（需要选择合适的本地应用来打开或处理文件）或下载文件（以后处理它）。</p>
</blockquote>
<h3 id="7-1-链接解析"><a href="#7-1-链接解析" class="headerlink" title="7.1 链接解析"></a>7.1 链接解析</h3><p>通过将文本或其他内容包裹在 <code>&lt;a&gt;</code> 元素内，并给其一个包含网址的 <code>href</code> 属性(也称为超文本引用或目标)来创建一个基本链接。</p>
<h4 id="块级链接"><a href="#块级链接" class="headerlink" title="块级链接"></a>块级链接</h4><p>将其包裹在锚点元素 <code>&lt;a&gt;</code> 内</p>
<h4 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h4><p>使用 <code>&lt;a&gt;</code> 元素来包裹要引用图片的 <code>&lt;img&gt;</code> 元素</p>
<h4 id="title属性添加支持信息"><a href="#title属性添加支持信息" class="headerlink" title="title属性添加支持信息"></a>title属性添加支持信息</h4><p>链接中可添加<code>title</code>属性，包含关于链接的补充信息，当鼠标指针悬停在链接上时，标题将作为提示信息出现</p>
<h3 id="7-2-统一资源定位符（URL）与路径（path）"><a href="#7-2-统一资源定位符（URL）与路径（path）" class="headerlink" title="7.2 统一资源定位符（URL）与路径（path）"></a>7.2 统一资源定位符（URL）与路径（path）</h3><p>统一资源定位符（Uniform Resource Locator，URL）是一个定义了在网络上的位置的一个文本字符串</p>
<p>URL使用路径查找文件</p>
<ul>
<li><p>指向当前目录，只需要指定想要链接的文件名</p>
</li>
<li><p>指向子目录，需要采用层级向下的方式链接文件名</p>
</li>
<li><p>指向上级目录，需要采用../的方式逐级查找</p>
</li>
</ul>
<blockquote>
<p>如果需要，你可以将这些功能的多个实例组合成复杂的 URL。例如 <code>../../../complex/path/to/my/file.html</code>。</p>
</blockquote>
<h4 id="绝对URL和相对URL"><a href="#绝对URL和相对URL" class="headerlink" title="绝对URL和相对URL"></a>绝对URL和相对URL</h4><p>绝对URL（绝对链接）</p>
<ul>
<li><p>指向由其Web上的绝对位置定义的位置，包括协议和域名。</p>
</li>
<li><p>不管绝对URL在哪使用，它总指向确定的相同位置。</p>
</li>
</ul>
<p>相对URL（相对链接）</p>
<ul>
<li><p>指向与链接的文件相关的位置</p>
</li>
<li><p>一个相对的URL将指向不同的位置，这取决于引用文件的实际位置</p>
</li>
</ul>
<h4 id="文档片段"><a href="#文档片段" class="headerlink" title="文档片段"></a>文档片段</h4><p>超链接除了可以链接到文档外，也可以连接到HTML文档的特定部分（也被称为文档片段）</p>
<p>必须给要链接到的元素分配一个id属性</p>
<h4 id="使用download属性下载链接"><a href="#使用download属性下载链接" class="headerlink" title="使用download属性下载链接"></a>使用download属性下载链接</h4><p>当链接到要下载的资源而不是在浏览器中打开时，使用<code>download</code>属性来提供一个默认保存文件名。</p>
<h3 id="7-3-电子邮件链接"><a href="#7-3-电子邮件链接" class="headerlink" title="7.3 电子邮件链接"></a>7.3 电子邮件链接</h3><p>当点击一个链接或按钮时，可能会开启新的邮件的发送而不是链接到一个资源或页面，需要采用<code>&lt;a&gt;</code>元素和<code>mailto:</code>URL协议实现</p>
<p>其最基本和最常用的使用形式为一个指明收件人电子邮件地址的 <code>mailto:</code> 链接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;mailto:nowhere@mozilla.org&quot;&gt;向 nowhere 发邮件&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>电子邮件的地址是可选的</li>
</ul>
<h4 id="指定详细信息"><a href="#指定详细信息" class="headerlink" title="指定详细信息"></a>指定详细信息</h4><p>除了电子邮件地址，你还可以提供其他信息。事实上，任何标准的邮件头字段可以被添加到你提供的 <code>mailto</code> URL 中。其中最常用的是主题（subject）、抄送（cc）和主体（body）（这不是一个真正的标头字段，但允许你为新邮件指定一个简短的内容消息）。每个字段及其值被指定为查询项。</p>
<p>下面是一个包含 cc、bcc、主题和主体的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a</span><br><span class="line">  href=&quot;mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&amp;bcc=name3@rapidtables.com&amp;subject=The%20subject%20of%20the%20email&amp;body=The%20body%20of%20the%20email&quot;&gt;</span><br><span class="line">  发送含有 cc、bcc、主题和主体的邮件</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>每个字段的值必须使用 URL 编码，即使用百分号转义的非打印字符（不可见字符如制表符、换行符、分页符）和空格。同时注意使用问号（<code>?</code>）来分隔主 URL 与参数值，以及使用 &amp; 符来分隔 <code>mailto:</code> URL 中的各个参数。这是标准的 URL 查询标记方法。</p>
</blockquote>
<h2 id="8-引用"><a href="#8-引用" class="headerlink" title="8. 引用"></a>8. 引用</h2><p>HTML存在用于标记引用的特性</p>
<h3 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h3><p>如果一个块级内容（一个段落、多个段落、一个列表等）从其他地方被引用，你应该把它用 [<code>&lt;blockquote&gt;</code>]元素包裹起来表示，并且在 <code>cite</code>属性里用 URL 来指向引用的资源。</p>
<h3 id="行内引用"><a href="#行内引用" class="headerlink" title="行内引用"></a>行内引用</h3><p>除了使用 <code>&lt;q&gt;</code> 元素以外，行内元素用同样的方式工作</p>
<h3 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h3><p><code>cite</code> 属性需要配合JS、CSS，否则浏览器无法显示cite的内容</p>
<p>引文默认的字体样式为斜体</p>
]]></content>
      <categories>
        <category>Frontend Notes</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>//</url>
    <content><![CDATA[<p>111</p>
]]></content>
  </entry>
  <entry>
    <title>Algorithm——String</title>
    <url>/algorithm%E2%80%94%E2%80%94string/</url>
    <content><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="1-反转字符串"><a href="#1-反转字符串" class="headerlink" title="1. 反转字符串"></a>1. 反转字符串</h2><p>344.编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</p>
<span id="more"></span>

<p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p>
<div class="tabs" id="test344"><ul class="nav-tabs"><li class="tab active"><a href="#test344-1">示例1</a></li><li class="tab"><a href="#test344-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test344-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test344-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用双指针的方法，因为字符串也是一种数组，所以元素在内存中是连续分布，这就决定了反转链表和反转字符串方式上还是有所差异的。</p>
<p>对于字符串，我们定义两个指针（也可以说是索引下标），一个从字符串前面，一个从字符串后面，两个指针同时向中间移动，并交换元素。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> r = s.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> l = <span class="number">0</span> ;l &lt;= r ;l++ )&#123;</span><br><span class="line">        [s[l],s[r]] = [s[r],s[l]] </span><br><span class="line">        r--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-反转字符串II"><a href="#2-反转字符串II" class="headerlink" title="2. 反转字符串II"></a>2. 反转字符串II</h2><p>541.给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。</p>
<p>如果剩余字符少于 k 个，则将剩余字符全部反转。<br>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样</p>
<div class="tabs" id="test541"><ul class="nav-tabs"><li class="tab active"><a href="#test541-1">示例1</a></li><li class="tab"><a href="#test541-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test541-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test541-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, k = 2</span><br><span class="line">输出：&quot;bacd&quot;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>其实在遍历字符串的过程中，只要让 i += (2 * k)，i 每次移动 2 * k 就可以了，然后判断是否需要有反转的区间。</p>
<p>因为要找的也就是每2 * k 区间的起点，这样写，程序会高效很多。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">        <span class="title function_">reverse</span>(arr, i, <span class="title class_">Math</span>.<span class="title function_">min</span>(i + k, n) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reverse</span> = (<span class="params">arr, left, right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = temp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-替换空格"><a href="#3-替换空格" class="headerlink" title="3. 替换空格"></a>3. 替换空格</h2><p>剑指05. 请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>
<div class="tabs" id="test-05"><ul class="nav-tabs"><li class="tab active"><a href="#test-05-1">示例1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test-05-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>将字符串转换为数组，然后统计其中的空格数量。<br>根据空格数量和原有字符串有效字符长度，计算出刚好存放替换后的字符长度的数组。<br>创建两个指针，一个指数组末尾，一个指字符串有效位的末尾，实现原地修改。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    s = s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> oldLen = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> spaceCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">&#x27; &#x27;</span>) spaceCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="property">length</span> += spaceCount * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = oldLen - <span class="number">1</span>, j = s.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] !== <span class="string">&#x27; &#x27;</span>) s[j] = s[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            s[j - <span class="number">2</span>] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">            s[j - <span class="number">1</span>] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            s[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            j -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-翻转字符串里的单词"><a href="#4-翻转字符串里的单词" class="headerlink" title="4. 翻转字符串里的单词"></a>4. 翻转字符串里的单词</h2><p>给你一个字符串 s ，请你反转字符串中 单词 的顺序。</p>
<p>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。</p>
<p>返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。</p>
<p>注意：输入字符串 s中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>
<div class="tabs" id="test151"><ul class="nav-tabs"><li class="tab active"><a href="#test151-1">示例1</a></li><li class="tab"><a href="#test151-2">示例2</a></li><li class="tab"><a href="#test151-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test151-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test151-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：反转后的字符串中不能存在前导空格和尾随空格。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test151-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]输入：s = &quot;a good   example&quot;</span><br><span class="line">输出：&quot;example good a&quot;</span><br><span class="line">解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ul>
<li>移除多余空格</li>
<li>将整个字符串反转</li>
<li>将每个单词反转</li>
</ul>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">   <span class="comment">// 字符串转数组</span></span><br><span class="line">   <span class="keyword">const</span> strArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(s);</span><br><span class="line">   <span class="comment">// 移除多余空格</span></span><br><span class="line">   <span class="title function_">removeExtraSpaces</span>(strArr);</span><br><span class="line">   <span class="comment">// 翻转</span></span><br><span class="line">   <span class="title function_">reverse</span>(strArr, <span class="number">0</span>, strArr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= strArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span> (strArr[i] === <span class="string">&#x27; &#x27;</span> || i === strArr.<span class="property">length</span>) &#123;</span><br><span class="line">       <span class="comment">// 翻转单词</span></span><br><span class="line">       <span class="title function_">reverse</span>(strArr, start, i - <span class="number">1</span>);</span><br><span class="line">       start = i + <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> strArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除多余空格</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeExtraSpaces</span>(<span class="params">strArr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> fastIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(fastIndex &lt; strArr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">// 移除开始位置和重复的空格</span></span><br><span class="line">    <span class="keyword">if</span> (strArr[fastIndex] === <span class="string">&#x27; &#x27;</span> &amp;&amp; (fastIndex === <span class="number">0</span> || strArr[fastIndex - <span class="number">1</span>] === <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line">      fastIndex++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      strArr[slowIndex++] = strArr[fastIndex++];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除末尾空格</span></span><br><span class="line">  strArr.<span class="property">length</span> = strArr[slowIndex - <span class="number">1</span>] === <span class="string">&#x27; &#x27;</span> ? slowIndex - <span class="number">1</span> : slowIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转从 start 到 end 的字符</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">strArr, start, end</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> left = start;</span><br><span class="line">  <span class="keyword">let</span> right = end;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// 交换</span></span><br><span class="line">    [strArr[left], strArr[right]] = [strArr[right], strArr[left]];</span><br><span class="line">    left++;</span><br><span class="line">    right--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="regexp">/\s+/</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-左旋转字符串"><a href="#5-左旋转字符串" class="headerlink" title="5. 左旋转字符串"></a>5. 左旋转字符串</h2><p>剑指58. 字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p>
<div class="tabs" id="test-58"><ul class="nav-tabs"><li class="tab active"><a href="#test-58-1">示例1</a></li><li class="tab"><a href="#test-58-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test-58-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出: &quot;cdefgab&quot;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test-58-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;lrloseumgh&quot;, k = 6</span><br><span class="line">输出: &quot;umghlrlose&quot;</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><ol>
<li>反转区间为前n的子串</li>
<li>反转区间为n到末尾的子串</li>
<li>反转整个字符串</li>
</ol>
<p>最后就可以达到左旋n的目的，而不用定义新的字符串，完全在本串上操作。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseLeftWords = <span class="keyword">function</span> (<span class="params">s, n</span>) &#123;</span><br><span class="line">    <span class="comment">/** Utils */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reverseWords</span>(<span class="params">strArr, start, end</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            temp = strArr[start];</span><br><span class="line">            strArr[start] = strArr[end];</span><br><span class="line">            strArr[end] = temp;</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Main code */</span></span><br><span class="line">    <span class="keyword">let</span> strArr = s.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> length = strArr.<span class="property">length</span>;</span><br><span class="line">    <span class="title function_">reverseWords</span>(strArr, <span class="number">0</span>, length - <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">reverseWords</span>(strArr, <span class="number">0</span>, length - n - <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">reverseWords</span>(strArr, length - n, length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> strArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reverseLeftWords</span> = (<span class="params">s, k</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> len = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> n = k % len;</span><br><span class="line">    <span class="keyword">const</span> double = <span class="string">`<span class="subst">$&#123;s&#125;</span><span class="subst">$&#123;s&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> double.<span class="title function_">slice</span>(n, n + len);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="6-实现strStr"><a href="#6-实现strStr" class="headerlink" title="6. 实现strStr()"></a>6. 实现strStr()</h2><ol start="28">
<li>找出字符串中第一个匹配项的下标，给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回  <code>-1</code> 。<div class="tabs" id="test28"><ul class="nav-tabs"><li class="tab active"><a href="#test28-1">示例1</a></li><li class="tab"><a href="#test28-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test28-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test28-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure></div></div></div></li>
</ol>
<h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p><strong>KMP有什么用</strong></p>
<p>KMP主要应用在字符串匹配上。</p>
<p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p>
<p>所以如何记录已经匹配的文本内容，是KMP的重点，也是next数组肩负的重任。</p>
<p><strong>前缀表</strong></p>
<p>next数组就是一个前缀表（prefix table）。</p>
<p><strong>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。</strong></p>
<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>
<p><strong>记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</strong></p>
<p><strong>最长公共前后缀？</strong></p>
<p>文章中字符串的<strong>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串</strong>。</p>
<p><strong>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</strong>。</p>
<p><strong>因为前缀表要求的就是相同前后缀的长度。</strong></p>
<p>而最长公共前后缀里面的“公共”，更像是说前缀和后缀公共的长度。这其实并不是前缀表所需要的。</p>
<p>所以字符串a的最长相等前后缀为0。 字符串aa的最长相等前后缀为1。 字符串aaa的最长相等前后缀为2。 等等…..</p>
<p>前缀表具有告诉我们当前位置匹配失败，跳到之前已经匹配过的地方的能力</p>
<p><strong>如何计算前缀表</strong></p>
<p>接下来就要说一说怎么计算前缀表。</p>
<p>如图：</p>
<p><img src="https://code-thinking.cdn.bcebos.com/pics/KMP%E7%B2%BE%E8%AE%B25.png" alt="KMP精讲5"></p>
<p>长度为前1个字符的子串<code>a</code>，最长相同前后缀的长度为0。（注意字符串的<strong>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串</strong>；<strong>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</strong>。）</p>
<p><img src="https://code-thinking.cdn.bcebos.com/pics/KMP%E7%B2%BE%E8%AE%B26.png" alt="KMP精讲6"></p>
<p>长度为前2个字符的子串<code>aa</code>，最长相同前后缀的长度为1。</p>
<p><img src="https://code-thinking.cdn.bcebos.com/pics/KMP%E7%B2%BE%E8%AE%B27.png" alt="KMP精讲7"></p>
<p>长度为前3个字符的子串<code>aab</code>，最长相同前后缀的长度为0。</p>
<p>以此类推： 长度为前4个字符的子串<code>aaba</code>，最长相同前后缀的长度为1。 长度为前5个字符的子串<code>aabaa</code>，最长相同前后缀的长度为2。 长度为前6个字符的子串<code>aabaaf</code>，最长相同前后缀的长度为0。</p>
<p>那么把求得的最长相同前后缀的长度就是对应前缀表的元素，如图： <img src="https://code-thinking.cdn.bcebos.com/pics/KMP%E7%B2%BE%E8%AE%B28.png" alt="KMP精讲8"></p>
<p>可以看出模式串与前缀表对应位置的数字表示的就是：<strong>下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</strong></p>
<p><strong>前缀表与next数组</strong></p>
<p>next数组就可以是前缀表，但是很多实现都是把前缀表统一减一（右移一位，初始位置为-1）之后作为next数组。</p>
<p>为什么这么做呢，其实<strong>这并不涉及到KMP的原理，而是具体实现，next数组既可以就是前缀表，也可以是前缀表统一减一（右移一位，初始位置为-1）。</strong></p>
<p><strong>使用next数组来匹配</strong></p>
<p><strong>以下我们以前缀表统一减一之后的next数组来做演示</strong>。</p>
<p>有了next数组，就可以根据next数组来 匹配文本串s，和模式串t了。</p>
<p>注意next数组是新前缀表（旧前缀表统一减一了）。</p>
<p><img src="https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B24.gif" alt="KMP精讲4"></p>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">haystack</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">needle</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> strStr = <span class="keyword">function</span>(<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = haystack.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> m = needle.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span>(m === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> next = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; needle[i] !== needle[j])&#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(needle[i] === needle[j])&#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        next[i] = j</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搞懂上面的，下面的也就懂了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="comment">// 如果当前i 和 j不一致，就回退到上一个相等的位置的下一个看看是否匹配</span></span><br><span class="line">        <span class="comment">// 会不断回退，0为回退到边界，当回退到0意味着要重新从头开始匹配</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; haystack[i] !== needle[j])&#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( haystack[i] === needle[j])&#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当j 和 m的长度相等时，就说明存在</span></span><br><span class="line">        <span class="keyword">if</span>(j === m)&#123;</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="7-重复的子字符串"><a href="#7-重复的子字符串" class="headerlink" title="7.重复的子字符串"></a>7.重复的子字符串</h2><p>459.给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p>
<div class="tabs" id="test459"><ul class="nav-tabs"><li class="tab active"><a href="#test459-1">示例1</a></li><li class="tab"><a href="#test459-2">示例2</a></li><li class="tab"><a href="#test459-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test459-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abab&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;ab&quot; 重复两次构成。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test459-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;aba&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test459-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcabcabc&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可由子串 &quot;abc&quot; 重复四次构成。 (或子串 &quot;abcabc&quot; 重复两次构成。)</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>为了避免这种无用的环绕，可以创建一个新的字符串str,它等于原来的字符串S再加上S自身，这样其实就包含了所有移动的字符串。</p>
<p>比如字符串：S = acd，那么str = S + S = acdacd</p>
<p>acd移动的可能：dac、cda。其实都包含在了str中了。就像一个滑动窗口</p>
<p>一开始acd (acd) ，移动一次ac(dac)d,移动两次a(cda)cd。循环结束</p>
<p>所以可以直接判断str中去除首尾元素之后，是否包含自身元素。如果包含。则表明存在重复子串。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> repeatedSubstringPattern = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = (s + s).<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="title function_">indexOf</span>(s) != -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Algorithm</tag>
        <tag>String</tag>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm——Hash table</title>
    <url>/algorithm%E2%80%94%E2%80%94hash-table/</url>
    <content><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="1-理论基础"><a href="#1-理论基础" class="headerlink" title="1. 理论基础"></a>1. 理论基础</h2><p>哈希表其实就是数组。</p>
<p>一般，哈希表用来快速判断一个元素是否出现在集合里</p>
<span id="more"></span>

<p>哈希函数</p>
<p><img src="/images/2023-06-10-21-13-00-image.png"></p>
<p>哈希碰撞就是某些元素映射到同一索引下标的位置上</p>
<ul>
<li>解决哈希碰撞的方法<ul>
<li><p>拉链法</p>
<ul>
<li>选择合适的哈希表的大小，既不会因为数组空值而浪费大量内存，也不hi因为链表太长二在查找上浪费太多时间</li>
</ul>
</li>
<li><p>线性探测法</p>
<ul>
<li>保证tableSize大于dataSize</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>常见的三种哈希结构</p>
<ul>
<li><p>数组</p>
</li>
<li><p>set（集合）</p>
</li>
<li><p>map（映射）</p>
</li>
</ul>
<p>在C++中，set 和 map 分别提供以下三种数据结构，其底层实现以及优劣如下表所示：</p>
<table>
<thead>
<tr>
<th>集合</th>
<th>底层实现</th>
<th>是否有序</th>
<th>数值是否可以重复</th>
<th>能否更改数值</th>
<th>查询效率</th>
<th>增删效率</th>
</tr>
</thead>
<tbody><tr>
<td>std::set</td>
<td>红黑树</td>
<td>有序</td>
<td>否</td>
<td>否</td>
<td>O(log n)</td>
<td>O(log n)</td>
</tr>
<tr>
<td>std::multiset</td>
<td>红黑树</td>
<td>有序</td>
<td>是</td>
<td>否</td>
<td>O(logn)</td>
<td>O(logn)</td>
</tr>
<tr>
<td>std::unordered_set</td>
<td>哈希表</td>
<td>无序</td>
<td>否</td>
<td>否</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。</p>
<table>
<thead>
<tr>
<th>映射</th>
<th>底层实现</th>
<th>是否有序</th>
<th>数值是否可以重复</th>
<th>能否更改数值</th>
<th>查询效率</th>
<th>增删效率</th>
</tr>
</thead>
<tbody><tr>
<td>std::map</td>
<td>红黑树</td>
<td>key有序</td>
<td>key不可重复</td>
<td>key不可修改</td>
<td>O(logn)</td>
<td>O(logn)</td>
</tr>
<tr>
<td>std::multimap</td>
<td>红黑树</td>
<td>key有序</td>
<td>key可重复</td>
<td>key不可修改</td>
<td>O(log n)</td>
<td>O(log n)</td>
</tr>
<tr>
<td>std::unordered_map</td>
<td>哈希表</td>
<td>key无序</td>
<td>key不可重复</td>
<td>key不可修改</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<p>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p>
<p>那么再来看一下map ，在map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p>
<h2 id="2-有效的字母异位词"><a href="#2-有效的字母异位词" class="headerlink" title="2. 有效的字母异位词"></a>2. 有效的字母异位词</h2><p>242.给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。<br>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。</p>
<div class="tabs" id="test242"><ul class="nav-tabs"><li class="tab active"><a href="#test242-1">示例1</a></li><li class="tab"><a href="#test242-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test242-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test242-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>数组其实就是一个简单哈希表</strong>，而且这道题目中字符串只有小写字符，那么就可以定义一个数组，来记录字符串s里字符出现的次数。</p>
<p>需要定义一个多大的数组呢，定一个数组叫做record，大小为26 就可以了，初始化为0，因为字符a到字符z的ASCII也是26个连续的数值。</p>
<p>定义一个数组叫做record用来上记录字符串s里字符出现的次数。</p>
<p>需要把字符映射到数组也就是哈希表的索引下标上，<strong>因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。</strong></p>
<p>再遍历 字符串s的时候，<strong>只需要将 s[i] - ‘a’ 所在的元素做+1 操作即可，并不需要记住字符a的ASCII，只要求出一个相对数值就可以了。</strong> 这样就将字符串s中字符出现的次数，统计出来了。</p>
<p>那看一下如何检查字符串t中是否出现了这些字符，同样在遍历字符串t的时候，对t中出现的字符映射哈希表索引上的数值再做-1的操作。</p>
<p>那么最后检查一下，<strong>record数组如果有的元素不为零0，说明字符串s和t一定是谁多了字符或者谁少了字符，return false。</strong></p>
<p>最后如果record数组所有元素都为零0，说明字符串s和t是字母异位词，return true。</p>
<p>时间复杂度为O(n)，空间上因为定义是的一个常量大小的辅助数组，所以空间复杂度为O(1)。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> !== t.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> resSet = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> base = <span class="string">&quot;a&quot;</span>.<span class="title function_">charCodeAt</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">        resSet[i.<span class="title function_">charCodeAt</span>() - base]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!resSet[i.<span class="title function_">charCodeAt</span>() - base]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        resSet[i.<span class="title function_">charCodeAt</span>() - base]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49.字母异位词分组"></a>49.字母异位词分组</h4><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p>
<p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p>
<div class="tabs" id="test49"><ul class="nav-tabs"><li class="tab active"><a href="#test49-1">示例1</a></li><li class="tab"><a href="#test49-2">示例2</a></li><li class="tab"><a href="#test49-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test49-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test49-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test49-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>两个字符串互为字母异位词，当且仅当两个字符串包含的字母相同。同一组字母异位词中的字符串具备相同点，可以使用相同点作为一组字母异位词的标志，使用哈希表存储每一组字母异位词，哈希表的键为一组字母异位词的标志，哈希表的值为一组字母异位词列表。</p>
<p>遍历每个字符串，对于每个字符串，得到该字符串所在的一组字母异位词的标志，将当前字符串加入该组字母异位词的列表中。遍历全部字符串之后，哈希表中的每个键值对即为一组字母异位词。</p>
<p><strong>排序</strong><br>由于互为字母异位词的两个字符串包含的字母相同，因此对两个字符串分别进行排序之后得到的字符串一定是相同的，故可以将排序之后的字符串作为哈希表的键。</p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="keyword">let</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(str);</span><br><span class="line">        array.<span class="title function_">sort</span>();</span><br><span class="line">        <span class="keyword">let</span> key = array.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">let</span> list = map.<span class="title function_">get</span>(key) ? map.<span class="title function_">get</span>(key) : <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">        list.<span class="title function_">push</span>(str);</span><br><span class="line">        map.<span class="title function_">set</span>(key, list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(map.<span class="title function_">values</span>());</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438.找到字符串中所有字母异位词"></a>438.找到字符串中所有字母异位词</h4><p>给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>
<p>异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。</p>
<div class="tabs" id="test438"><ul class="nav-tabs"><li class="tab active"><a href="#test438-1">示例1</a></li><li class="tab"><a href="#test438-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test438-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;</span><br><span class="line">输出: [0,6]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的异位词。</span><br><span class="line">起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的异位词。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test438-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abab&quot;, p = &quot;ab&quot;</span><br><span class="line">输出: [0,1,2]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class="line">起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class="line">起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>在字符串 s 寻找字符串 p 的异位词。因为字符串 p 的异位词的长度一定与字符串 p 的长度相同，所以我们可以在字符串 s 中构造一个长度为与字符串 p 的长度相同的滑动窗口，并在滑动中维护窗口中每种字母的数量；当窗口中每种字母的数量与字符串 p 中每种字母的数量相同时，则说明当前窗口为字符串 p 的异位词。</p>
<p>在算法的实现中，使用数组来存储字符串 p 和滑动窗口中每种字母的数量。</p>
<p>当字符串 s 的长度小于字符串 p 的长度时，字符串 s 中一定不存在字符串 p 的异位词。但是因为字符串 s 中无法构造长度与字符串 p 的长度相同的窗口，所以这种情况需要单独处理。 </p>
<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">p</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findAnagrams = <span class="keyword">function</span>(<span class="params">s, p</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sLen = s.<span class="property">length</span>, pLen = p.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sLen &lt; pLen) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ans = [];</span><br><span class="line">    <span class="keyword">const</span> sCount = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> pCount = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pLen;i++) &#123;</span><br><span class="line">        ++sCount[s[i].<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()];</span><br><span class="line">        ++pCount[p[i].<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sCount.<span class="title function_">toString</span>() === pCount.<span class="title function_">toString</span>()) &#123;</span><br><span class="line">        ans.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sLen - pLen; ++i) &#123;</span><br><span class="line">        --sCount[s[i].<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()];</span><br><span class="line">        ++sCount[s[i + pLen].<span class="title function_">charCodeAt</span>() - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sCount.<span class="title function_">toString</span>() === pCount.<span class="title function_">toString</span>()) &#123;</span><br><span class="line">            ans.<span class="title function_">push</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-两个数组的交集"><a href="#3-两个数组的交集" class="headerlink" title="3. 两个数组的交集"></a>3. 两个数组的交集</h2><p>349.给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>
<div class="tabs" id="test349"><ul class="nav-tabs"><li class="tab active"><a href="#test349-1">示例1</a></li><li class="tab"><a href="#test349-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test349-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test349-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[9,4]</span><br><span class="line">解释：[4,9] 也是可通过的</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><ul>
<li><p>遍历数组 nums1，对于其中的每个元素，遍历数组 nums2 判断该元素是否在数组 nums2 中，如果存在，则将该元素添加到返回值。</p>
</li>
<li><p>假设数组 nums1 和 nums2 的长度分别是 m 和 n，则遍历数组 nums1 需要 O(m) 的时间，判断 nums1 中的每个元素是否在数组 nums2 中需要 O(n) 的时间，因此总时间复杂度是 O(mn)。</p>
</li>
<li><p>如果使用哈希集合存储元素，则可以在 O(1) 的时间内判断一个元素是否在集合中，从而降低时间复杂度。</p>
</li>
<li><p>首先使用两个集合分别存储两个数组中的元素，然后遍历较小的集合，判断其中的每个元素是否在另一个集合中，如果元素也在另一个集合中，则将该元素添加到返回值。该方法的时间复杂度可以降低到 O(m+n)。</p>
</li>
</ul>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据数组大小交换操作的数组</span></span><br><span class="line">    <span class="keyword">if</span>(nums1.<span class="property">length</span> &lt; nums2.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> _ = nums1;</span><br><span class="line">        nums1 = nums2;</span><br><span class="line">        nums2 = _;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> nums1Set = <span class="keyword">new</span> <span class="title class_">Set</span>(nums1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resSet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="comment">// for(const n of nums2) &#123;</span></span><br><span class="line">    <span class="comment">//     nums1Set.has(n) &amp;&amp; resSet.add(n);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 循环 比 迭代器快</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = nums2.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1Set.<span class="title function_">has</span>(nums2[i]))&#123;</span><br><span class="line">           resSet.<span class="title function_">add</span>(nums2[i]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(resSet);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h3><h4 id="350-两个数组的交集II"><a href="#350-两个数组的交集II" class="headerlink" title="350. 两个数组的交集II"></a>350. 两个数组的交集II</h4><p>给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p>
<div class="tabs" id="test350"><ul class="nav-tabs"><li class="tab active"><a href="#test350-1">示例1</a></li><li class="tab"><a href="#test350-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test350-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">输出：[2,2]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test350-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">输出：[4,9]</span><br></pre></td></tr></table></figure></div></div></div>

<h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><p>寻找两数组是否有相同项，并且提示中说可以不要求交集的顺序。</p>
<p>可以先行将数组排序，方便我们查找，然后正式流程如下：</p>
<ol>
<li>创建一个指针 i 指向 nums1 数组首位，指针 j 指向 nums2 数组首位。</li>
<li>创建一个临时栈，用于存放结果集。</li>
<li>开始比较指针 i 和指针 j 的值大小，若两个值不等，则数字小的指针，往右移一位。</li>
<li>若指针 i 和指针 j 的值相等，则将交集压入栈。</li>
<li>若 nums 或 nums2 有一方遍历结束，代表另一方的剩余值，都是唯一存在，且不会与之产生交集的。</li>
</ol>
<h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">function</span> (<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    nums1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    nums2.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> l = <span class="number">0</span>, r = <span class="number">0</span>, ans = [];</span><br><span class="line">    <span class="keyword">while</span> (l &lt; nums1.<span class="property">length</span> &amp;&amp; r &lt; nums2.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[l] === nums2[r]) &#123;</span><br><span class="line">            ans.<span class="title function_">push</span>(nums1[l]);</span><br><span class="line">            l++;</span><br><span class="line">            r++;</span><br><span class="line">        &#125; <span class="keyword">else</span> nums1[l] &lt; nums2[r] ? l++ : r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-快乐数"><a href="#4-快乐数" class="headerlink" title="4. 快乐数"></a>4. 快乐数</h2><ol start="202">
<li>编写一个算法来判断一个数 n 是不是快乐数。</li>
</ol>
<p>「快乐数」 定义为：</p>
<ul>
<li><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</p>
</li>
<li><p>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果这个过程 结果为 1，那么这个数就是快乐数</p>
</li>
<li><p>如果 n 是 快乐数 就返回 true ；不是，则返回 false 。</p>
</li>
</ul>
<div class="tabs" id="test202"><ul class="nav-tabs"><li class="tab active"><a href="#test202-1">示例1</a></li><li class="tab"><a href="#test202-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test202-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">1^2 + 9^2 = 82</span><br><span class="line">8^2 + 2^2 = 68</span><br><span class="line">6^2 + 8^2 = 100</span><br><span class="line">1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test202-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><ul>
<li><p>题目中说了会 <strong>无限循环</strong>，那么也就是说<strong>求和的过程中，sum会重复出现，这对解题很重要！</strong></p>
</li>
<li><p><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法了。</strong></p>
</li>
<li><p>使用哈希法，来判断这个sum是否重复出现，如果重复了就是return false， 否则一直找到sum为1为止。</p>
</li>
<li><p>判断sum是否重复出现就可以使用set。</p>
</li>
</ul>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> getSum = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            sum += (n % <span class="number">10</span>) ** <span class="number">2</span>;</span><br><span class="line">            n =  <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();   <span class="comment">// Set() 里的数是惟一的</span></span><br><span class="line">    <span class="comment">// 如果在循环中某个值重复出现，说明此时陷入死循环，也就说明这个值不是快乐数</span></span><br><span class="line">    <span class="keyword">while</span> (n !== <span class="number">1</span> &amp;&amp; !set.<span class="title function_">has</span>(n)) &#123;</span><br><span class="line">        set.<span class="title function_">add</span>(n);</span><br><span class="line">        n = <span class="title function_">getSum</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n === <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-两数之和"><a href="#5-两数之和" class="headerlink" title="5. 两数之和"></a>5. 两数之和</h2><ol>
<li>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</li>
</ol>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><a href="#test1-1">示例1</a></li><li class="tab"><a href="#test1-2">示例2</a></li><li class="tab"><a href="#test1-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test1-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test1-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>明确两点：</p>
<ul>
<li><strong>map用来做什么</strong></li>
<li><strong>map中key和value分别表示什么</strong></li>
</ul>
<p>map目的用来存放我们访问过的元素，因为遍历数组的时候，需要记录我们之前遍历过哪些元素和对应的下标，这样才能找到与当前元素相匹配的（也就是相加等于target）</p>
<p>这道题 我们需要 给出一个元素，判断这个元素是否出现过，如果出现过，返回这个元素的下标。</p>
<p>那么判断元素是否出现，这个元素就要作为key，所以数组中的元素作为key，有key对应的就是value，value用来存下标。</p>
<p>所以 map中的存储结构为 {key：数据元素，value：数组元素对应的下标}。</p>
<p>在遍历数组的时候，只需要向map去查询是否有和目前遍历元素匹配的数值，如果有，就找到的匹配对，如果没有，就把目前遍历的元素放进map中，因为map存放的就是我们访问过的元素。</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;  <span class="comment">// 遍历当前元素，并在map中寻找是否有匹配的key</span></span><br><span class="line">    <span class="keyword">if</span> (hash[target - nums[i]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [hash[target - nums[i]],i ];</span><br><span class="line">    &#125;</span><br><span class="line">    hash[nums[i]] = i;   <span class="comment">// 如果没找到匹配对，就把访问过的元素和下标加入到map中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="6-四数相加II"><a href="#6-四数相加II" class="headerlink" title="6. 四数相加II"></a>6. 四数相加II</h2><p>454.给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：</p>
<ul>
<li><p>0 &lt;= i, j, k, l &lt; n</p>
</li>
<li><p>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</p>
</li>
</ul>
<div class="tabs" id="test454"><ul class="nav-tabs"><li class="tab active"><a href="#test454-1">示例1</a></li><li class="tab"><a href="#test454-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test454-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">两个元组如下：</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test454-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><ol>
<li>首先定义 一个unordered_map，key放a和b两数之和，value 放a和b两数之和出现的次数。</li>
<li>遍历大A和大B数组，统计两个数组元素之和，和出现的次数，放到map中。</li>
<li>定义int变量count，用来统计 a+b+c+d = 0 出现的次数。</li>
<li>在遍历大C和大D数组，找到如果 0-(c+d) 在map中出现过的话，就用count把map中key对应的value也就是出现次数统计出来。</li>
<li>最后返回统计值 count 就可以了</li>
</ol>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums3</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums4</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="keyword">function</span>(<span class="params">nums1, nums2, nums3, nums4</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> twoSumMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 统计nums1和nums2数组元素之和，和出现的次数，放到map中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> n1 <span class="keyword">of</span> nums1) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> n2 <span class="keyword">of</span> nums2) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = n1 + n2;</span><br><span class="line">            twoSumMap.<span class="title function_">set</span>(sum, (twoSumMap.<span class="title function_">get</span>(sum) || <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到如果 0-(c+d) 在map中出现过的话，就把map中key对应的value也就是出现次数统计出来</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> n3 <span class="keyword">of</span> nums3) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> n4 <span class="keyword">of</span> nums4) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = n3 + n4;</span><br><span class="line">            count += (twoSumMap.<span class="title function_">get</span>(<span class="number">0</span> - sum) || <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="7-赎金信"><a href="#7-赎金信" class="headerlink" title="7. 赎金信"></a>7. 赎金信</h2><p>383.给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。</p>
<p>如果可以，返回 true ；否则返回 false 。</p>
<p>magazine 中的每个字符只能在 ransomNote 中使用一次。</p>
<div class="tabs" id="test383"><ul class="nav-tabs"><li class="tab active"><a href="#test383-1">示例1</a></li><li class="tab"><a href="#test383-2">示例2</a></li><li class="tab"><a href="#test383-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test383-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test383-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test383-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>题目只有小写字母，那可以采用空间换取时间的哈希策略</p>
<p>用一个长度为26的数组还记录magazine里字母出现的次数。</p>
<p>然后再用ransomNote去验证这个数组是否包含了ransomNote所需要的所有字母。</p>
<p><strong>数组在哈希法中的应用</strong></p>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">ransomNote</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">magazine</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span>(<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> strArr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>), </span><br><span class="line">        base = <span class="string">&quot;a&quot;</span>.<span class="title function_">charCodeAt</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> s <span class="keyword">of</span> magazine) &#123;  <span class="comment">// 记录 magazine里各个字符出现次数</span></span><br><span class="line">        strArr[s.<span class="title function_">charCodeAt</span>() - base]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> s <span class="keyword">of</span> ransomNote) &#123; <span class="comment">// 对应的字符个数做--操作</span></span><br><span class="line">        <span class="keyword">const</span> index = s.<span class="title function_">charCodeAt</span>() - base;</span><br><span class="line">        <span class="keyword">if</span>(!strArr[index]) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 如果没记录过直接返回false</span></span><br><span class="line">        strArr[index]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="8-三数之和"><a href="#8-三数之和" class="headerlink" title="8. 三数之和"></a>8. 三数之和</h2><p>15.给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p>
<p>你返回所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<div class="tabs" id="test15"><ul class="nav-tabs"><li class="tab active"><a href="#test15-1">示例1</a></li><li class="tab"><a href="#test15-2">示例2</a></li><li class="tab"><a href="#test15-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test15-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test15-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test15-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>采用双指针法</p>
<p>首先将数组排序，然后有一层for循环，i从下标0的地方开始，同时定一个下标left 定义在i+1的位置上，定义下标right 在数组结尾的位置上。</p>
<p>依然还是在数组中找到 abc 使得a + b +c =0，我们这里相当于 a = nums[i]，b = nums[left]，c = nums[right]。</p>
<p>接下来如何移动left 和right呢， 如果nums[i] + nums[left] + nums[right] &gt; 0 就说明 此时三数之和大了，因为数组是排序后了，所以right下标就应该向左移动，这样才能让三数之和小一些。</p>
<p>如果 nums[i] + nums[left] + nums[right] &lt; 0 说明 此时 三数之和小了，left 就向右移动，才能让三数之和大一些，直到left与right相遇为止。</p>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans = [];</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums == <span class="literal">null</span> || len &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>; <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">let</span> L = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> R = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(L &lt; R)&#123;</span><br><span class="line">            <span class="keyword">const</span> sum = nums[i] + nums[L] + nums[R];</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">                ans.<span class="title function_">push</span>([nums[i],nums[L],nums[R]]);</span><br><span class="line">                <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[L] == nums[L+<span class="number">1</span>]) L++; <span class="comment">// 去重</span></span><br><span class="line">                <span class="keyword">while</span> (L&lt;R &amp;&amp; nums[R] == nums[R-<span class="number">1</span>]) R--; <span class="comment">// 去重</span></span><br><span class="line">                L++;</span><br><span class="line">                R--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) L++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) R--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="9-四数之和"><a href="#9-四数之和" class="headerlink" title="9. 四数之和"></a>9. 四数之和</h2><p>18.给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<ul>
<li><p>0 &lt;= a, b, c, d &lt; n</p>
</li>
<li><p>a、b、c 和 d 互不相同</p>
</li>
<li><p>nums[a] + nums[b] + nums[c] + nums[d] == target<br>你可以按 任意顺序 返回答案 。</p>
</li>
</ul>
<div class="tabs" id="test18"><ul class="nav-tabs"><li class="tab active"><a href="#test18-1">示例1</a></li><li class="tab"><a href="#test18-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test18-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test18-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,2,2,2,2], target = 8</span><br><span class="line">输出：[[2,2,2,2]]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h3><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">4</span>) <span class="keyword">return</span> [];</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 去重i</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 去重j</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] === nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">let</span> l = j + <span class="number">1</span>, r = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[i] + nums[j] + nums[l] + nums[r];</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; target) &#123; l++; <span class="keyword">continue</span>&#125;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; target) &#123; r--; <span class="keyword">continue</span>&#125;</span><br><span class="line">                res.<span class="title function_">push</span>([nums[i], nums[j], nums[l], nums[r]]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对nums[left]和nums[right]去重</span></span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[l] === nums[++l]);</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[r] === nums[--r]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Hash table</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Algorithm</tag>
        <tag>Hash table</tag>
      </tags>
  </entry>
  <entry>
    <title>人间告白</title>
    <url>/%E4%BA%BA%E9%97%B4%E5%91%8A%E7%99%BD/</url>
    <content><![CDATA[<h1 id="人间告白"><a href="#人间告白" class="headerlink" title="人间告白"></a>人间告白</h1><blockquote>
<p><img src="/images/t6_YueWen_31617666.png"></p>
</blockquote>
<p>金鱼酱的故事感人真实，让人相信这世界上爱情还是很美好的。</p>
<p>前半段的故事总让人有一种想哭的感觉，离别真的是难以阻止的，死亡是不可逆的。</p>
<p>希望自己有勇气去面对生活的一切，在活着的时候不留遗憾，相信自已可以 <strong>克服一切苦难</strong>。</p>
<span id="more"></span>

<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>我对爱的理解是：遇见那个对的人，然后爱他就像爱生命。</li>
<li>爱人本来就是做加法的事，这个付出的过程你是幸福和享受的，你应该是更富足的那个人。</li>
<li>人在最脆弱的时候，要的不过就是爱人在身边的陪伴。</li>
<li>死亡只能把我们的肉体分开，但爱会让我们永远活在对方的心里。</li>
<li>爱不是逃避地去赴死，爱应该是一种赴汤蹈火后的理智觉醒。</li>
<li>你说过会在终点等我，我相信你说的每句话，所以你不可以骗我，一定要好好地等着我来。</li>
<li>青春之所以那么难忘，就是因为敢为爱痴狂。</li>
<li>有人爱娇艳欲滴的红玫瑰，就有人爱清新淡雅的小雏菊。总有那么一个人会穿越人潮发现你的好，闻到你的香，欣赏你的美，他把爱、温暖、自信、快乐一一带到你身边。他让你知道，原来不是你的问题，是那个喜欢红玫瑰的人不懂得欣赏小雏菊的美罢了，那你又何必否定自己呢？</li>
<li>我对生活的热爱都在旅行的脚步里，和爱的人牵手旅行，是希望能坚持一辈子的事情。</li>
<li><strong>时间是个神奇的东西，你不能去埋怨或评断它的对与错，因为终有一天，你会发现它就是生活的一剂良药。时间改变了很多，改变了我们曾经的稚嫩、草率和自以为是，然后留给我们的是任凭岁月蹉跎都不变的初心。</strong></li>
<li>爱情里“不忘初心”四个字从来不是指的某一个人，而是两个人都能不忘初心，这样才能更好地在一起。</li>
<li>每一段旅行都是一个故事，有的人把故事变成了诗，永远地珍藏在心里。</li>
<li>作为父母，如果在时间和能力的允许下，我觉得都应该选择自己带孩子。</li>
<li>父母一场子女一场，每种身份都应该亲自去感受，才知其中的幸福和不易，才会更加懂得珍惜和感恩。</li>
<li><strong>我一直坚信人是可以绝境逢生的，只要自己不放弃就能再次站起来。</strong></li>
<li>如果你能意识到这份失去是什么滋味，或许你还会感悟到并不是每个人、每段感情都有重新开始的机会。很多人、很多事一旦失去就意味着永远，所以不留遗憾才不枉此生。遗憾多了眼泪也就多了，眼前这最年轻的今天不是用来哭泣的，该好好地珍惜生命、珍惜感情，也该深刻地反省，学会仰望生命，学会敬畏死亡。</li>
<li>学会感恩是一件像播种一样的事情，播下爱的种子定会在将来的某一天开出温暖的花。</li>
<li><strong>常怀感恩之心，所有的遭遇就不会那么坏，总有光能照进黑暗的夹缝中。</strong></li>
<li>人只有明白了什么是爱，才会更加懂得珍惜爱，也会想要把爱分享给别人。</li>
<li>命中注定我们相爱，我们不该独自找寻生命的意义，而应陪伴彼此一起找寻。</li>
<li>一个人来到这世上，并不是只为爱情而来的，任何人的人生都不应该是为了某一段爱而存在的。我爱你，山河海阔万物是你；因为爱你，所以我会更加敬畏和珍惜我的生命。</li>
<li>我们总说人都是孤独的。因为心中有爱，有牵绊，所以很难做到真正的随心而活。</li>
<li>要好好珍惜你现在拥有的人生。这个世上不仅仅有爱情，在你来不及看到的地方还有亲情和友情不离不弃地陪伴着你。</li>
<li>别怨天尤人，也别愤世嫉俗，怀着感恩的心，生活的另一扇窗也许就在你第二天醒来后的阳光下，等着你去开启呢。</li>
<li><strong>愿你常怀感恩之心，在幸福时好好珍惜，在不幸时也别埋怨。品尝人生苦难并不是什么坏事，所有的经历和遭遇都是命中注定，但生活的未知和惊喜却是我们自己亲手创造的。相信我，当你有了绝境逢生的力量时，便是你步入全新生活轨道的开始。</strong></li>
</ul>
]]></content>
      <categories>
        <category>读书摘要</category>
        <category>文学</category>
      </categories>
      <tags>
        <tag>爱情</tag>
        <tag>苦难</tag>
        <tag>治愈</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm——Stack and Queue</title>
    <url>/algorithm%E2%80%94%E2%80%94stack-and-queue/</url>
    <content><![CDATA[<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="1-理论基础"><a href="#1-理论基础" class="headerlink" title="1. 理论基础"></a>1. 理论基础</h2><p><strong>栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（也就是说我们可以控制使用哪种容器来实现栈的功能）。</strong></p>
<span id="more"></span>

<h2 id="2-用栈实现队列"><a href="#2-用栈实现队列" class="headerlink" title="2. 用栈实现队列"></a>2. 用栈实现队列</h2><p>232.请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p>
<p>实现 MyQueue 类：</p>
<ul>
<li><p>void push(int x) 将元素 x 推到队列的末尾</p>
</li>
<li><p>int pop() 从队列的开头移除并返回元素</p>
</li>
<li><p>int peek() 返回队列开头的元素</p>
</li>
<li><p>boolean empty() 如果队列为空，返回 true ；否则，返回 false</p>
</li>
<li><p>说明：</p>
</li>
</ul>
<p>你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</p>
<div class="tabs" id="test232"><ul class="nav-tabs"><li class="tab active"><a href="#test232-1">示例1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test232-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(1); // queue is: [1]</span><br><span class="line">myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); // return 1</span><br><span class="line">myQueue.pop(); // return 1, queue is [2]</span><br><span class="line">myQueue.empty(); // return false</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用栈来模式队列的行为，如果仅仅用一个栈，是一定不行的，所以需要两个栈<strong>一个输入栈，一个输出栈</strong>，这里要注意输入栈和输出栈的关系。</p>
<p>下面动画模拟以下队列的执行过程：</p>
<p>执行语句：<br>queue.push(1);<br>queue.push(2);<br>queue.pop(); <strong>注意此时的输出栈的操作</strong><br>queue.push(3);<br>queue.push(4);<br>queue.pop();<br>queue.pop();<strong>注意此时的输出栈的操作</strong><br>queue.pop();<br>queue.empty();</p>
<p><img src="/algorithm%E2%80%94%E2%80%94stack-and-queue/dell\Documents\img\232.stacktoq.gif" alt="232.stacktoq.gif">在push数据的时候，只要数据放进输入栈就好，<strong>但在pop的时候，操作就复杂一些，输出栈如果为空，就把进栈数据全部导入进来（注意是全部导入）</strong>，再从出栈弹出数据，如果输出栈不为空，则直接从出栈弹出数据就可以了。</p>
<p>最后如何判断队列为空呢？<strong>如果进栈和出栈都为空的话，说明模拟的队列为空了。</strong></p>
<p>在代码实现的时候，会发现pop() 和 peek()两个函数功能类似，代码实现上也是类似的，可以思考一下如何把代码抽象一下</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用两个数组的栈方法（push, pop） 实现队列</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Initialize your data structure here.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyQueue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">stackIn</span> = [];</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">stackOut</span> = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Push element x to the back of queue. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="title function_">push</span>(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> size = <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="property">length</span>;</span><br><span class="line">   <span class="keyword">if</span>(size) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">pop</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="property">length</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="title function_">pop</span>());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">pop</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Get the front element.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> x = <span class="variable language_">this</span>.<span class="title function_">pop</span>();</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">push</span>(x);</span><br><span class="line">   <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns whether the queue is empty.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="property">length</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="property">length</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-用队列实现栈"><a href="#3-用队列实现栈" class="headerlink" title="3. 用队列实现栈"></a>3. 用队列实现栈</h2><p>225.请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p>
<p>实现 MyStack 类：</p>
<ul>
<li><p>void push(int x) 将元素 x 压入栈顶。</p>
</li>
<li><p>int pop() 移除并返回栈顶元素。</p>
</li>
<li><p>int top() 返回栈顶元素。</p>
</li>
<li><p>boolean empty() 如果栈是空的，返回 true ；否则，返回 false</p>
</li>
</ul>
<p>注意：</p>
<p>你只能使用队列的基本操作 —— 也就是 push to back、peek/pop from front、size 和 is empty 这些操作。<br>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</p>
<div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><a href="#test-1">示例225</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9     </span><br><span class="line">输出: 4       </span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4输入：</span><br><span class="line">[&quot;MyStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 2, 2, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyStack myStack = new MyStack();</span><br><span class="line">myStack.push(1);</span><br><span class="line">myStack.push(2);</span><br><span class="line">myStack.top(); // 返回 2</span><br><span class="line">myStack.pop(); // 返回 2</span><br><span class="line">myStack.empty(); // 返回 False</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>根据题意，要用两个队列来实现栈，首先我们知道，队列是先进先出，栈是后进先出。</p>
<p>知道了以上要点，我们两个队列的用处也就一目了然了。</p>
<p>一个队列为主队列，一个为辅助队列，当入栈操作时，我们先将主队列内容导入辅助队列，然后将入栈元素放入主队列队头位置，再将辅助队列内容，依次添加进主队列即可。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用两个队列实现</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyStack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue2</span> = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Push element x onto stack. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">push</span>(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 减少两个队列交换的次数， 只有当queue1为空时，交换两个队列</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        [<span class="variable language_">this</span>.<span class="property">queue1</span>, <span class="variable language_">this</span>.<span class="property">queue2</span>] = [<span class="variable language_">this</span>.<span class="property">queue2</span>, <span class="variable language_">this</span>.<span class="property">queue1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue2</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">shift</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the top element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="variable language_">this</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">push</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns whether the stack is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">queue2</span>.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用一个队列实现</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize your data structure here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyStack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Push element x onto stack. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(size-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the top element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> x = <span class="variable language_">this</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns whether the stack is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-有效的括号"><a href="#4-有效的括号" class="headerlink" title="4. 有效的括号"></a>4. 有效的括号</h2><p>20.给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li><p>左括号必须用相同类型的右括号闭合。</p>
</li>
<li><p>左括号必须以正确的顺序闭合。</p>
</li>
<li><p>每个右括号都有一个对应的相同类型的左括号</p>
</li>
</ol>
<div class="tabs" id="test20"><ul class="nav-tabs"><li class="tab active"><a href="#test20-1">示例1</a></li><li class="tab"><a href="#test20-2">示例2</a></li><li class="tab"><a href="#test20-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test20-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test20-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test20-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MyQueue&quot;, &quot;push&quot;, &quot;push&quot;, &quot;peek&quot;, &quot;pop&quot;, &quot;empty&quot;]</span><br><span class="line">[[], [1], [2], [], [], []]</span><br><span class="line">输出：</span><br><span class="line">[null, null, null, 1, 1, false]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MyQueue myQueue = new MyQueue();</span><br><span class="line">myQueue.push(1); // queue is: [1]</span><br><span class="line">myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)</span><br><span class="line">myQueue.peek(); // return 1</span><br><span class="line">myQueue.pop(); // return 1, queue is [2]</span><br><span class="line">myQueue.empty(); // return false</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>先来分析一下 这里有三种不匹配的情况，</p>
<ol>
<li><p>第一种情况，字符串里左方向的括号多余了 ，所以不匹配。 <img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2020080915505387.png" alt="括号匹配1"></p>
</li>
<li><p>第二种情况，括号没有多余，但是 括号的类型没有匹配上。 <img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200809155107397.png" alt="括号匹配2"></p>
</li>
<li><p>第三种情况，字符串里右方向的括号多余了，所以不匹配。 <img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200809155115779.png" alt="括号匹配3"></p>
</li>
</ol>
<p>我们的代码只要覆盖了这三种不匹配的情况，就不会出问题，可以看出 动手之前分析好题目的重要性。</p>
<p>动画如下：</p>
<p><img src="https://code-thinking.cdn.bcebos.com/gifs/20.%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.gif" alt="20.有效括号"></p>
<p>第一种情况：已经遍历完了字符串，但是栈不为空，说明有相应的左括号没有右括号来匹配，所以return false</p>
<p>第二种情况：遍历字符串匹配的过程中，发现栈里没有要匹配的字符。所以return false</p>
<p>第三种情况：遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号return false</p>
<p>那么什么时候说明左括号和右括号全都匹配了呢，就是字符串遍历完之后，栈是空的，就说明全都匹配了。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [], </span><br><span class="line">        map = &#123;</span><br><span class="line">            <span class="string">&quot;(&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&#123;&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;[&quot;</span>:<span class="string">&quot;]&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> x <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x <span class="keyword">in</span> map) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(x);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span>(map[stack.<span class="title function_">pop</span>()] !== x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-删除字符串中的所有相邻重复项"><a href="#5-删除字符串中的所有相邻重复项" class="headerlink" title="5. 删除字符串中的所有相邻重复项"></a>5. 删除字符串中的所有相邻重复项</h2><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p>
<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>
<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>
<div class="tabs" id="test1047"><ul class="nav-tabs"><li class="tab active"><a href="#test1047-1">示例1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test1047-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>本题也是用栈来解决的经典题目。</p>
<p>那么栈里应该放的是什么元素呢？</p>
<p>我们在删除相邻重复项的时候，其实就是要知道当前遍历的这个元素，我们在前一位是不是遍历过一样数值的元素，那么如何记录前面遍历过的元素呢？</p>
<p>所以就是用栈来存放，那么栈的目的，就是存放遍历过的元素，当遍历当前的这个元素的时候，去栈里看一下我们是不是遍历过相同数值的相邻元素。</p>
<p>然后再去做对应的消除操作。 如动画所示：</p>
<p><img src="https://code-thinking.cdn.bcebos.com/gifs/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.gif" alt="1047.删除字符串中的所有相邻重复项"></p>
<p>从栈中弹出剩余元素，此时是字符串ac，因为从栈里弹出的元素是倒序的，所以再对字符串进行反转一下，就得到了最终的结果。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i === result[result.<span class="property">length</span>-<span class="number">1</span>])&#123;</span><br><span class="line">            result.<span class="title function_">pop</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="6-逆波兰表达式求值"><a href="#6-逆波兰表达式求值" class="headerlink" title="6. 逆波兰表达式求值"></a>6. 逆波兰表达式求值</h2><ol start="150">
<li>给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。</li>
</ol>
<p>请你计算该表达式。返回一个表示表达式值的整数。</p>
<p>注意：</p>
<ul>
<li><p>有效的算符为 ‘+’、’-‘、’*’ 和 ‘/‘ 。</p>
</li>
<li><p>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</p>
</li>
<li><p>两个整数之间的除法总是 向零截断 。</p>
</li>
<li><p>表达式中不含除零运算。</p>
</li>
<li><p>输入是一个根据逆波兰表示法表示的算术表达式。</p>
</li>
<li><p>答案及所有中间计算结果可以用 32 位 整数表示。</p>
</li>
</ul>
<div class="tabs" id="test150"><ul class="nav-tabs"><li class="tab active"><a href="#test150-1">示例1</a></li><li class="tab"><a href="#test150-2">示例2</a></li><li class="tab"><a href="#test150-3">示例3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test150-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test150-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]</span><br><span class="line">输出：6</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test150-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br><span class="line">输出：22</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：</span><br><span class="line">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / -132)) + 17) + 5</span><br><span class="line">= ((10 * 0) + 17) + 5</span><br><span class="line">= (0 + 17) + 5</span><br><span class="line">= 17 + 5</span><br><span class="line">= 22</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>逆波兰表达式：是一种后缀表达式，所谓后缀就是指运算符写在后面。</p>
<p>平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。</p>
<p>该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。</p>
<p>逆波兰表达式主要有以下两个优点：</p>
<ul>
<li><p>去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。</p>
</li>
<li><p>适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。</p>
</li>
</ul>
<p>本题中每一个子表达式要得出一个结果，然后拿这个结果再进行运算，那么<strong>这岂不就是一个相邻字符串消除的过程，和删除字符串中的所有相邻重复项 中的对对碰游戏是不是就非常像了。</strong></p>
<p>如动画所示： <img src="https://code-thinking.cdn.bcebos.com/gifs/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.gif" alt="150.逆波兰表达式求值"></p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">tokens</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> evalRPN = <span class="keyword">function</span> (<span class="params">tokens</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> token <span class="keyword">of</span> tokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(token))) &#123; <span class="comment">// 非数字</span></span><br><span class="line">            <span class="keyword">const</span> n2 = stack.<span class="title function_">pop</span>(); <span class="comment">// 出栈两个数字</span></span><br><span class="line">            <span class="keyword">const</span> n1 = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">switch</span> (token) &#123; <span class="comment">// 判断运算符类型，算出新数入栈</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 + n2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 - n2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 * n2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                    stack.<span class="title function_">push</span>(n1 / n2 | <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 数字</span></span><br><span class="line">            stack.<span class="title function_">push</span>(<span class="title class_">Number</span>(token));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack[<span class="number">0</span>]; <span class="comment">// 因没有遇到运算符而待在栈中的结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="7-滑动窗口最大值"><a href="#7-滑动窗口最大值" class="headerlink" title="7. 滑动窗口最大值"></a>7. 滑动窗口最大值</h2><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>
<p>返回 滑动窗口中的最大值 。</p>
<div class="tabs" id="test239"><ul class="nav-tabs"><li class="tab active"><a href="#test239-1">示例1</a></li><li class="tab"><a href="#test239-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test239-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test239-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1], k = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>维护单调递减队列，当进入滑动窗口的元素大于等于队尾的元素时 不断从队尾出队，直到进入滑动窗口的元素小于队尾的元素，才可以入队，以保证单调递减的性质，当队头元素已经在滑动窗口外了，移除对头元素，当i大于等于k-1的时候，单调递减队头就是滑动窗口的最大值</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> q = [];<span class="comment">//单递减的双端队列</span></span><br><span class="line">    <span class="keyword">const</span> ans = [];<span class="comment">//最后的返回结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;<span class="comment">//循环nums</span></span><br><span class="line">        <span class="comment">//当进入滑动窗口的元素大于等于队尾的元素时 不断从队尾出队，</span></span><br><span class="line">        <span class="comment">//直到进入滑动窗口的元素小于队尾的元素，以保证单调递减的性质</span></span><br><span class="line">        <span class="keyword">while</span> (q.<span class="property">length</span> &amp;&amp; nums[i] &gt;= nums[q[q.<span class="property">length</span> - <span class="number">1</span>]]) &#123;</span><br><span class="line">            q.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="title function_">push</span>(i);<span class="comment">//元素的索引入队</span></span><br><span class="line">        <span class="keyword">while</span> (q[<span class="number">0</span>] &lt;= i - k) &#123;<span class="comment">//队头元素已经在滑动窗口外了，移除对头元素</span></span><br><span class="line">            q.<span class="title function_">shift</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当i大于等于k-1的时候，单调递减队头就是滑动窗口的最大值</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) ans.<span class="title function_">push</span>(nums[q[<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="8-前-K-个高频元素"><a href="#8-前-K-个高频元素" class="headerlink" title="8. 前 K 个高频元素"></a>8. 前 K 个高频元素</h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>
<div class="tabs" id="test347"><ul class="nav-tabs"><li class="tab active"><a href="#test347-1">示例1</a></li><li class="tab"><a href="#test347-2">示例2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test347-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">输出: [1,2]</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="test347-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1], k = 1</span><br><span class="line">输出: [1]</span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>寻找前k个最大元素流程如图所示：（图中的频率只有三个，所以正好构成一个大小为3的小顶堆，如果频率更多一些，则用这个小顶堆进行扫描）</p>
<p><img src="https://code-thinking.cdn.bcebos.com/pics/347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.jpg" alt="347.前K个高频元素"></p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> topKFrequent = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(), arr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(nums)]</span><br><span class="line">    nums.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(num)) map.<span class="title function_">set</span>(num, map.<span class="title function_">get</span>(num)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span> map.<span class="title function_">set</span>(num, <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> map.<span class="title function_">get</span>(b) - map.<span class="title function_">get</span>(a)).<span class="title function_">slice</span>(<span class="number">0</span>, k);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> topKFrequent = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(), heap = [,]</span><br><span class="line">    nums.<span class="title function_">map</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(num)) map.<span class="title function_">set</span>(num, map.<span class="title function_">get</span>(num)+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span> map.<span class="title function_">set</span>(num, <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果元素数量小于等于 k</span></span><br><span class="line">    <span class="keyword">if</span>(map.<span class="property">size</span> &lt;= k) &#123;</span><br><span class="line">        <span class="keyword">return</span> [...map.<span class="title function_">keys</span>()]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果元素数量大于 k，遍历map，构建小顶堆</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; k) &#123;</span><br><span class="line">            <span class="comment">// 取前k个建堆, 插入堆</span></span><br><span class="line">            heap.<span class="title function_">push</span>(key)</span><br><span class="line">            <span class="comment">// 原地建立前 k 堆</span></span><br><span class="line">            <span class="keyword">if</span>(i === k-<span class="number">1</span>) <span class="title function_">buildHeap</span>(heap, map, k)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(map.<span class="title function_">get</span>(heap[<span class="number">1</span>]) &lt; value) &#123;</span><br><span class="line">            <span class="comment">// 替换并堆化</span></span><br><span class="line">            heap[<span class="number">1</span>] = key</span><br><span class="line">            <span class="comment">// 自上而下式堆化第一个元素</span></span><br><span class="line">            <span class="title function_">heapify</span>(heap, map, k, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 删除heap中第一个元素</span></span><br><span class="line">    heap.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">return</span> heap</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原地建堆，从后往前，自上而下式建小顶堆</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">buildHeap</span> = (<span class="params">heap, map, k</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(k === <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 从最后一个非叶子节点开始，自上而下式堆化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(k/<span class="number">2</span>); i&gt;=<span class="number">1</span> ; i--) &#123;</span><br><span class="line">        <span class="title function_">heapify</span>(heap, map, k, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆化</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">heapify</span> = (<span class="params">heap, map, k, i</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 自上而下式堆化</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> minIndex = i</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*i &lt;= k &amp;&amp; map.<span class="title function_">get</span>(heap[<span class="number">2</span>*i]) &lt; map.<span class="title function_">get</span>(heap[i])) &#123;</span><br><span class="line">            minIndex = <span class="number">2</span>*i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*i+<span class="number">1</span> &lt;= k &amp;&amp; map.<span class="title function_">get</span>(heap[<span class="number">2</span>*i+<span class="number">1</span>]) &lt; map.<span class="title function_">get</span>(heap[minIndex])) &#123;</span><br><span class="line">            minIndex = <span class="number">2</span>*i+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minIndex !== i) &#123;</span><br><span class="line">            <span class="title function_">swap</span>(heap, i, minIndex)</span><br><span class="line">            i = minIndex</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">swap</span> = (<span class="params">arr, i , j</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i]</span><br><span class="line">    arr[i] = arr[j]</span><br><span class="line">    arr[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Stack and Queue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Algorithm</tag>
        <tag>Stack and Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Exercise — a Tribute Page</title>
    <url>/project-exercise-%E2%80%94-a-tribute-page/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Build-a-Tribute-Page-——-Test"><a href="#Build-a-Tribute-Page-——-Test" class="headerlink" title="Build a Tribute Page —— Test"></a>Build a Tribute Page —— Test</h4><h5 id="Objective"><a href="#Objective" class="headerlink" title="Objective:"></a><strong>Objective:</strong></h5><blockquote>
<p>Build an app that is functionally similar to <a href="https://tribute-page.freecodecamp.rocks/">https://tribute-page.freecodecamp.rocks</a></p>
</blockquote>
<span id="more"></span>

<h5 id="User-Stories"><a href="#User-Stories" class="headerlink" title="User Stories:"></a><strong>User Stories:</strong></h5><ol>
<li>Your tribute page should have a <code>main</code> element with a corresponding <code>id</code> of <code>main</code>, which contains all other elements</li>
<li>You should see an element with an <code>id</code> of <code>title</code>, which contains a string (i.e. text), that describes the subject of the tribute page (e.g. “Dr. Norman Borlaug”)</li>
<li>You should see either a <code>figure</code> or a <code>div</code> element with an <code>id</code> of <code>img-div</code></li>
<li>Within the <code>#img-div</code> element, you should see an <code>img</code> element with a corresponding <code>id=&quot;image&quot;</code></li>
<li>Within the <code>#img-div</code> element, you should see an element with a corresponding <code>id=&quot;img-caption&quot;</code> that contains textual content describing the image shown in <code>#img-div</code></li>
<li>You should see an element with a corresponding <code>id=&quot;tribute-info&quot;</code>, which contains textual content describing the subject of the tribute page</li>
<li>You should see an <code>a</code> element with a corresponding <code>id=&quot;tribute-link&quot;</code>, which links to an outside site, that contains additional information about the subject of the tribute page. HINT: You must give your element an attribute of <code>target</code> and set it to <code>_blank</code> in order for your link to open in a new tab</li>
<li>Your <code>#image</code> should use <code>max-width</code> and <code>height</code> properties to resize responsively, relative to the width of its parent element, without exceeding its original size</li>
<li>Your <code>img</code> element should be centered within its parent element</li>
</ol>
<p>Fulfill the user stories and pass all the tests below to complete this project. Give it your own personal style. Happy Coding!</p>
<blockquote>
<p>Be sure to add <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code> in your HTML to link your stylesheet and apply your CSS</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mate</span> <span class="attr">chartset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>诺曼·博洛格博士<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>拯救了十亿人生命的男人<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;img-div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/testable-projects-fcc/images/tribute-page-main-image.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;img-caption&quot;</span>&gt;</span>Norman Borlaug博士（左三）在墨西哥培训生物学家 关于如何提高小麦产量——这是他终生反饥饿战争的一部分。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tribute-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>以下是博洛格博士一生的时间线：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>1914 - 出生于爱荷华州克雷斯科<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>1933年 - 离开他家的农场参加 明尼苏达大学，这要归功于大萧条时期的计划 “国家青年管理局”<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>1935年 - 不得不辍学，攒更多的钱。 在平民保护团工作，帮助饥饿 美国人。“我看到了食物如何改变他们，”他说。“这一切都离开了 我身上的伤疤。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>2005 - 声明“我们将不得不使世界翻一番 到2050年粮食供应。认为转基因作物是 我们满足需求的唯一方法，因为我们的耕地用完了。说 转基因作物本质上并不危险，因为“我们一直 长期以来对植物和动物进行基因改造。长 在我们称之为科学之前，人们正在选择最好的品种。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>2009年 - 去世，享年95岁。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>如果你有时间，你应该阅读更多关于这个不可思议的人 在他的<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;tribute-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>维基百科条目<span class="tag">&lt;/<span class="name">a</span>&gt;</span>上。<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#image</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>:<span class="number">100%</span>; </span><br><span class="line">  <span class="attribute">height</span>:auto;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改版"><a href="#修改版" class="headerlink" title="修改版"></a>修改版</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#image</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>:<span class="number">100%</span>; </span><br><span class="line">  <span class="attribute">height</span>:auto;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#img-div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#img-caption</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tribute-info</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">550px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#477ca7</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Project Exercise</category>
        <category>Primary Program</category>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>Project Exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>Front End Development Libraries(二)</title>
    <url>/front-end-development-libraries-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Front-End-Development-Libraries"><a href="#freeCodeCamp-—-Front-End-Development-Libraries" class="headerlink" title="freeCodeCamp —- Front End Development Libraries"></a>freeCodeCamp —- Front End Development Libraries</h1><hr>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h3 id="1-了解-script-和-document-ready-是如何工作的"><a href="#1-了解-script-和-document-ready-是如何工作的" class="headerlink" title="1. 了解 script 和 document.ready 是如何工作的"></a>1. 了解 script 和 document.ready 是如何工作的</h3><span id="more"></span>

<p>在使用 jQuery 之前，需要在 HTML 页面中添加一些东西。</p>
<p>首先，在页面顶部添加 <code>script</code> 标签， 记得在后面为它添加结束标签。</p>
<p>浏览器会运行 <code>script</code> 标签所有的 JavaScript 脚本包括 jQuery。</p>
<p>在 <code>script</code> 标签中添加代码 <code>$(document).ready(function() &#123;</code>。 然后在后面（仍在该 <code>script</code> 标签内）用 <code>&#125;);</code> 闭合它。</p>
<p>稍后将详细介绍 <code>functions</code>， 重要的是要知道，在浏览器加载页面后，你放入此 <code>function</code> 的代码将立即运行。</p>
<p>有一点很重要，如果没有 <code>document ready function</code>，代码将在 HTML 页面呈现之前运行，这可能会导致错误。</p>
<h3 id="2-使用-jQuery-选择器选择元素"><a href="#2-使用-jQuery-选择器选择元素" class="headerlink" title="2. 使用 jQuery 选择器选择元素"></a>2. 使用 jQuery 选择器选择元素</h3><p>现在我们有一个 <code>document ready</code> 函数。</p>
<p>首先，完成第一个 jQuery 语句。 所有的 jQuery 函数都以 <code>$</code> 开头，这个符号通常被称为美元符号（dollar sign operator）或 bling。</p>
<p>jQuery 通常选取并操作带有选择器（selector）的 HTML 标签。</p>
<p>比如，想要给 <code>button</code> 元素添加跳跃效果。 只需要在 document ready 函数内添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated bounce&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>请注意，我们已经在后台引入了 jQuery 库和 Animate.css 库，所以你可以在编辑器里直接使用它们。 你将使用 jQuery 将 Animate.css <code>bounce</code> class 应用于 <code>button</code> 元素。</p>
<h3 id="3-使用-jQuery-class-选择器选择元素"><a href="#3-使用-jQuery-class-选择器选择元素" class="headerlink" title="3. 使用 jQuery class 选择器选择元素"></a>3. 使用 jQuery class 选择器选择元素</h3><p>如何使所有的 <code>button</code> 标签都有弹跳的动画效果？ 用 <code>$(&quot;button&quot;)</code> 选取所有的 button 标签，并用 <code>.addClass(&quot;animated bounce&quot;);</code> 给其添加一些 CSS 属性。</p>
<p>jQuery 的 <code>.addClass()</code> 方法用来给标签添加类。</p>
<p>首先，使用 <code>$(&quot;.well&quot;)</code> 选取类为 <code>well</code> 的 <code>div</code> 标签。</p>
<p>值得注意的是，和 CSS 声明一样，在类名前需要添加 <code>.</code>。</p>
<p>然后，用 jQuery 的 <code>.addClass()</code> 方法添加 <code>animated</code> 和 <code>shake</code> class。</p>
<p>例如，在 <code>document ready function</code> 中添加下面的代码，使所有类为 <code>text-primary</code> 的标签抖动：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.text-primary&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated shake&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-jQuery-id-选择器选择元素"><a href="#4-使用-jQuery-id-选择器选择元素" class="headerlink" title="4. 使用 jQuery id 选择器选择元素"></a>4. 使用 jQuery id 选择器选择元素</h3><p>也能通过 id 属性选取标签。</p>
<p>首先，用 <code>$(&quot;#target3&quot;)</code> 选择器选取 id 为 <code>target3</code> 的 <code>button</code> 标签。</p>
<p>注意，和 CSS 声明一样，在 id 名前需要添加 <code>#</code>。</p>
<p>然后，用 jQuery 的 <code>.addClass()</code> 方法添加 <code>animated</code> 和 <code>fadeOut</code> 类。</p>
<p>下面的代码的效果是使 id 为 <code>target6</code> 的 <code>button</code> 标签淡出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#target6&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated fadeOut&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="5-删除-jQuery-函数"><a href="#5-删除-jQuery-函数" class="headerlink" title="5. 删除 jQuery 函数"></a>5. 删除 jQuery 函数</h3><p>这些动画开始看起来很酷，但是有时可能会让用户分心。</p>
<p>请删除 <code>document ready function</code> 内的三个 jQuery 函数，但保留 <code>document ready function</code> 本身。</p>
<h3 id="6-用多个-jQuery-选择器选择同一个元素"><a href="#6-用多个-jQuery-选择器选择同一个元素" class="headerlink" title="6. 用多个 jQuery 选择器选择同一个元素"></a>6. 用多个 jQuery 选择器选择同一个元素</h3><p>现在你知道了三种选取标签的方法：用元素选择器：<code>$(&quot;button&quot;)</code>、用类选择器：<code>$(&quot;.btn&quot;)</code> 以及用 id 选择器：<code>$(&quot;#target1&quot;)</code> 。</p>
<p>虽然可以在单个 <code>.addClass()</code> 内添加多个类，但是我们可以用<em>三种不同的方式</em>给一种标签添加类。</p>
<p>以三种不同的方式用 <code>.addClass()</code> 方法每次只给一种标签添加一个类：</p>
<p>给所有的 <code>button</code> 标签添加 <code>animated</code> 类。</p>
<p>给所有类为 <code>.btn</code> 的 button 标签添加 <code>shake</code> 类。</p>
<p>给所有 id 为 <code>#target1</code> 的 button 标签添加 <code>btn-primary</code> 类。</p>
<p><strong>注意：</strong>只针对一个元素并且一次只能添加一个 class。 总之，三个选择器最终将给 <code>#target1</code> 添加三个 class <code>shake</code>、<code>animated</code> 以及 <code>btn-primary</code>。</p>
<h3 id="7-使用-jQuery-从元素中移除-class"><a href="#7-使用-jQuery-从元素中移除-class" class="headerlink" title="7. 使用 jQuery 从元素中移除 class"></a>7. 使用 jQuery 从元素中移除 class</h3><p>和用 jQuery 的 <code>addClass()</code> 方法给标签添加类一样，也可以利用 jQuery 的 <code>removeClass()</code> 方法移除它们。</p>
<p>下面是为指定按钮执行上面的操作的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;btn-default&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>请把所有 <code>button</code> 元素的 <code>btn-default</code> class 移除。</p>
<h3 id="8-使用-jQuery-从元素中移除-class"><a href="#8-使用-jQuery-从元素中移除-class" class="headerlink" title="8. 使用 jQuery 从元素中移除 class"></a>8. 使用 jQuery 从元素中移除 class</h3><p>和用 jQuery 的 <code>addClass()</code> 方法给标签添加类一样，也可以利用 jQuery 的 <code>removeClass()</code> 方法移除它们。</p>
<p>下面是为指定按钮执行上面的操作的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;btn-default&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>请把所有 <code>button</code> 元素的 <code>btn-default</code> class 移除。</p>
<h3 id="9-使用-jQuery-更改元素的-CSS"><a href="#9-使用-jQuery-更改元素的-CSS" class="headerlink" title="9. 使用 jQuery 更改元素的 CSS"></a>9. 使用 jQuery 更改元素的 CSS</h3><p>也能用 jQuery 直接改变 HTML 标签的 CSS。</p>
<p>jQuery 有一个 <code>.css()</code> 方法，能改变标签的 CSS。</p>
<p>下面的代码效果是把颜色变蓝：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这与通常的 CSS 声明略有不同，因为这个 CSS 属性和它的值在英文引号里，并且它们用逗号而不是冒号间隔开。</p>
<p>删除 jQuery 选择器，留下一个空的 <code>document ready function</code> 。</p>
<p>选择 <code>target1</code>，并将其颜色更改为红色。</p>
<h3 id="10-使用-jQuery-禁用元素"><a href="#10-使用-jQuery-禁用元素" class="headerlink" title="10. 使用 jQuery 禁用元素"></a>10. 使用 jQuery 禁用元素</h3><p>还能用 jQuery 改变 HTML 标签的非 CSS 属性， 例如：禁用按钮。</p>
<p>当禁用按钮时，它将变成灰色并无法点击。</p>
<p>jQuery 有一个 <code>.prop()</code> 方法，可以用其调整标签的属性。</p>
<p>下面是禁用所有的按钮的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>仅禁用 <code>target1</code> 按钮。</p>
<h3 id="11-使用-jQuery-更改元素内部的文本"><a href="#11-使用-jQuery-更改元素内部的文本" class="headerlink" title="11.  使用 jQuery 更改元素内部的文本"></a>11.  使用 jQuery 更改元素内部的文本</h3><p>可以通过 jQuery 改变元素开始和结束标签之间的文本。 甚至改变 HTML 标签。</p>
<p>jQuery 有一个 <code>.html()</code> 函数，能用其在标签里添加 HTML 标签和文本， 函数提供的内容将完全替换之前标签的内容。</p>
<p>下面是重写并强调标题文本的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;h3&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;em&gt;jQuery Playground&lt;/em&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>jQuery 还有一个类似的函数 <code>.text()</code>，可以在不添加标签的前提下改变标签内的文本。 换句话说，这个函数不会评估传递给它的任何 HTML 标记，而是将其视为要替换现有内容的文本。</p>
<p>给 id 为 <code>target4</code> 的按钮的文本添加强调效果。</p>
<p>注意，<code>&lt;i&gt;</code> 标签虽然传统上用来强调文本，但此后常用作图标的标签。 <code>&lt;em&gt;</code> 标签作为强调标签现在已被广泛接受。 可以使用任意一种完成这个挑战。</p>
<h3 id="12-使用-jQuery-删除元素"><a href="#12-使用-jQuery-删除元素" class="headerlink" title="12. 使用 jQuery 删除元素"></a>12. 使用 jQuery 删除元素</h3><p>现在学习用 jQuery 从页面移除 HTML 标签。</p>
<p>jQuery has a function called <code>.remove()</code> that will remove an HTML element entirely.</p>
<p>用 <code>.remove()</code> 方法从页面移除 <code>#target4</code> 元素。</p>
<h3 id="13-使用-jQuery-的-appendTo-方法移动元素"><a href="#13-使用-jQuery-的-appendTo-方法移动元素" class="headerlink" title="13. 使用 jQuery 的 appendTo 方法移动元素"></a>13. 使用 jQuery 的 appendTo 方法移动元素</h3><p>现在来把标签从一个 <code>div</code> 移动到另一个里。</p>
<p>jQuery 有一个 <code>appendTo()</code> 方法，可以选取 HTML 标签并将其添加到另一个标签里面。</p>
<p>例如，如果要把 <code>target4</code> 从 right well 移到 left well，可以设置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#target4&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#left-well&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>把 <code>target2</code> 元素从 <code>left-well</code> 移动到 <code>right-well</code>。</p>
<h3 id="14-使用-jQuery-克隆元素"><a href="#14-使用-jQuery-克隆元素" class="headerlink" title="14. 使用 jQuery 克隆元素"></a>14. 使用 jQuery 克隆元素</h3><p>除了移动标签，也可以把元素从一个地方复制到另一地方。</p>
<p>jQuery 有一个 <code>clone()</code> 方法，可以复制标签。</p>
<p>例如，如果想把 <code>target2</code> 从 <code>left-well</code> 复制到 <code>right-well</code>，可以设置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>是否注意到这两个 jQuery 函数连在一起了？ 这被称为链式调用（function chaining），是一种用 jQuery 实现效果的简便方法。</p>
<p>克隆 <code>target5</code> 元素，并将其附加到 <code>left-well</code> 。</p>
<h3 id="15-使用-jQuery-选择元素的父元素"><a href="#15-使用-jQuery-选择元素的父元素" class="headerlink" title="15. 使用 jQuery 选择元素的父元素"></a>15. 使用 jQuery 选择元素的父元素</h3><p>每个 HTML 标签都默认 <code>inherits</code>（继承）其 <code>parent</code>（父标签）的 CSS 属性。</p>
<p>For example, the <code>h3</code> element in your <code>jQuery Playground</code> has the parent element of <code>&lt;div class=&quot;container-fluid&quot;&gt;</code>, which itself has the parent element of <code>body</code>.</p>
<p>jQuery 有一个 <code>parent()</code> 方法，可以访问被选取标签的父标签。</p>
<p>下面的代码展示了使用 <code>parent()</code> 方法把 <code>left-well</code> 标签的父标签背景色设置成蓝色（blue）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#left-well&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>把 <code>#target1</code> 元素的父元素背景色设置成红色（red）。</p>
<h3 id="16-使用-jQuery-选择元素的子元素"><a href="#16-使用-jQuery-选择元素的子元素" class="headerlink" title="16. 使用 jQuery 选择元素的子元素"></a>16. 使用 jQuery 选择元素的子元素</h3><p>把 HTML 标签放到另一个级别的标签里，这些 HTML 标签被称为该标签的子标签（children element）。 例如，本次挑战中文本为 <code>#target1</code>、<code>#target2</code> 和 <code>#target3</code> 的按钮都是 <code>&lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</code> 标签的子标签。</p>
<p>jQuery 有一个 <code>children()</code> 方法，可以访问被选取标签的子标签。</p>
<p>下面的代码展示了用 <code>children()</code> 方法把 <code>left-well</code> 标签的子标签的颜色设置成 <code>blue</code>（蓝色）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#left-well&quot;</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>将 <code>right-well</code> 元素的所有子元素设置为橙色（orange）。</p>
<h3 id="17-使用-jQuery-选择元素的特定子元素"><a href="#17-使用-jQuery-选择元素的特定子元素" class="headerlink" title="17. 使用 jQuery 选择元素的特定子元素"></a>17. 使用 jQuery 选择元素的特定子元素</h3><p>已经看到了 id 属性对于 jQuery 选择器选取标签的便利， 但这并不适用于所有情景。</p>
<p>幸运的是，jQuery 有一些其他的方法可以选取正确的标签。</p>
<p>jQuery 可以用 CSS 选择器（CSS Selectors）选取标签。 <code>target:nth-child(n)</code> CSS 选择器可以选取指定 class 或者元素类型的的第 n 个标签。</p>
<p>下面的代码展示了给每个区域（well）的第 3 个标签设置弹跳（bounce）动画效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.target:nth-child(3)&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated bounce&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>给 well 元素的第二个子元素添加弹跳（bounce）动画效果。 你必须选择具有 <code>target</code> class 的元素子项。</p>
<h3 id="18-使用-jQuery-选择偶数元素"><a href="#18-使用-jQuery-选择偶数元素" class="headerlink" title="18. 使用 jQuery 选择偶数元素"></a>18. 使用 jQuery 选择偶数元素</h3><p>也可以用基于位置的奇 <code>:odd</code> 和偶 <code>:even</code> 选择器选取标签。</p>
<p>注意，jQuery 是零索引（zero-indexed）的，这意味着第 1 个标签的位置编号是 0。 这有点混乱和反常——<code>:odd</code> 表示选择第 2 个标签（位置编号 1）、第 4 个标签（位置编号 3）……等等，以此类推。</p>
<p>下面的代码展示了选取所有 <code>target</code> class 的奇数元素并给它们设置 class：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.target:odd&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated shake&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>尝试选取所有 <code>target</code> class 元素的偶数元素并给它们设置 <code>animated</code> 和 <code>shake</code> class。 请记住， <strong>偶数</strong>指的是基于零系统的元素的位置。</p>
<h3 id="18-使用-jQuery-修改整个页面"><a href="#18-使用-jQuery-修改整个页面" class="headerlink" title="18. 使用 jQuery 修改整个页面"></a>18. 使用 jQuery 修改整个页面</h3><p>目前，已经完成了 jQuery playground。 把它移除吧。</p>
<p>jQuery 也能选取 <code>body</code> 标签。</p>
<p>这是使整个 body 淡出的代码：<code>$(&quot;body&quot;).addClass(&quot;animated fadeOut&quot;);</code></p>
<p>来做一些更好玩的事。 给 <code>body</code> 标签添加 <code>animated</code> 和 <code>hinge</code> class。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;disabled&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    $(<span class="string">&quot;#target4&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">    $(<span class="string">&quot;#target2&quot;</span>).<span class="title function_">appendTo</span>(<span class="string">&quot;#right-well&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#target5&quot;</span>).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>(<span class="string">&quot;#left-well&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#target1&quot;</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#right-well&quot;</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;#left-well&quot;</span>).<span class="title function_">children</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;.target:nth-child(2)&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated bounce&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;.target:even&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated shake&quot;</span>);</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;animated hinge&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只修改这一行上面的代码 --&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-primary text-center&quot;</span>&gt;</span>jQuery Playground<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#left-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left-well&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target1&quot;</span>&gt;</span>#target1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target2&quot;</span>&gt;</span>#target2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target3&quot;</span>&gt;</span>#target3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#right-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right-well&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target4&quot;</span>&gt;</span>#target4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target5&quot;</span>&gt;</span>#target5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target6&quot;</span>&gt;</span>#target6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Front End Development Libraries</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Front End Development Libraries(四)</title>
    <url>/front-end-development-libraries-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Front-End-Development-Libraries"><a href="#freeCodeCamp-—-Front-End-Development-Libraries" class="headerlink" title="freeCodeCamp —- Front End Development Libraries"></a>freeCodeCamp —- Front End Development Libraries</h1><hr>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="1-创建一个简单的-JSX-元素"><a href="#1-创建一个简单的-JSX-元素" class="headerlink" title="1. 创建一个简单的 JSX 元素"></a>1. 创建一个简单的 JSX 元素</h3><p>简介：React 是由 Facebook 创建和维护的开源视图库。 它是渲染现代 Web 应用程序用户界面（UI）的好工具。</p>
<span id="more"></span>
<p>React 使用名为 JSX 的 JavaScript 语法扩展，可以直接在 JavaScript 中编写 HTML。 这有几个好处。 可以在 HTML 中使用 JavaScript 的完整程序功能，并有助于保持代码的可读性。 在大多数情况下，JSX 类似于已经学过的 HTML，但是在这些挑战中将会涉及一些关键差异。</p>
<p>例如，因为 JSX 是 JavaScript 的语法扩展，所以实际上可以直接在 JSX 中编写 JavaScript。 要做到这一点，只需在花括号中包含希望被视为 JavaScript 的代码：<code>&#123; &#39;this is treated as JavaScript code&#39; &#125;</code>（这被视为 JavaScript 代码）。 请牢记这个写法，将会在接下来的挑战中使用。</p>
<p>但是，由于浏览器不能解析 JSX，因此必须将 JSX 代码编译为 JavaScript。 在这个过程中，转换器 Babel 是一个很受欢迎的工具。 后续挑战已经在后台引入了 Babel，可以直接写 JSX 代码。 如果代码不符合 JSX 语法，那么挑战中的第一个测试就不会通过。</p>
<p>值得注意的是，这些挑战在底层调用 <code>ReactDOM.render(JSX, document.getElementById(&#39;root&#39;))</code>。 这个函数调用将 JSX 置于 React 自己的轻量级 DOM 中。 然后，React 使用自己的 DOM 快照来实现增量更新。</p>
<h3 id="2-创建一个复杂的-JSX-元素"><a href="#2-创建一个复杂的-JSX-元素" class="headerlink" title="2. 创建一个复杂的 JSX 元素"></a>2. 创建一个复杂的 JSX 元素</h3><p>关于嵌套的 JSX，需要知道的一件重要的事情，那就是它必须返回单个元素。</p>
<p>这个父元素将包裹所有其他级别的嵌套元素。</p>
<p>例如，几个作为兄弟元素编写的 JSX 元素而没有父元素包裹将不会被转换。</p>
<p>这里是一个示例：</p>
<p><strong>有效的 JSX：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph One<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph Two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph Three<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>无效的 JSX：</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;<span class="title class_">Paragraph</span> <span class="title class_">One</span>&lt;/p&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph Two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph Three<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<p>定义一个新的常量 <code>JSX</code>，渲染一个 <code>div</code>，其中依次包含以下元素：</p>
<p>一个 <code>h1</code>，一个 <code>p</code>，一个包含三个 <code>li</code> 项的无序列表。 可以在每个元素中包含任意文本。</p>
<p><strong>注意：</strong> 当像这样渲染多个元素时，可以把它们都用圆括号括起来，但是这并不是必须的。 另外，此挑战使用 <code>div</code> 标签把所有子元素包裹在里面。 如果删除 <code>div</code>，JSX 将不会编译这些元素。 请记住这一点，因为在 React 组件中返回 JSX 元素时也适用。</p>
<h3 id="3-在-JSX-中添加注释"><a href="#3-在-JSX-中添加注释" class="headerlink" title="3. 在 JSX 中添加注释"></a>3. 在 JSX 中添加注释</h3><p>JSX 是一种可以编译成 JavaScript 的语法。 有时，为了便于阅读，可能需要在代码中添加注释。 像大多数编程语言一样，JSX 也有自己的方法来实现这一点。</p>
<p>要将注释放在 JSX 中，可以使用 <code>&#123;/* */&#125;</code> 语法来包裹注释文本。</p>
<hr>
<p>代码编辑器中的 JSX 元素与在上一个挑战中创建的元素类似。 在提供的 <code>div</code> 元素里添加注释，不修改现有的 <code>h1</code> 或 <code>p</code> 元素。</p>
<h3 id="4-渲染-HTML-元素为-DOM-树"><a href="#4-渲染-HTML-元素为-DOM-树" class="headerlink" title="4. 渲染 HTML 元素为 DOM 树"></a>4. 渲染 HTML 元素为 DOM 树</h3><p>到目前为止，已经了解到 JSX 是一种在 JavaScript 中编写可读 HTML 的便捷工具。 在 React 中，可以使用它的的渲染 API（ReactDOM）将此 JSX 直接渲染到 HTML DOM。</p>
<p>ReactDOM 提供了一个简单的方法来将 React 元素呈现给 DOM，如下所示：<code>ReactDOM.render(componentToRender, targetNode)</code>，其中第一个参数是要渲染的 React 元素或组件，第二个参数是组件将要渲染到的 DOM 节点。</p>
<p>如你所料，必须在 JSX 元素声明之后调用 <code>ReactDOM.render()</code>，就像在使用变量之前必须声明它一样。</p>
<hr>
<p>代码编辑器有一个简单的 JSX 组件。 使用 <code>ReactDOM.render()</code> 方法将该组件渲染到页面。 可以将定义好的 JSX 元素直接作为第一个参数传入，然后使用 <code>document.getElementById()</code> 来选择要渲染到的 DOM 节点， 在这个挑战中，请渲染到 <code>id=&#39;challenge-node&#39;</code>的 <code>div</code> 中。 确保没有修改 <code>JSX</code> 常量。</p>
<h3 id="5-在-JSX-中定义一个-HTML-Class"><a href="#5-在-JSX-中定义一个-HTML-Class" class="headerlink" title="5. 在 JSX 中定义一个 HTML Class"></a>5. 在 JSX 中定义一个 HTML Class</h3><p>现在已经习惯了编写 JSX，可能想知道它与 HTML 有什么不同。</p>
<p>到目前为止，HTML 和 JSX 似乎完全相同。</p>
<p>JSX 的一个关键区别是你不能再使用 <code>class</code> 这个单词来做为 HTML 的 class 名。 这是因为 <code>class</code> 是 JavaScript 中的关键字。 而 JSX 使用 <code>className</code> 来代替。</p>
<p>事实上，JSX 中所有 HTML 属性和事件引用的命名约定都变成了驼峰式。 例如，JSX 中的单击事件是 <code>onClick</code>，而不是 <code>onclick</code>。 同样，<code>onchange</code> 变成了<code>onChange</code>。 虽然这是一个微小的差异，但请你一定要记住。</p>
<h3 id="6-了解自闭合-JSX-标签"><a href="#6-了解自闭合-JSX-标签" class="headerlink" title="6. 了解自闭合 JSX 标签"></a>6. 了解自闭合 JSX 标签</h3><p>到目前为止，已经看到 JSX 与 HTML 的关键不同在于使用 <code>className</code> 还是 <code>class</code> 来定义 HTML 的 class。</p>
<p>JSX 不同于 HTML 的另一个重要方面是自闭合标签。</p>
<p>在HTML中，几乎所有的标签都有一个开始和结束标签：<code>&lt;div&gt;&lt;/div&gt;</code>，结束标签在你要关闭的标签名之前始终具有正斜杠。 但是，HTML 中有一些被称为“自闭合标签”的特殊实例，它们在另一个标签开始之前，不需要开始和结束标签都存在。</p>
<p>例如，换行标签可以写成 <code>&lt;br&gt;</code> 或者 <code>&lt;br /&gt;</code>，但是不应该写成 <code>&lt;br&gt;&lt;/br&gt;</code>，因为它不包含任何内容。</p>
<p>在 JSX 中，规则略有不同。 任何 JSX 元素都可以使用自闭合标签编写，并且每个元素都必须关闭。 例如，为了通过编译换行标签必须始终编写为 <code>&lt;br /&gt;</code>。 另一方面 <code>&lt;div&gt;</code> 可以写成 <code>&lt;div /&gt;</code> 或者 <code>&lt;div&gt;&lt;/div&gt;</code>。 不同之处在于，在第一个语法版本中，无法在 <code>&lt;div /&gt;</code> 中包含任何内容。 在后面的挑战中你会发现，这种语法在渲染 React 组件时非常有用。</p>
<hr>
<p>修复代码编辑器中的错误，使其成为有效的 JSX 并成功编译。 确保不更改任何内容 – 只需要在需要的地方关闭标签。</p>
<h3 id="7-创建一个无状态的函数组件"><a href="#7-创建一个无状态的函数组件" class="headerlink" title="7. 创建一个无状态的函数组件"></a>7. 创建一个无状态的函数组件</h3><p>组件是 React 的核心。 React 中的所有内容都是一个组件，在这里将学习如何创建一个组件。</p>
<p>有两种方法可以创建 React 组件。 第一种方法是使用 JavaScript 函数。 以这种方式定义组件会创建<em>无状态函数组件</em>。 将在以后的挑战中介绍应用程序中状态的概念。 目前为止，可以将无状态组件视为能接收数据并对其进行渲染，但不管理或跟踪该数据的更改的组件。 (我们将下一个挑战使用中第二种方式创建 React 组件。)</p>
<p>要用函数创建组件，只需编写一个返回 JSX 或 <code>null</code> 的 JavaScript 函数。 需要注意的一点是，React 要求你的函数名以大写字母开头。 下面是一个无状态功能组件的示例，该组件在 JSX 中分配一个 HTML 的 class：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">DemoComponent</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;customClass&#x27;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>翻译完成后， <code>&lt;div&gt;</code> 将有一个 <code>customClass</code> 的 CSS class。</p>
<p>因为 JSX 组件代表 HTML，所以你可以将几个组件放在一起以创建更复杂的 HTML 页面。 这是 React 提供的组件架构的关键优势之一。 它允许用许多独立的组件组合成 UI。 这使得构建和维护复杂的用户界面变得更加容易。</p>
<hr>
<p>代码编辑器中有一个名为 <code>MyComponent</code> 的函数。 完成此函数，使其返回包含一些文本字符串的单个 <code>div</code> 元素。</p>
<p><strong>注意：</strong> 文本被视为是 <code>div</code> 的子元素，因此不能使用自闭合标签。</p>
<h3 id="8-创建一个-React-组件"><a href="#8-创建一个-React-组件" class="headerlink" title="8. 创建一个 React 组件"></a>8. 创建一个 React 组件</h3><p>定义 React 组件的另一种方法是使用 ES6 的 <code>class</code>语法。 在以下示例中，<code>Kitten</code> 扩展了<code>React.Component</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Kitten</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这将创建一个 ES6 类 <code>Kitten</code>，它扩展了 <code>React.Component</code> 类。 因此，<code>Kitten</code> 类现在可以访问许多有用的 React 功能，例如本地状态和生命周期钩子。 如果还不熟悉这些术语，请不要担心，在以后的挑战中我们将更详细地介绍它们。 另请注意，<code>Kitten</code> 类中定义了一个调用 <code>super()</code> 方法的 <code>constructor</code>。 它使用 <code>super()</code> 调用父类的构造函数，即本例中的 <code>React.Component</code>。 构造函数是使用 <code>class</code> 关键字创建的特殊方法，它在实例初始化之前调用。 最佳做法是在组件的 <code>constructor</code> 里调用 <code>super</code>，并将 <code>props</code> 传递给它们， 这样可以保证组件能够正确地初始化。 目前为止 ，需要知道这些代码是必要的。 很快会了解到到构造函数的其他用途以及 <code>props</code>。</p>
<hr>
<p><code>MyComponent</code> 是使用类语法在代码编辑器中定义的。 完成 <code>render</code> 方法的编写，使其返回 <code>div</code> 元素，其中包含文本内容为 <code>Hello React!</code> 的 <code>h1</code> 元素。</p>
<h3 id="9-用组合的方式创建一个-React-组件"><a href="#9-用组合的方式创建一个-React-组件" class="headerlink" title="9. 用组合的方式创建一个 React 组件"></a>9. 用组合的方式创建一个 React 组件</h3><p>现在来看看如何组合多个 React 组件。 想象一下，现在正在构建一个应用程序，并创建了三个组件：<code>Navbar</code>、<code>Dashboard</code> 和 <code>Footer</code>。</p>
<p>要将这些组件组合在一起，可以创建一个 <code>App</code> <em>父组件</em>，将这三个组件分别渲染成为<em>子组件</em>。 要在 React 组件中渲染一个子组件，需要在 JSX 中将组件名称写作自定义的 HTML 标签。 例如，在 <code>render</code> 方法中，可以这样编写：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Navbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Dashboard</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">App</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>当 React 遇到一个自定义 HTML 标签引用另一个组件的时（如本例所示，组件名称包含在 <code>&lt; /&gt;</code> 中），它在自定义标签的位置渲染该组件的标签。 这可以说明 <code>App</code> 组件和 <code>Navbar</code>、<code>Dashboard</code> 以及 <code>Footer</code> 之间的父子关系。</p>
<hr>
<p>在代码编辑器中，有一个名为 <code>ChildComponent</code> 的简单函数组件和一个名为 <code>ParentComponent</code> 的 React 组件。 通过在 <code>ParentComponent</code> 中渲染 <code>ChildComponent</code> 来将两者组合在一起。 确保使用正斜杠关闭 <code>ChildComponent</code> 标签。</p>
<p><strong>注意：</strong> <code>ChildComponent</code> 是使用 ES6 的箭头函数定义的，这是使用 React 时非常常见的做法。 但是，要知道这只是一个函数。 如果你不熟悉箭头函数语法，请参阅 JavaScript 部分。</p>
<h3 id="10-使用-React-渲染嵌套组件"><a href="#10-使用-React-渲染嵌套组件" class="headerlink" title="10. 使用 React 渲染嵌套组件"></a>10. 使用 React 渲染嵌套组件</h3><p>上一个挑战显示了组合两个组件的简单方法，但是有许多不同的方法可以把 React 组件组合在一起。</p>
<p>组件组合是 React 的强大功能之一。 当使用 React 时，应当先用组件的思路考虑清楚用户界面的结构（如上一个挑战中的 App 示例）。 可以将 UI 分解为基本的构建块，这些构建块就是组件。 这样做有助于将负责 UI 的代码与负责处理应用程序逻辑的代码分开， 并可以大大简化复杂项目的开发和维护。</p>
<hr>
<p>代码编辑器中定义了两个功能组件，分别是 <code>TypesOfFruit</code> 和 <code>Fruits</code>。 请用组合或者<em>嵌套</em>把 <code>TypesOfFruit</code> 组件放到 <code>Fruits</code> 组件中， 然后把 <code>Fruits</code> 组件放到 <code>TypesOfFood</code> 组件中。 结果应该是子组件嵌套在父组件中，父组件嵌套在它本身的父组件中！</p>
<h3 id="11-组合-React-组件"><a href="#11-组合-React-组件" class="headerlink" title="11. 组合 React 组件"></a>11. 组合 React 组件</h3><p>随着挑战继续，将组合使用更复杂的 React 组件和 JSX，有一点需要注意。 在其它组件中渲染 ES6 风格的类组件和渲染在过去几个挑战中使用的简单组件没有什么不同。 可以在其它组件中渲染 JSX 元素、无状态函数组件和 ES6 类组件。</p>
<hr>
<p>在代码编辑器中，<code>TypesOfFood</code> 组件已经渲染了一个名为 <code>Vegetables</code> 的组件。 此外，还有上次挑战中的 <code>Fruits</code> 组件。</p>
<p>在 <code>Fruits</code> 中嵌套两个组件，首先 <code>NonCitrus</code>，然后是 <code>Citrus</code>， 这两个组件都已经引入。 接下来，将 <code>Fruits</code> 类组件嵌套到 <code>TypesOfFood</code> 组件中，位于 <code>h1</code> 标题元素下方和 <code>Vegetables</code> 上方。 结果应该是一系列嵌套的组件，它们使用两种不同的组件类型。</p>
<h3 id="12-将-class-组件渲染到-DOM-树"><a href="#12-将-class-组件渲染到-DOM-树" class="headerlink" title="12. 将 class 组件渲染到 DOM 树"></a>12. 将 class 组件渲染到 DOM 树</h3><p>还记不记得在之前的挑战中使用 ReactDOM API 将 JSX 元素渲染到 DOM， 这与渲染 React 组件的过程十分相似。 过去的几个挑战主要针对组件和组合，因此渲染是在幕后完成的。 但是，如果不调用 ReactDOM API，编写的任何 React 代码都不会渲染到 DOM。</p>
<p>复习一下语法： <code>ReactDOM.render(componentToRender, targetNode)</code>。 第一个参数是要渲染的 React 组件。 第二个参数是要在其中渲染该组件的 DOM 节点。</p>
<p>传递到<code>ReactDOM.render()</code> 的React 组件与 JSX 元素略有不同。 对于 JSX 元素，传入的是要渲染的元素的名称。 但是，对于 React 组件，需要使用与渲染嵌套组件相同的语法，例如<code>ReactDOM.render(&lt;ComponentToRender /&gt;, targetNode)</code>。 此语法用于 ES6 class 组件和函数组件都可以。</p>
<hr>
<p>在后台引入了 <code>Fruits</code> 和 <code>Vegetables</code> 组件。 将两个组件渲染为 <code>TypesOfFood</code> 组件的子组件，然后将 <code>TypesOfFood</code> 渲染到 DOM 节点， 在这个挑战中，请渲染到 <code>id=&#39;challenge-node&#39;</code>的 <code>div</code> 中。</p>
<h3 id="13-从零开始写一个-React-组件"><a href="#13-从零开始写一个-React-组件" class="headerlink" title="13. 从零开始写一个 React 组件"></a>13. 从零开始写一个 React 组件</h3><p>你已经了解了 JSX 和 React 组件的基础知识，是时候自己编写一个组件了。 React 组件是 React 应用程序的核心组成部分，因此熟练编写它们是非常重要的。 记住，典型的 React 组件是 ES6 <code>class</code>，它扩展了 <code>React.Component</code>。 它有一个返回 HTML（从 JSX 返回）或 <code>null</code> 的渲染方法， 这是 React 组件的基本形式。 理解了这一点之后，就可以开始构建更复杂的 React 项目了。</p>
<hr>
<p>定义一个 <code>MyComponent</code> 类，它是 <code>React.Component</code> 的扩展。 它的渲染方法应该返回一个 <code>div</code>，其中包含一个 <code>h1</code> 标签，标签文本为：<code>My First React Component!</code>。 准确使用此文本，大小写和标点符号也要考虑。 确保也调用组件的构造器。</p>
<p>使用 <code>ReactDOM.render()</code> 把该组件渲染到 DOM 中。 有一个 <code>id=&#39;challenge-node&#39;</code> 的 <code>div</code> 可供渲染。</p>
<h3 id="14-将-Props-传递给无状态函数组件"><a href="#14-将-Props-传递给无状态函数组件" class="headerlink" title="14. 将 Props 传递给无状态函数组件"></a>14. 将 Props 传递给无状态函数组件</h3><p>之前的挑战涵盖了关于在 React 中创建和组合 JSX 元素、函数组件和 ES6 风格的类组件的很多内容。 有了这个基础，现在是时候看看 React 中的另一个常见特性 <strong>props</strong> 了。 在 React 中，可以将属性传递给子组件。 假设有一个 <code>App</code> 组件，该组件渲染了一个名为 <code>Welcome</code> 的子组件，它是一个无状态函数组件。 可以通过以下方式给 <code>Welcome</code> 传递一个 <code>user</code> 属性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">App</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">user</span>=<span class="string">&#x27;Mark&#x27;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">App</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以把创建的 React 支持的<strong>自定义 HTML 属性</strong>传递给组件。 在上面的例子里，将创建的属性 <code>user</code> 传递给组件 <code>Welcome</code>。 由于 <code>Welcome</code> 是一个无状态函数组件，它可以像这样访问该值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Welcome</span> = (<span class="params">props</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.user&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>调用 <code>props</code> 这个值是常见做法，当处理无状态函数组件时，基本上可以将其视为返回 JSX 的函数的参数。 这样，你就可以在函数体中访问该值。 但对于类组件，访问方式会略有不同。</p>
<hr>
<p>代码编辑器中有 <code>Calendar</code> 和 <code>CurrentDate</code> 组件。 从 <code>Calendar</code> 组件渲染 <code>CurrentDate</code> 时，从 JavaScript 的 <code>Date</code> 对象分配当前日期，并将其作为 <code>date</code> 属性传入。 然后访问 <code>CurrentDate</code> 组件的 <code>prop</code>，并在 <code>p</code> 标签中显示其值。 请注意，要将 <code>prop</code> 的值视为 JavaScript，必须将它们括在花括号中，例如<code>date=&#123;Date()&#125;</code>。</p>
<h3 id="15-传递一个数组作为-Props"><a href="#15-传递一个数组作为-Props" class="headerlink" title="15. 传递一个数组作为 Props"></a>15. 传递一个数组作为 Props</h3><p>上一个挑战演示了如何将来自父组件的信息作为 <code>props</code> 传递给子组件。 这个挑战着眼于如何将数组作为 <code>props</code> 传递。 要将数组传递给 JSX 元素，必须将其视为 JavaScript 并用花括号括起来。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">ParentComponent</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">colors</span>=<span class="string">&#123;[</span>&quot;<span class="attr">green</span>&quot;, &quot;<span class="attr">blue</span>&quot;, &quot;<span class="attr">red</span>&quot;]&#125; /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">ParentComponent</span>&gt;</span><br></pre></td></tr></table></figure>

<p>这样，子组件就可以访问数组属性 <code>colors</code>。 访问属性时可以使用 <code>join()</code> 等数组方法。 <code>const ChildComponent = (props) =&gt; &lt;p&gt;&#123;props.colors.join(&#39;, &#39;)&#125;&lt;/p&gt;</code> 这将把所有 <code>colors</code> 数组项连接成一个逗号分隔的字符串并生成： <code>&lt;p&gt;green, blue, red&lt;/p&gt;</code> 稍后，我们将了解在 React 中渲染数组数据的其他常用方法。</p>
<hr>
<p>代码编辑器中有 <code>List</code> 和 <code>ToDo</code> 组件。 在 <code>ToDo</code> 组件中渲染每个 <code>List</code> 时，传入 <code>tasks</code> 属性并将其分配给待办任务数组，例如 <code>[&quot;walk dog&quot;, &quot;workout&quot;]</code>。 然后访问 <code>List</code> 组件中的 <code>tasks</code> 数组，在<code>p</code>元素中显示其值。 使用 <code>join(&quot;, &quot;)</code> 把 <code>props.tasks</code> 数组作为逗号分隔列表显示在 <code>p</code> 元素中。 今天的列表应该至少有 2 个任务，明天的列表应该至少有 3 个任务。</p>
<h3 id="16-使用默认的-Props"><a href="#16-使用默认的-Props" class="headerlink" title="16. 使用默认的 Props"></a>16. 使用默认的 Props</h3><p>React 还有一个设置默认 props 的选项。 可以将默认 props 作为组件本身的属性分配给组件，React 会在必要时分配默认 prop。 如果没有显式的提供任何值，这允许指定 prop 值应该是什么。 例如，如果声明 <code>MyComponent.defaultProps = &#123; location: &#39;San Francisco&#39; &#125;</code>，即定义一个 location 属性，并且其值在没有另行制定的情况下被设置为字符串 <code>San Francisco</code>。 如果 props 未定义，则 React 会分配默认 props，但如果你将 <code>null</code> 作为 prop 的值，它将保持 <code>null</code>。</p>
<hr>
<p>代码编辑器中有一个 <code>ShoppingCart</code> 组件。 在这个组件上定义默认 props，它指定一个 <code>items</code> prop，其值为 <code>0</code>。</p>
<h3 id="17-覆盖默认的-Props"><a href="#17-覆盖默认的-Props" class="headerlink" title="17. 覆盖默认的 Props"></a>17. 覆盖默认的 Props</h3><p>在 React 中，设置默认的 props 是一个很有用的特性， 显式设置组件的 prop 值即可覆盖默认 props。</p>
<hr>
<p><code>ShoppingCart</code> 组件现在渲染了一个子组件 <code>Items</code>。 该 <code>Items</code> 组件有一个默认 <code>quantity</code> prop，其值被设置为整数 <code>0</code>。 通过传入数值 <code>10</code> 来覆盖 <code>quantity</code> 的默认 prop。</p>
<p><strong>注意：</strong> 请记住，向组件添加 prop 的语法与添加 HTML 属性类似。 但是，由于 <code>quantity</code> 的值是整数，所以它不会加引号，但应该用花括号括起来， 例如<code>&#123;100&#125;</code>。 这个语法告诉 JSX 直接将花括号中的值解释为 JavaScript。</p>
<h3 id="18-使用-PropTypes-来定义-Props-的类型"><a href="#18-使用-PropTypes-来定义-Props-的类型" class="headerlink" title="18. 使用 PropTypes 来定义 Props 的类型"></a>18. 使用 PropTypes 来定义 Props 的类型</h3><p>React 提供了有用的类型检查特性，以验证组件是否接收了正确类型的 props。 例如，应用程序调用 API 来检索数据是否是数组，然后将数据作为 prop 传递给组件。 可以在组件上设置 <code>propTypes</code>，以要求数据的类型为 <code>array</code>。 当数据是任何其它类型时，都会抛出警告。</p>
<p>当提前知道 prop 的类型时，最佳实践是设置其 <code>propTypes</code>。 可以为组件定义 <code>propTypes</code> 属性，方法与定义 <code>defaultProps</code> 相同。 这样做将检查一个键的 prop 是否是给定类型。 这里有一个示例，表示名为 <code>handleClick</code> 的 prop 应为 <code>function</code> 类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MyComponent</span>.<span class="property">propTypes</span> = &#123; <span class="attr">handleClick</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span> &#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，<code>PropTypes.func</code> 部分检查 <code>handleClick</code> 是否为函数。 添加 <code>isRequired</code>，告诉 React <code>handleClick</code> 是该组件的必需属性。 如果没有那个属性，将出现警告。 还要注意 <code>func</code> 代表 <code>function</code> 。 在 7 种 JavaScript 原始类型中，<code>function</code> 和 <code>boolean</code>（写为 <code>bool</code> ）是唯一使用异常拼写的两种类型。 除了原始类型，还有其他类型可用。 例如，你可以检查 prop 是否为 React 元素。 请查看<a href="https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes">文档</a>以获取所有选项。</p>
<p><strong>注意：</strong>在 React v15.5.0 中, <code>PropTypes</code> 可以从 React 中单独引入，例如：<code>import PropTypes from &#39;prop-types&#39;;</code>。</p>
<hr>
<p>为 <code>Items</code> 组件定义 <code>propTypes</code>，以要求 <code>quantity</code> 作为 prop，并验证它是否为 <code>number</code> 类型。</p>
<h3 id="19-使用-this-props-访问-Props"><a href="#19-使用-this-props-访问-Props" class="headerlink" title="19. 使用 this.props 访问 Props"></a>19. 使用 this.props 访问 Props</h3><p>前几项挑战涵盖了将 props 传递给子组件的基本方法。 但是，倘若接收 prop 的子组件不是无状态函数组件，而是一个 ES6 类组件，又当如何呢？ ES6 类组件访问 props 的方法略有不同。</p>
<p>任何时候，如果要引用类组件本身，可以使用 <code>this</code> 关键字。 要访问类组件中的 props，需要在在访问它的代码前面添加 <code>this</code>。 例如，如果 ES6 类组件有一个名为 <code>data</code> 的 prop，可以在 JSX 中这样写：<code>&#123;this.props.data&#125;</code>。</p>
<hr>
<p>在父组件 <code>App</code> 中渲染 <code>Welcome</code> 组件的一个实例。 在这里，给 <code>Welcome</code> 一个 <code>name</code> 的 prop，并给它赋值一个字符串。 在 <code>Welcome</code> 的子节点里，访问 <code>strong</code> 标签内的 <code>name</code> prop。</p>
<h3 id="20-复习使用无状态函数组件的-Props"><a href="#20-复习使用无状态函数组件的-Props" class="headerlink" title="20. 复习使用无状态函数组件的 Props"></a>20. 复习使用无状态函数组件的 Props</h3><p>除了上一个挑战，一直在将 props 传递给无状态的函数组件。 这些组件就像纯函数， 它们接收 props 作为输入，并在每次传递相同 props 时返回相同的视图。 你可能好奇什么是状态，下一个挑战将会更详细地讲述它。 在此之前，我们先来回顾一下组件的术语。</p>
<p><em>无状态函数组件</em>是一个函数，它接收 props 作为输入并返回 JSX。 另一方面，<em>无状态组件</em>是一个类，它扩展了<code>React.Component</code>，但是不使用内部状态（下一个挑战中讨论）。 最后，<em>状态组件</em>是指维护其自身内部状态的组件， 它简称组件或 React 组件。</p>
<p>一种常见的应用模式是尽可能减少状态组件并创建无状态的函数组件。 这有助于将状态管理包含到应用程序的特定区域。 反过来，通过更容易地跟踪状态变化如何影响其行为，可以改善应用程序的开发和维护。</p>
<hr>
<p>在代码编辑器中有一个 <code>CampSite</code> 组件，它把 <code>Camper</code> 组件渲染为自己的子组件。 定义 <code>Camper</code> 组件，并为其分配默认 props <code>&#123; name: &#39;CamperBot&#39; &#125;</code>。 可以在 <code>Camper</code> 组件内部渲染任何你想要的代码，但是要确保有一个 <code>p</code> 元素，它只包含作为 <code>prop</code> 传递的 <code>name</code> 值。 最后，在 <code>Camper</code> 组件上定义 <code>propTypes</code>，要求提供 <code>name</code> 作为 prop，并验证它是 <code>string</code> 类型。</p>
<h3 id="21-创建一个有状态的组件"><a href="#21-创建一个有状态的组件" class="headerlink" title="21. 创建一个有状态的组件"></a>21. 创建一个有状态的组件</h3><p>React 中最重要的主题之一是 <code>state</code>。 state 包含应用程序需要了解的任何数据，这些数据可能会随时间而变化。 应用程序能够响应 state 的变更，并在必要时显示更新后的 UI。 React 为现代 Web 应用程序的状态管理提供了一个很好的解决方案。</p>
<p>可以在类组件的 <code>constructor</code> 上声明 <code>state</code> 属性来在 React 组件中创建 state， 它在创建时使用 <code>state</code> 初始化组件。 <code>state</code> 属性必须设置为 JavaScript <code>object</code>（对象）。 声明如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在组件的整个生命周期内访问 <code>state</code> 对象， 可以更新它、在 UI 中渲染它，也可以将其作为 props 传递给子组件。 <code>state</code> 对象的使用可以很简单，亦可以很复杂，就看你怎么用了。 请注意，必须通过扩展 <code>React.Component</code> 来创建类组件，以便像这样创建 <code>state</code>。</p>
<hr>
<p>在代码编辑器里，有一个组件尝试渲染 <code>state</code> 中的 <code>firstName</code> 属性。 但是 <code>state</code> 还没有定义。 在 <code>constructor</code> 中使用 <code>state</code> 初始化这个组件，并将你的名字赋值给 <code>firstName</code> 属性。</p>
<h3 id="22-在用户界面中渲染状态"><a href="#22-在用户界面中渲染状态" class="headerlink" title="22. 在用户界面中渲染状态"></a>22. 在用户界面中渲染状态</h3><p>定义了组件的初始 state 之后，就可以在要渲染的 UI 中显示它。 如果组件是有状态的，它将始终可以访问 <code>render()</code> 方法中 <code>state</code> 的数据。 就可以使用 <code>this.state</code> 访问数据。</p>
<p>如果想在 render 方法的 <code>return</code> 中访问 state 值，必须把这个值用花括号括起来。</p>
<p><code>state</code> 是 React 组件中最强大的特性之一， 它可以跟踪应用程序中的重要数据，并根据数据的变化渲染 UI。 如果数据发生变化，UI 也会随之改变。 React 使用所谓的虚拟 DOM 来跟踪幕后的变化。 当 state 数据更新时，它会使用该数据触发组件的重新渲染 – 包括接收 prop 数据的子组件。 React 只在必要的时候更新实际的 DOM， 这意味着你不必担心 DOM 的变更， 只需声明 UI 的外观即可。</p>
<p>注意，如果组件是有状态的，其它组件并不知道它的 <code>state</code>。 它的 <code>state</code> 是完全封装的，或者是局限于组件本身的，除非你将 state 数据作为 <code>props</code> 传递给子组件。 封装 <code>state</code> 的概念非常重要，因为它允许编写特定的逻辑，然后将该逻辑包含并隔离在代码中的某个位置。</p>
<hr>
<p>在代码编辑器中，<code>MyComponent</code> 是一个有状态组件， 在组件的 render 方法中定义一个<code>h1</code>标签，该方法从组件的 state 渲染 <code>name</code> 的值。</p>
<p><strong>注意：</strong> <code>h1</code> 应该只渲染来自 <code>state</code> 的值。 在 JSX 中，使用花括号 <code>&#123; &#125;</code> 编写的任何代码都将被视为 JavaScript。 因此，要访问 <code>state</code> 中的值，只需将引用括在花括号中即可。</p>
<h3 id="23-以另一种方式在用户界面中渲染状态"><a href="#23-以另一种方式在用户界面中渲染状态" class="headerlink" title="23. 以另一种方式在用户界面中渲染状态"></a>23. 以另一种方式在用户界面中渲染状态</h3><p>还有另一种方法可以访问组件中的 <code>state</code>。 在 <code>render()</code> 方法中，在 <code>return</code> 语句之前，可以直接编写 JavaScript。 例如，可以声明函数、从 <code>state</code> 或 <code>props</code> 中访问数据、对此数据执行计算等。 然后，可以将任何数据赋值给 <code>return</code> 语句中可以访问的变量。</p>
<hr>
<p>在 <code>MyComponent</code> 的 render 方法中，定义一个名为 <code>name</code> 的 <code>const</code>（常量），并将其设置为组件 <code>state</code> 中的 name 值。 因为可以直接在代码部分编写 JavaScript，所以不需要用大括号括起来。</p>
<p>接下来，在 return 语句中，在 <code>h1</code> 标签中渲染变量 <code>name</code> 的值。 记住，在 return 语句中需要使用 JSX 语法（用到 JavaScript 的花括号）。</p>
<h3 id="24-用-this-setState-设置状态"><a href="#24-用-this-setState-设置状态" class="headerlink" title="24. 用 this.setState 设置状态"></a>24. 用 this.setState 设置状态</h3><p>前面的挑战涵盖了组件的 <code>state</code> 以及如何在 <code>constructor</code> 中初始化 state。 还有一种方法可以更改组件的 <code>state</code>。 React 提供了 <code>setState</code> 方法来更新组件的 <code>state</code>。 在组件类中调用 <code>setState</code> 方法如下所示：<code>this.setState()</code>，传入键值对的对象， 其中键是 state 属性，值是更新后的 state 数据。 例如，如果我们在 state 中存储 <code>username</code>，并想要更新它，代码如下所示：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;Lewis&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>React 要求永远不要直接修改 <code>state</code>，而是在 state 发生改变时始终使用 <code>this.setState()</code>。 此外，应该注意，React 可以批量处理多个 state 更新以提高性能。 这意味着通过 <code>setState</code> 方法进行的 state 更新可以是异步的。 <code>setState</code> 方法有一种替代语法可以解决异步问题， 虽然这很少用到，但是最好还是记住它！ 请查阅我们的 <a href="https://www.freecodecamp.org/chinese/news/what-is-state-in-react-explained-with-examples/">React 文章</a>了解更多详情。</p>
<hr>
<p>代码编辑器中有一个 <code>button</code> 元素，它有一个 <code>onClick()</code> handler。 当 <code>button</code> 在浏览器中接收到单击事件时触发此 handler，并运行 <code>MyComponent</code> 中定义的 <code>handleClick</code> 方法。 在 <code>handleClick</code> 方法中，使用 <code>this.setState()</code> 更新组件的 <code>state</code>。 设置 <code>state</code> 中的 <code>name</code> 属性为字符串 <code>React Rocks!</code></p>
<h3 id="25-将-this-绑定到-Class-方法上"><a href="#25-将-this-绑定到-Class-方法上" class="headerlink" title="25. 将 this 绑定到 Class 方法上"></a>25. 将 this 绑定到 Class 方法上</h3><p>除了设置和更新 <code>state</code> 之外，还可以为组件类定义方法。 类方法通常需要使用 <code>this</code> 关键字，以便它可以访问方法中类的属性（例如 <code>state</code> 和 <code>props</code>）。 有几种方法可以让类方法访问 <code>this</code>。</p>
<p>一种常见的方法是在构造函数中显式地绑定 <code>this</code>，这样当组件初始化时，<code>this</code> 就会绑定到类方法。 你可能已经注意到上一个挑战在构造函数中的 <code>handleClick</code> 方法使用了 <code>this.handleClick = this.handleClick.bind(this)</code>。 然后，当在类方法中调用像 <code>this.setState()</code> 这样的函数时，<code>this</code> 指的是这个类，而不是 <code>undefined</code>。</p>
<p><strong>注意：</strong> <code>this</code>关键字是 JavaScript 中最令人困惑的方面之一，但它在 React 中扮演着重要的角色。 虽然它的行为在这里是完全正常的，但是这些课程并不深入研究<code>this</code>，所以如果以上内容令你感到困惑，请参考其他课程！</p>
<hr>
<p>代码编辑器有一个带有 <code>state</code> 的组件，用于跟踪项目计数。 它还有一个方法，允许设置文本为 <code>You clicked!</code>。 但是，该方法不起作用，因为它使用了未定义的 <code>this</code> 关键字。 可以通过将 <code>this</code> 显式绑定到组件构造函数中的 <code>handleClick()</code>方法来修复它。</p>
<p>接下来，向 render 方法中的 <code>button</code> 元素添加一个单击处理程序。 当按钮接收到单击事件时，它应该触发 <code>handleClick()</code> 方法。 记住，传递给 <code>onClick</code> 处理程序的方法需要使用花括号，因为它应该直接被解释为 JavaScript。</p>
<p>完成上述步骤后，可以单击按钮并看到 <code>You clicked!</code>。</p>
<h3 id="26-使用-State-切换元素"><a href="#26-使用-State-切换元素" class="headerlink" title="26. 使用 State 切换元素"></a>26. 使用 State 切换元素</h3><p>有时可能在更新状态的时候想知道上一个状态是什么。 但是状态更新是异步的，这意味着 React 可能会把多个 <code>setState()</code> 集中在一起批量更新。 所以计算下一个值时 <code>this.state</code> 或者 <code>this.props</code> 不能作为当前值。 所以最好不要写如下的代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">increment</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>正确的做法是，给 <code>setState</code> 传入一个函数，这个函数可以访问 state 和 props。 给 <code>setState</code> 传入函数可以保证 state 和 props 是正确的值。 代码可以重写为这样：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.<span class="property">counter</span> + props.<span class="property">increment</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>如果只需要 <code>state</code>，那么用下面没有 <code>props</code> 的格式也是可以的：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.<span class="property">counter</span> + <span class="number">1</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<p>注意一定要把 object 放在括号里，否则 JavaScript 会认为这只是代码片段。</p>
<hr>
<p><code>MyComponent</code> 有一个初始值为 <code>false</code> 的<code>visibility</code> 属性。 如果 <code>visibility</code> 的值为 true，render 方法返回一个视图，如果为 false，返回另一个视图。</p>
<p>目前，无法更新组件 <code>state</code> 中的 <code>visibility</code> 属性， 该值应在 true 和 false 之间来回切换。 按钮上有一个单击处理程序，它触发一个名为 <code>toggleVisibility()</code> 的类方法。 给函数传入 <code>setState</code> 来定义此方法，以便 <code>visibility</code> 的 <code>state</code> 在调用方法时切换到相反的值。 如果 <code>visibility</code> 是 <code>false</code>，则该方法将其设置为<code>true</code>，反之亦然。</p>
<p>最后，单击按钮以查看基于其 <code>state</code> 的组件的条件渲染。</p>
<p><strong>提示：</strong> 不要忘记将 <code>this</code> 关键字绑定到 <code>constructor</code> 中的方法上！</p>
<h3 id="27-写一个简单的计数器"><a href="#27-写一个简单的计数器" class="headerlink" title="27. 写一个简单的计数器"></a>27. 写一个简单的计数器</h3><p>可以结合目前为止所涵盖的概念来设计更复杂的有状态组件。 这包括初始化 <code>state</code>，编写设置 <code>state</code> 的方法，以及指定单击处理程序来触发这些方法。</p>
<hr>
<p><code>Counter</code> 组件跟踪 <code>state</code> 中的 <code>count</code> 值。 有两个按钮分别调用 <code>increment()</code> 和 <code>decrement()</code> 方法。 编写这些方法，使计数器值在单击相应按钮时增加或减少 1。 另外，创建一个 <code>reset()</code> 方法，当单击 reset 按钮时，把计数设置为 0。</p>
<p><strong>注意：</strong> 确保没有修改按钮的 <code>className</code>。 另外，请记住在构造函数中为新创建的方法添加必要的绑定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">increment</span> = <span class="variable language_">this</span>.<span class="property">increment</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">decrement</span> = <span class="variable language_">this</span>.<span class="property">decrement</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">reset</span> = <span class="variable language_">this</span>.<span class="property">reset</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;inc&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>Increment!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;dec&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>Decrement!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;reset&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.reset&#125;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="28-创建一个可以控制的输入框"><a href="#28-创建一个可以控制的输入框" class="headerlink" title="28. 创建一个可以控制的输入框"></a>28. 创建一个可以控制的输入框</h3><p>应用程序可能在 <code>state</code> 和渲染的 UI 之间有更复杂的交互。 例如，用于文本输入的表单控件元素（如 <code>input</code> 和 <code>textarea</code>）在用户键入时在 DOM 中维护自己的 state。 通过 React，可以将这种可变 state 转移到 React 组件的 <code>state</code> 中。 用户的输入变成了应用程序 <code>state</code> 的一部分，因此 React 控制该输入字段的值。 通常，如果 React 组件具有用户可以键入的输入字段，那么它将是一个受控的输入表单。</p>
<hr>
<p>代码编辑器具有一个名为 <code>ControlledInput</code> 的组件框架，用于创建受控的 <code>input</code> 元素。 组件的 <code>state</code> 已经被包含空字符串的 <code>input</code> 属性初始化。 此值表示用户在 <code>input</code> 字段中键入的文本。</p>
<p>首先，创建一个名为 <code>handleChange()</code> 的方法，该方法具有一个名为 <code>event</code> 的参数。 方法被调用时，它接收一个 <code>event</code> 对象，该对象包含一个来自 <code>input</code> 元素的字符串文本。 可以使用方法内的 <code>event.target.value</code> 来访问这个字符串。 用这个新字符串更新组件的<code>state</code>的<code>input</code>属性。</p>
<p>在 <code>render</code> 方法中的 <code>h4</code> 标签之上创建 <code>input</code> 元素。 添加一个 <code>value</code> 属性，使其等于组件 <code>state</code> 的 <code>input</code> 属性。 然后将 <code>onChange()</code> 事件处理程序设置到 <code>handleChange()</code> 方法中。</p>
<p>在输入框中键入时，文本由 <code>handleChange()</code> 方法处理，文本被设置为本地 <code>state</code> 中的 <code>input</code> 属性，并渲染在页面上的 <code>input</code> 框中。 组件 <code>state</code> 是输入数据的唯一真实来源。</p>
<p>最后，不要忘记在构造函数中添加必要的绑定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ControlledInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Change code below this line</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// Change code above this line</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Change code below this line</span></span><br><span class="line">  handleChange (event) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Change code above this line</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; /* Change code below this line */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; /* Change code above this line */&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Controlled Input:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.input&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="29-创建一个可以控制的表单"><a href="#29-创建一个可以控制的表单" class="headerlink" title="29. 创建一个可以控制的表单"></a>29. 创建一个可以控制的表单</h3><p><code>MyForm</code> 组件中是一个带有提交处理程序的空 <code>form</code> 元素， 提交处理程序将在提交表单时被调用。</p>
<p>我们增加了一个提交表单的按钮。 可以看到它的 <code>type</code> 被设置为 <code>submit</code>，表明它是控制表单提交的按钮。 在 <code>form</code> 中添加 <code>input</code> 元素，并像上个挑战一样设置其 <code>value</code> 和 <code>onChange()</code> 属性。 然后，应该完成 <code>handleSubmit</code> 方法，以便将组件 state 属性 <code>submit</code> 设置为本地 <code>state</code> 下的当前输入值。</p>
<p><strong>注意：</strong> 还必须在提交处理程序中调用 <code>event.preventDefault()</code>，以防止将会刷新网页的默认的表单提交行为。 为了便于学员操作，默认行为在这里被禁用，以防止重置挑战的代码。</p>
<p>最后，在 <code>form</code> 元素之后创建一个 <code>h1</code> 标签，该标签从组件的 <code>state</code> 渲染 <code>submit</code> 的值。 然后，可以在表单中键入任何内容，然后单击按钮（或按 enter 键），输入会渲染到页面上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">submit</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 修改这行下面的代码</span></span><br><span class="line">      event.<span class="title function_">preventDefault</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">submit</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">input</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 修改这行上面的代码</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>Submit!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.submit&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="30-将-State-作为-Props-传递给子组件"><a href="#30-将-State-作为-Props-传递给子组件" class="headerlink" title="30. 将 State 作为 Props 传递给子组件"></a>30. 将 State 作为 Props 传递给子组件</h3><p>在之前的挑战中，看到了很多将 props 传递给子 JSX 元素和子 React 组件的例子。 你可能想知道那些 props 是从哪里来的。 一个常见的模式是：有状态组件中包含对应用程序很重要的 <code>state</code>，然后用它渲染子组件。 如果想让这些组件能够访问该 <code>state</code> 的某些部分，就把这些部分作为 props 传入。</p>
<p>例如，有一个 <code>App</code> 组件可以渲染 <code>Navbar</code> 以及其他组件。 <code>App</code> 里的 <code>state</code> 包含大量用户信息，但 <code>Navbar</code> 只需要访问用户的用户名，以便显示它。 将该 <code>state</code> 作为 prop 传递给<code>Navbar</code>组件。</p>
<p>这个模式说明了 React 中的一些重要范例。 第一个是<em>单向数据流</em>， state 沿着应用程序组件树的一个方向流动，从有状态父组件到子组件， 子组件只接收它们需要的 state 数据。 第二，复杂的有状态应用程序可以分解成几个，或者可能是一个单一的有状态组件。 其余组件只是从父组件简单的接收 state 作为 props，并从该 state 渲染 UI。 它开始创建一种分离，在这种分离中，state 管理在代码的一部分中处理，而 UI 渲染在另一部分中处理。 将 state 逻辑与 UI 逻辑分离是 React 的关键原则之一。 当它被正确使用时，它使得复杂的、有状态的应用程序的设计变得更容易管理。</p>
<hr>
<p><code>MyApp</code> 组件是有状态的，并将 <code>Navbar</code> 组件渲染为子组件。 将 <code>state</code> 的 <code>name</code> 属性向下传递给子组件，然后在 <code>h1</code> 中显示该 <code>name</code> ，h1 是 <code>Navbar</code> render方法的一部分。 <code>name</code> 应该显示在文本 <code>Hello, my name is:</code> 后面。</p>
<h3 id="31-传递回调作为-Props"><a href="#31-传递回调作为-Props" class="headerlink" title="31. 传递回调作为 Props"></a>31. 传递回调作为 Props</h3><p>可以将 <code>state</code> 作为 props 传递给子组件，但不仅限于传递数据。 你也可以将处理函数或在 React 组件中定义的任何方法传递给子组件。 这就是子组件与父组件交互的方式。 可以把方法像普通 prop 一样传递给子组件， 它会被分配一个名字，可以在子组件中的 <code>this.props</code> 下访问该方法的名字。</p>
<hr>
<p>代码编辑器中列出了三个组件。 <code>MyApp</code> 是父组件，<code>GetInput</code> 和<code>RenderInput</code> 是它将要渲染的子组件。 将 <code>GetInput</code> 组件添加到 <code>MyApp</code> 的 render 方法，然后将 <code>MyApp</code> 的 <code>state</code> 中的 <code>inputValue</code> 传入名为 <code>input</code> 的 prop。 还要创建一个名为 <code>handleChange</code> 的 prop，并将输入处理程序 <code>handleChange</code> 传递给它。</p>
<p>接下来，将 <code>RenderInput</code> 添加到 <code>MyApp</code> 中的 render 方法中，然后创建一个名为 <code>input</code> 的 prop，并将 <code>state</code> 中的 <code>inputValue</code> 传递给它。 完成后，可以在 <code>GetInput</code> 组件中的 <code>input</code> 字段中键入内容，然后该组件通过 props 调用其父组件中的处理函数方法。 这将更新处于父组件 <code>state</code> 中的 input，该 input 将作为 props 传递给两个子组件。 观察数据如何在组件之间流动，以及单一数据源如何保持父组件<code>state</code>。 诚然，这个示例有点刻意，但是应该能用来说明数据和回调是如何在 React 组件之间传递的。</p>
<h3 id="32-使用生命周期方法-componentWillMount"><a href="#32-使用生命周期方法-componentWillMount" class="headerlink" title="32. 使用生命周期方法 componentWillMount"></a>32. 使用生命周期方法 componentWillMount</h3><p>React 组件有几种特殊方法，可以在组件生命周期的特定点执行操作。 这些称为生命周期方法或生命周期钩子，允许在特定时间点捕获组件。 这可以在渲染之前、更新之前、接收 props 之前、卸载之前等等。 以下是一些主要生命周期方法的列表： <code>componentWillMount()</code> <code>componentDidMount()</code> <code>shouldComponentUpdate()</code> <code>componentDidUpdate()</code> <code>componentWillUnmount()</code> 接下来的几节课将讲述这些生命周期方法的一些基本用例。</p>
<hr>
<p>当组件被挂载到 DOM 时，<code>componentWillMount()</code> 方法在 <code>render()</code> 方法之前被调用。 在 <code>componentWillMount()</code> 中将一些内容记录到控制台 – 可能需要打开浏览器控制台以查看输出。</p>
<h3 id="33-使用生命周期方法：componentDidMount"><a href="#33-使用生命周期方法：componentDidMount" class="headerlink" title="33. 使用生命周期方法：componentDidMount"></a>33. 使用生命周期方法：componentDidMount</h3><p>某些时候，大多数 web 开发人员需要调用 API 接口来获取数据。 如果正在使用 React，知道在哪里执行这个动作是很重要的。</p>
<p>React 的最佳实践是在生命周期方法 <code>componentDidMount()</code> 中对服务器进行 API 调用或任何其它调用。 将组件装载到 DOM 后会调用此方法。 此处对 <code>setState()</code> 的任何调用都将触发组件的重新渲染。 在此方法中调用 API 并用 API​​ 返回的数据设置 state 时，一旦收到数据，它将自动触发更新。</p>
<hr>
<p><code>componentDidMount()</code> 中有一个模拟 API 调用。 它在 2.5 秒后设置 state，以模拟调用服务器检索数据。 本示例请求站点的当前活动用户总数。 在 render 方法中，把 <code>activeUsers</code> 渲染到文字 <code>Active Users:</code> 后的 <code>h1</code> 标签中。 观看预览中发生的事情，随意更改超时时间以查看不同的效果。</p>
<h3 id="34-添加事件侦听器"><a href="#34-添加事件侦听器" class="headerlink" title="34. 添加事件侦听器"></a>34. 添加事件侦听器</h3><p><code>componentDidMount()</code> 方法也是添加特定功能所需的任何事件监听器的最佳位置。 React 提供了一个合成事件系统，它封装了浏览器中的事件系统。 这意味着，不管用户用的是什么浏览器，合成事件系统的行为都完全相同 – 即使不同浏览器之间的本地事件的行为可能不同。</p>
<p>之前已经接触了一些合成事件处理程序，如<code>onClick()</code>。 React 的合成事件系统非常适合用于在 DOM 元素上管理的大多数交互。 但是，如果要将事件处理程序附加到 document 或 window 对象，则必须直接执行此操作。</p>
<hr>
<p>在 <code>componentDidMount()</code> 方法中为 <code>keydown</code> 事件添加事件监听器，并让这些事件触发回调 <code>handleKeyPress()</code>。 可以使用 <code>document.addEventListener()</code>，它将事件（用引号括起来）作为第一个参数，将回调作为第二个参数。</p>
<p>然后，在 <code>componentWillUnmount()</code> 中移除相同的事件监听器。 可以把相同的参数传递给 <code>document.removeEventListener()</code>。 在卸载和销毁 React 组件之前，最好在这个生命周期方法中对它们进行清理。 移除事件监听器就是这样一个清理操作的例子。</p>
<h3 id="35-使用-shouldComponentUpdate-优化重新渲染"><a href="#35-使用-shouldComponentUpdate-优化重新渲染" class="headerlink" title="35. 使用 shouldComponentUpdate 优化重新渲染"></a>35. 使用 shouldComponentUpdate 优化重新渲染</h3><p>到目前为止，如果任何组件接收到新的 <code>state</code> 或新的 <code>props</code>，它会重新渲染自己及其所有子组件。 这通常是好的。 但是 React 提供了一种生命周期方法，当子组件接收到新的 <code>state</code> 或 <code>props</code> 时，可以调用该方法，并特别声明组件是否应该更新。 这个方法就是 <code>shouldComponentUpdate()</code>，它将 <code>nextProps</code> 和 <code>nextState</code> 作为参数。</p>
<p>这种方法是优化性能的有效方法。 例如，默认行为是，当组件接收到新的 <code>props</code> 时，即使 <code>props</code> 没有改变，它也会重新渲染。 可以通过使用 <code>shouldComponentUpdate()</code> 比较 <code>props</code> 来防止这种情况发生。 该方法必须返回一个 <code>boolean</code>（布尔值），该值告诉 React 是否更新组件。 可以比较当前的 props（<code>this.props</code>）和下一个 props（<code>nextProps</code>），以确定你是否需要更新，并相应地返回 <code>true</code> 或 <code>false</code>。</p>
<hr>
<p>将 <code>shouldComponentUpdate()</code> 方法添加到名为 <code>OnlyEvens</code> 的组件中。 目前，该方法返回 <code>true</code>，因此每次收到新的 <code>props</code> 时，<code>OnlyEvens</code> 都会重新渲染。 修改该方法，以便 <code>OnlyEvens</code> 仅在其新 props 的 <code>value</code> 为偶数时更新。 单击 <code>Add</code> 按钮，在触发其他生命周期钩子时，在浏览器控制台中查看事件的顺序。</p>
<h3 id="36-介绍内联样式"><a href="#36-介绍内联样式" class="headerlink" title="36. 介绍内联样式"></a>36. 介绍内联样式</h3><p>如果从样式表导入样式，它就没有太大的不同。 使用 <code>className</code> 属性将 class 应用于 JSX 元素，并将样式应用于样式表中的 class。 另一种选择是使用内联样式，这在 ReactJS 开发中非常常见。</p>
<p>将内联样式应用于 JSX 元素，类似于在 HTML 中的操作方式，但有一些 JSX 差异。 以下是 HTML 中内联样式的示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div style=<span class="string">&quot;color: yellow; font-size: 16px&quot;</span>&gt;<span class="title class_">Mellow</span> <span class="title class_">Yellow</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>JSX 元素使用 <code>style</code> 属性，但是鉴于 JSX 的编译方式，不能将值设置为 <code>string</code>（字符串）。 相反，你应该将其设置为等于 JavaScript <code>object</code> 。 如下所示：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;<span class="attr">color</span>: <span class="string">&quot;yellow&quot;</span>, <span class="attr">fontSize</span>: <span class="number">16</span>&#125;&#125;&gt;<span class="title class_">Mellow</span> <span class="title class_">Yellow</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>注意到如何驼峰拼写 <code>fontSize</code> 属性了吗？ 这是因为 React 不接受样式对象中的 kebab-case 键。 React 将在 HTML 中为应用正确的属性名称。</p>
<hr>
<p>在代码编辑器中给 <code>div</code> 添加一个 <code>style</code> 属性，将文本颜色设置为红色，字体大小设置为 <code>72px</code>。</p>
<p>请注意，可以选择将字体大小设置为数字，省略单位 <code>px</code>，或者将其写为 <code>72px</code>。</p>
<h3 id="37-在-React-中添加内联样式"><a href="#37-在-React-中添加内联样式" class="headerlink" title="37. 在 React 中添加内联样式"></a>37. 在 React 中添加内联样式</h3><p>在上一次挑战中，你可能已经注意到，除了设置为 JavaScript 对象的 <code>style</code> 属性之外，与 HTML 内联样式相比，React 的内联样式还有其他几个语法差异。 首先，某些 CSS 样式属性的名称使用驼峰式命名。 例如，最后一个挑战用 <code>fontSize</code> 而不是 <code>font-size</code> 来设置字体的大小。 对于 JavaScript 对象属性来说，像 <code>font-size</code> 这样的连字符命名是无效的语法，所以 React 使用驼峰式命名。 通常，任何连字符的 style 属性在 JSX 中都是使用驼峰式命名的。</p>
<p>除非另有规定，否则所有属性值长度单位（如 <code>height</code>、<code>width</code> 和 <code>fontSize</code>）都假定为 <code>px</code>。 例如，如果要使用 <code>em</code>，可以用引号将值和单位括起来，例如 <code>&#123;fontSize: &quot;4em&quot;&#125;</code>。 除了默认为 <code>px</code> 的长度值之外，所有其他属性值都应该用引号括起来。</p>
<hr>
<p>如果你有大量样式，你可以将样式 <code>object</code>（对象）分配给一个常量，以保持代码组织有序。 在文件顶部将你的样式声明为全局变量。 定义一个 <code>styles</code> 常量，并将其声明为具有三个样式属性及对应值的 <code>object</code>（对象）。 使 <code>div</code> 的文字颜色为 <code>purple</code>、字体大小为 <code>40</code>、边框为 <code>2px solid purple</code>。 然后设置 <code>style</code> 属性，使其等于 <code>styles</code> 常量。</p>
<h3 id="38-在-React-Render-方法中使用-JavaScript"><a href="#38-在-React-Render-方法中使用-JavaScript" class="headerlink" title="38. 在 React Render 方法中使用 JavaScript"></a>38. 在 React Render 方法中使用 JavaScript</h3><p>在之前的挑战中，你学习了如何使用大括号 <code>&#123; &#125;</code> 将 JavaScript 代码插入到 JSX 代码中，用于访问 props、传递 props、访问 state、在代码中插入注释以及最近学习的定制组件样式等任务。 这些都是将 JavaScript 放在 JSX 中的常见用例，但是在 React 组件中使用 JavaScript 代码还有其他方式。</p>
<p>在 <code>render</code> 方法中编写 JavaScript，可以把 JavaScript 直接放在 <code>return</code> 语句之前，而<em><strong>不必</strong></em>将其插入大括号中。 这是因为它还不在 JSX 代码中。 如果之后想在 <code>return</code> 语句中的 JSX 代码<em>里面</em>使用变量时，可以将变量名放在大括号中。</p>
<hr>
<p>在提供的代码中，<code>render</code> 方法中有一个包含 20 个短语的数组，用于表示 20 世纪 80 年代经典魔术八球玩具中的答案。 绑定 <code>ask</code> 方法到按钮的单击事件，每次单击该按钮时，将生成随机数并将其存储为 state 中的 <code>randomIndex</code>。 在第 52 行，删除字符串 <code>change me!</code> 并重新分配 <code>answer</code> 常量，以便每次组件更新时，代码随机访问 <code>possibleAnswers</code> 数组的不同值。 最后，在 <code>p</code> 标签内插入 <code>answer</code> 常量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inputStyle = &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">235</span>,</span><br><span class="line">  <span class="attr">margin</span>: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MagicEightBall</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">userInput</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">randomIndex</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ask</span> = <span class="variable language_">this</span>.<span class="property">ask</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">ask</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">userInput</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">randomIndex</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">20</span>),</span><br><span class="line">        <span class="attr">userInput</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">userInput</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> possibleAnswers = [</span><br><span class="line">      <span class="string">&#x27;It is certain&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;It is decidedly so&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Without a doubt&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Yes, definitely&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;You may rely on it&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;As I see it, yes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Outlook good&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Yes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Signs point to yes&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Reply hazy try again&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Ask again later&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Better not tell you now&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Cannot predict now&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Concentrate and ask again&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;Don&#x27;t count on it&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;My reply is no&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;My sources say no&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Most likely&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Outlook not so good&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Very doubtful&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">const</span> answer = possibleAnswers[<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">randomIndex</span>]; <span class="comment">// 修改这一行</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.userInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;inputStyle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.ask&#125;</span>&gt;</span>Ask the Magic Eight Ball!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Answer:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 修改这行下面的代码 */&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;answer&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;/* 修改这行上面的代码 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="39-使用-If-Else-条件进行渲染"><a href="#39-使用-If-Else-条件进行渲染" class="headerlink" title="39. 使用 If-Else 条件进行渲染"></a>39. 使用 If-Else 条件进行渲染</h3><p>使用 JavaScript 控制渲染视图的另一个应用是按条件渲染元素。 当条件为真时，将呈现一个视图， 反之，则呈现另一种视图。 可以在 React 组件的 <code>render()</code> 方法中使用的标准 <code>if/else</code> 语句来实现这一点。</p>
<hr>
<p>MyComponent 的 state 中包含一个 <code>boolean</code>（布尔值），用于跟踪是否要在 UI 中显示某个元素。 <code>button</code> 切换此值的状态。 目前，它每次都呈现相同的 UI。 用 <code>if/else</code> 语句重写 <code>render()</code> 方法，如果 <code>display</code> 为 <code>true</code> 则返回当前标记。 否则，返回不带 <code>h1</code> 元素的标记。</p>
<p><strong>注意：</strong> 写 <code>if/else</code> 语句才能通过测试， 使用三元运算符是不会通过的。</p>
<h3 id="40-使用-amp-amp-获得更简洁的条件"><a href="#40-使用-amp-amp-获得更简洁的条件" class="headerlink" title="40. 使用 &amp;&amp; 获得更简洁的条件"></a>40. 使用 &amp;&amp; 获得更简洁的条件</h3><p><code>if/else</code> 语句在上一次挑战中是有效的，但是有一种更简洁的方法可以达到同样的结果。 假设正在跟踪组件中的几个条件，并且希望根据这些条件中的每一个来渲染不同的元素。 如果你写了很多 <code>else if</code> 语句来返回稍微不同的 UI，你可能会写很多重复代码，这就留下了出错的空间。 相反，你可以使用 <code>&amp;&amp;</code> 逻辑运算符以更简洁的方式执行条件逻辑。 这是完全可行的，因为你希望检查条件是否为 <code>true</code>。如果是，则返回一些标记。 下面是一个示例：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;condition &amp;&amp; <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>markup<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>condition</code> 为 <code>true</code>，则返回标记。 如果条件为 <code>false</code> ，则在评估 <code>condition</code> 后操作将立即返回 <code>false</code>，并且不返回任何内容。 可以将这些语句直接包含在 JSX 中，并通过在每个条件后面写 <code>&amp;&amp;</code> 来将多个条件串在一起。 这允许你在 <code>render()</code> 方法中处理更复杂的条件逻辑，而无需重复大量代码。</p>
<hr>
<p>再来看看前面的示例，<code>h1</code> 还是在 <code>display</code> 为 <code>true</code> 时渲染，但使用 <code>&amp;&amp;</code> 逻辑运算符代替 <code>if/else</code> 语句。</p>
<h3 id="41-使用三元表达式进行条件渲染"><a href="#41-使用三元表达式进行条件渲染" class="headerlink" title="41. 使用三元表达式进行条件渲染"></a>41. 使用三元表达式进行条件渲染</h3><p>在继续使用动态渲染技术之前，还有最后一种方法可以渲染想要的东西，它使用内置的 JavaScript 条件：三元运算符。 三元运算符经常被用作 JavaScript 中 <code>if/else</code> 语句的缩写。 它们不像传统的 <code>if/else</code> 语句那样强大，但是在 React 开发人员中非常流行， 原因之一就是 JSX 的编译原理，<code>if/else</code> 语句不能直接插入到 JSX 代码中。 可能你在前几个挑战就注意到了这一点——当需要 <code>if/else</code> 语句时，它总是在 <code>return</code> 语句的<em>外面</em>。 如果想在 JSX 中实现条件逻辑，三元表达式是一个很好的选择。 回想一下，三元运算符有三个部分，但是可以将多个三元表达式组合在一起。 以下是基本语法：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">condition ? expressionIfTrue : expressionIfFalse;</span><br></pre></td></tr></table></figure>

<hr>
<p>代码编辑器在 <code>CheckUserAge</code> 组件的 <code>render()</code> 方法中定义了三个常量， 它们分别是 <code>buttonOne</code>、<code>buttonTwo</code> 和 <code>buttonThree</code>。 每个都分配了一个表示按钮元素的简单 JSX 表达式。 首先，使用 <code>input</code> 和 <code>userAge</code> 初始化 <code>CheckUserAge</code> 的 state，并将其值设置为空字符串。</p>
<p>一旦组件将信息渲染给页面，用户应该有一种方法与之交互。 在组件的 <code>return</code> 语句中，设置一个实现以下逻辑的三元表达式：当页面首次加载时，将提交按钮 <code>buttonOne</code> 渲染到页面。 然后，当用户输入年龄并点击该按钮时，根据年龄渲染不同的按钮。 如果用户输入的数字小于<code>18</code>，则渲染<code>buttonThree</code>。 如果用户输入的数字大于或等于<code>18</code>，则渲染<code>buttonTwo</code>。</p>
<h3 id="42-使用-Props-有条件地渲染"><a href="#42-使用-Props-有条件地渲染" class="headerlink" title="42. 使用 Props 有条件地渲染"></a>42. 使用 Props 有条件地渲染</h3><p>到目前为止，你已经了解了如何使用 <code>if/else</code>、<code>&amp;&amp;</code> 和三元运算符（<code>condition ? expressionIfTrue : expressionIfFalse</code>）来决定渲染什么和何时渲染。 然而，还有一个重要的话题需要讨论，它可以让你将这些概念中的一个或所有与另一个强大的 React 特性结合起来：props。 使用 props 有条件地渲染代码对于 React 开发人员来说非常常见——也就是说，他们使用给定 props 的值来自动决定要渲染什么。</p>
<p>在这个挑战中，将设置一个子组件来根据 props 做出渲染决定。 可以使用三元运算符，但是可以看到过去几个挑战中涵盖的其他几个概念在这种情况下可能同样有用。</p>
<hr>
<p>代码编辑器有两个部分定义了的组件：一个名为 <code>GameOfChance</code> 的父组件和一个名为 <code>Results</code> 的子组件。 它们被用来创建一个简单的游戏，用户按下按钮来看它们是赢还是输。</p>
<p>首先，需要一个简单的表达式，每次运行时都会随机返回一个不同的值。 可以使用 <code>Math.random()</code>。 每次调用此方法时，此方法返回 <code>0</code>（包括）和 <code>1</code>（不包括）之间的值。 因此，对于 50/50 的几率，请在表达式中使用 <code>Math.random() &gt;= .5</code>。 从统计学上讲，这个表达式有 50％ 的几率返回 <code>true</code>，另外 50％ 返回 <code>false</code>。 在 render 方法里，用此表达式替换 <code>null</code> 以完成变量声明。</p>
<p>现在你有了一个表达式，可以使用该表达式在代码中做出随机决策。 接下来，需要实现此功能。 将 <code>Results</code> 组件渲染为 <code>GameOfChance</code> 的子 组件，并将 <code>expression</code> 作为名为 <code>fiftyFifty</code> 的 prop 传入 。 在 <code>Results</code> 组件中，编写一个三元表达式来渲染 <code>h1</code> 元素的文本。<code>GameOfChance</code> 传来的 prop <code>fiftyFifty</code> 来决定渲染文本 <code>You Win!</code> 还是 <code>You Lose!</code>。 最后，确保 <code>handleClick()</code> 方法正确计算每个回合，以便用户知道他们玩过多少次。 这也可以让用户知道组件实际上已经更新，以防他们连续赢两次或输两次时自己不知道。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Results</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#123;<span class="comment">/* 修改这行下面的代码 */</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.fiftyFifty ? &quot;You Win!&quot; : &quot;You Lose!&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#123;<span class="comment">/* 修改这行上面的代码 */</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameOfChance</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="number">1</span> <span class="comment">// change code here</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> expression = <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt;= <span class="number">0.5</span>; <span class="comment">// 修改这一行</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Play Again<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 修改这行下面的代码 */&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Results</span> <span class="attr">fiftyFifty</span>=<span class="string">&#123;expression&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 修改这行上面的代码 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#x27;Turn: &#x27; + this.state.counter&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="43-根据组件状态有条件地更改内联-CSS"><a href="#43-根据组件状态有条件地更改内联-CSS" class="headerlink" title="43. 根据组件状态有条件地更改内联 CSS"></a>43. 根据组件状态有条件地更改内联 CSS</h3><p>此时，已经看到了一些条件渲染的应用程序和内联样式的使用。 这里还有一个将这两个主题结合在一起的例子。 你也可以根据 React 组件的 state 有条件地渲染 CSS。 要执行此操作，请检查条件，如果满足该条件，则修改在 render 方法中分配给 JSX 元素的样式对象。</p>
<p>理解这个模式很重要，因为相比传统的方式（这在 jQuery 中非常常见），直接修改 DOM 元素来应用样式的方法是一个戏剧性的转变。 在该方法中，必须跟踪元素何时更改并直接处理实际操作。 跟踪更改可能变得很困难，可能会使 UI无法预测。 当根据一个条件设置一个样式对象时，描述了 UI 作为应用程序的状态函数应当如何展现。 如此便有一个清晰的单向流动的信息流。 这是使用 React 编写应用程序时的首选方法。</p>
<hr>
<p>代码编辑器有一个简单的带有边框样式的受控 input 组件。 如果用户在输入框中键入超过 15 个字符的文本，希望将此边框变成红色。 添加一个条件来检查这一点，如果条件有效，则将 input 的边框样式设置为<code>3px solid red</code>。 可以通过在 input 中输入文本来检测它。</p>
<h3 id="44-使用-Array-map-动态渲染元素"><a href="#44-使用-Array-map-动态渲染元素" class="headerlink" title="44. 使用 Array.map() 动态渲染元素"></a>44. 使用 Array.map() 动态渲染元素</h3><p>条件渲染很有用，但是可能需要组件来渲染未知数量的元素。 通常在响应式编程中，程序员在应用程序运行时之前无法知道其 state，因为这在很大程度上取决于用户与该程序的交互。 程序员需要提前编写代码来正确处理未知状态。 在 React 中使用 <code>Array.map()</code> 阐明了这个概念。</p>
<p>例如，创建一个简单的 “To Do List” 应用程序。 作为程序员，你无法知道用户可能在其列表中有多少项。 需要设置组件，以便在使用该程序的人决定今日待办事项之前动态渲染列表元素的正确数量。</p>
<hr>
<p>代码编辑器完成了 <code>MyToDoList</code> 组件的大部分设置。 如果完成了受控表单挑战，这些代码中的一些应该看起来很熟悉。 你会注意到一个 <code>textarea</code> 和一个 <code>button</code>，以及一些跟踪它们状态的方法，但是页面当前还没有任何东西被渲染。</p>
<p>在 <code>constructor</code> 中，创建一个 <code>this.state</code> 对象并定义两个 state：<code>userInput</code> 应该初始化为空字符串，<code>toDoList</code> 应该初始化为空数组。 接下来，在 <code>render()</code> 方法中删除 <code>items</code> 变量的 <code>null</code> 值。 取而代之的是，将存储在组件内部 state 中的 <code>toDoList</code> 数组一一遍历，并相应地动态呈现在 <code>li</code> 元素中。 尝试在 <code>textarea</code> 中输入 <code>eat, code, sleep, repeat</code>，然后点击按钮，看看会发生什么。</p>
<p><strong>注意：</strong> 像这样的映射操作创建的所有兄弟子元素都需要提供唯一的 <code>key</code> 属性。 别担心，这是下一个挑战的主题。</p>
<h3 id="45-给同级元素一个唯一的键属性"><a href="#45-给同级元素一个唯一的键属性" class="headerlink" title="45. 给同级元素一个唯一的键属性"></a>45. 给同级元素一个唯一的键属性</h3><p>上一个挑战展示了如何使用 <code>map</code> 方法根据用户输入动态渲染多个元素。 然而，这个例子中缺少一个重要的部分。 创建元素数组时，每个元素都需要一个设置为唯一值的 <code>key</code> 属性。 React 使用这些键来跟踪哪些项目被添加、更改或删除。 这有助于在以任何方式修改列表时提高重新渲染过程的效率。</p>
<p><strong>注意：</strong> 键只需要在兄弟元素之间是唯一的，它们不需要在应用程序中是全局唯一的。</p>
<hr>
<p>代码编辑器有一个数组，它包含一些前端框架和一个名为 <code>Frameworks()</code> 的无状态函数组件。 <code>Frameworks()</code> 需要将数组映射到无序列表，就像上一个挑战一样。 完成 <code>map</code> 回调，为 <code>frontEndFrameworks</code> 数组中的每个框架返回一个 <code>li</code> 元素。 这次，确保给每个 <code>li</code> 的 <code>key</code> 属性设置一个唯一的值。 <code>li</code> 元素还应该包含来自 <code>frontEndFrameworks</code> 的文本。</p>
<p>通常，希望使 key 能唯一标识要渲染的元素。 数组索引可以是最后的选择，但通常你应该尝试使用唯一标识。</p>
<h3 id="46-使用-Array-Filter-动态过滤数组"><a href="#46-使用-Array-Filter-动态过滤数组" class="headerlink" title="46. 使用 Array.Filter() 动态过滤数组"></a>46. 使用 Array.Filter() 动态过滤数组</h3><p><code>map</code> 数组方法是一个强大的工具，在使用 React 时经常使用。 与 <code>map</code> 相关的另一种方法是 <code>filter</code>，它根据条件过滤数组的内容，然后返回一个新数组。 例如，如果有一个 users 数组，每个数组元素都有一个可以设置为 <code>true</code> 或 <code>false</code> 的 <code>online</code> 属性，可以这样只过滤那些在线的用户：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> onlineUsers = users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">online</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>在代码编辑器中，<code>MyComponent</code> 的 <code>state</code> 被初始化为一个用户数组。 有些用户在线，有些则没有。 过滤数组，以便只查看在线用户。 要执行此操作，请首先使用 <code>filter</code> 返回仅包含 <code>online</code> 属性为 <code>true</code> 的用户的新数组。 然后，在 <code>renderOnline</code> 变量中，映射已过滤的数组，并为包含其 <code>username</code> 文本的每个用户返回 <code>li</code> 元素。 确保包含一个唯一的 <code>key</code>，就像上一个挑战一样。</p>
<h3 id="47-用-renderToString-在服务器上渲染-React"><a href="#47-用-renderToString-在服务器上渲染-React" class="headerlink" title="47. 用 renderToString 在服务器上渲染 React"></a>47. 用 renderToString 在服务器上渲染 React</h3><p>到目前为止，已经能够在客户端上渲染 React 组件， 一般来说我们都是这么做的。 然而，在一些用例中，需要在服务器上渲染一个 React 组件。 由于 React 是一个 JavaScript 视图库，所以通常使用 Node 让 JavaScript 运行在服务器上。 事实上，React 提供了一个可用于此目的的 <code>renderToString()</code> 方法。</p>
<p>有两个关键原因可以解释为什么服务器上的渲染可能会在真实世界的应用程序中使用。 首先，如果不这样做，当 React 应用程序最初加载到浏览器时，它将包含一个代码量很少的 HTML 文件和一大堆 JavaScript。 这对于搜索引擎来说可能不太理想，因为它们试图为网页内容生成索引，以便人们可以找到这个应用。 如果在服务器上渲染初始 HTML 标记并将其发送到客户端，则初始页面加载的内容包含搜索引擎可以抓取的所有页面标记。 其次，这创造了更快的初始页面加载体验，因为渲染的 HTML 代码量要比整个应用程序的 JavaScript 代码小。 React 仍然能够识别你的应用并在初始加载后进行管理。</p>
<hr>
<p><code>renderToString()</code> 方法由 <code>ReactDOMServer</code> 提供，在这里已为你定义成全局变量。 这个方法接收一个 React 元素作为参数。 用它来把 <code>App</code> 渲染成字符串。</p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Front End Development Libraries</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Exercise — Build a Technical Documentation Page</title>
    <url>/project-exercise-%E2%80%94-build-a-technical-documentation-page/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h5 id="Build-a-Technical-Documentation-Page-——-Test"><a href="#Build-a-Technical-Documentation-Page-——-Test" class="headerlink" title="Build a Technical Documentation Page —— Test"></a>Build a Technical Documentation Page —— Test</h5><h5 id="Objective"><a href="#Objective" class="headerlink" title="Objective:"></a><strong>Objective:</strong></h5><blockquote>
<p>Build an app that is functionally similar to <a href="https://technical-documentation-page.freecodecamp.rocks/">https://technical-documentation-page.freecodecamp.rocks</a></p>
</blockquote>
<span id="more"></span>

<h5 id="User-Stories"><a href="#User-Stories" class="headerlink" title="User Stories:"></a><strong>User Stories:</strong></h5><ol>
<li>You can see a <code>main</code> element with a corresponding <code>id=&quot;main-doc&quot;</code>, which contains the page’s main content (technical documentation)</li>
<li>Within the <code>#main-doc</code> element, you can see several <code>section</code> elements, each with a class of <code>main-section</code>. There should be a minimum of five</li>
<li>The first element within each <code>.main-section</code> should be a <code>header</code> element, which contains text that describes the topic of that section.</li>
<li>Each <code>section</code> element with the class of <code>main-section</code> should also have an <code>id</code> that corresponds with the text of each <code>header</code> contained within it. Any spaces should be replaced with underscores (e.g. The section that contains the header “JavaScript and Java” should have a corresponding <code>id=&quot;JavaScript_and_Java&quot;</code>)</li>
<li>The <code>.main-section</code> elements should contain at least ten <code>p</code> elements total (not each)</li>
<li>The <code>.main-section</code> elements should contain at least five <code>code</code> elements total (not each)</li>
<li>The <code>.main-section</code> elements should contain at least five <code>li</code> items total (not each)</li>
<li>You can see a <code>nav</code> element with a corresponding <code>id=&quot;navbar&quot;</code></li>
<li>The navbar element should contain one <code>header</code> element which contains text that describes the topic of the technical documentation</li>
<li>Additionally, the navbar should contain link (<code>a</code>) elements with the class of <code>nav-link</code>. There should be one for every element with the class <code>main-section</code></li>
<li>The <code>header</code> element in the <code>#navbar</code> must come before any link (<code>a</code>) elements in the navbar</li>
<li>Each element with the class of <code>nav-link</code> should contain text that corresponds to the <code>header</code> text within each <code>section</code> (e.g. if you have a “Hello world” section/header, your navbar should have an element which contains the text “Hello world”)</li>
<li>When you click on a navbar element, the page should navigate to the corresponding section of the <code>#main-doc</code> element (e.g. If you click on a <code>.nav-link</code> element that contains the text “Hello world”, the page navigates to a <code>section</code> element with that id, and contains the corresponding header)</li>
<li>On regular sized devices (laptops, desktops), the element with <code>id=&quot;navbar&quot;</code> should be shown on the left side of the screen and should always be visible to the user</li>
<li>Your technical documentation should use at least one media query</li>
</ol>
<blockquote>
<p><strong>Note:</strong> Be sure to add <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code> in your HTML to link your stylesheet and apply your CSS</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;navbar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span>Js<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Introduction&quot;</span>&gt;</span>Introduction<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#What_you_should_already_know&quot;</span>&gt;</span>What you should already know<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#JavaScript_and_Java&quot;</span>&gt;</span>JavaScript and Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Hello_world&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#Declaring_variables&quot;</span>&gt;</span>Declaring variables<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">&quot;main-doc&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main-section&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Introduction&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>Introduction<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>JavaScript 是一种跨平台、面向对象的脚本语言。 它是一种小巧轻量级的语言。在主机环境中 （例如，Web浏览器），JavaScript可以连接到 其环境的对象，以提供对 他们。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>JavaScript 包含一个标准的对象库，例如 Array、 日期和数学，以及一组核心语言元素，例如 运算符、控制结构和语句。核心JavaScript可以 通过补充它来扩展各种目的 附加对象;例如：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main-section&quot;</span> <span class="attr">id</span>= <span class="string">&quot;What_you_should_already_know&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>What you should already know<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>对互联网和万维网的一般了解 （万维网）。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>对互联网和万维网的一般了解 （万维网）。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>对互联网和万维网的一般了解 （万维网）。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>对互联网和万维网的一般了解 （万维网）。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>对互联网和万维网的一般了解 （万维网）。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>对互联网和万维网的一般了解 （万维网）。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>对互联网和万维网的一般了解 （万维网）。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main-section&quot;</span> <span class="attr">id</span>=<span class="string">&quot;JavaScript_and_Java&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>JavaScript and Java<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main-section&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Hello_world&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">code</span>&gt;</span>&quot;function greetMe(yourName) &#123; alert(&quot;Hello &quot; + yourName); &#125; greetMe(&quot;World&quot;); &quot;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">code</span>&gt;</span>var x = 32;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main-section&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Declaring_variables&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>Declaring variables<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">290px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4d4e53</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Open Sans&#x27;</span>, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#navbar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">290px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.8em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: thin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main-doc</span> <span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">88%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4d4e53</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4d4e53</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main-doc</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">310px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">110px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4d4e53</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.96em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">white-space</span>: pre-line;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">word-break</span>: normal;</span><br><span class="line">  <span class="attribute">word-wrap</span>: normal;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">815px</span>) &#123;</span><br><span class="line">  <span class="comment">/* For mobile phones: */</span></span><br><span class="line">  <span class="selector-id">#navbar</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">207px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#navbar</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">275px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#main-doc</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">270px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">400px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#main-doc</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">233px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Project Exercise</category>
        <category>Primary Program</category>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>Project Exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>Front End Development Libraries(一)</title>
    <url>/front-end-development-libraries-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Front-End-Development-Libraries"><a href="#freeCodeCamp-—-Front-End-Development-Libraries" class="headerlink" title="freeCodeCamp —- Front End Development Libraries"></a>freeCodeCamp —- Front End Development Libraries</h1><hr>
<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><span id="more"></span>

<h3 id="1-使用Bootstrap-Fluid-容器实现响应式设计"><a href="#1-使用Bootstrap-Fluid-容器实现响应式设计" class="headerlink" title="1. 使用Bootstrap Fluid 容器实现响应式设计"></a>1. 使用Bootstrap Fluid 容器实现响应式设计</h3><p>Bootstrap 会根据屏幕大小来动态调整 HTML 元素的大小————因此称为 Responsive Design（响应式设计）。</p>
<!--more-->

<p>通过响应式设计，我们将无需额外设计一个手机版的网页， 因为它在任何尺寸的屏幕上看起来都很棒。</p>
<p>任何 Web 应用，都可以通过添加如下代码到 HTML 顶部来引入 Bootstrap 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>不过在这里，已经预先为此页面添加了上述代码。 注意使用 <code>&gt;</code> 或者 <code>/&gt;</code> 两种方式闭合 <code>link</code> 标签都是可行的。</p>
<p>首先，我们应该将所有 HTML（ <code>link</code> 标签和 <code>style</code> 元素除外）嵌套在带有 <code>container-fluid</code> class 的 <code>div</code> 元素里面。</p>
<h3 id="2-使图片自适应移动端"><a href="#2-使图片自适应移动端" class="headerlink" title="2. 使图片自适应移动端"></a>2. 使图片自适应移动端</h3><p>首先，在已有的图片下面添加一张新的图片。 将新图片的 <code>src</code> 属性设置为 <code>https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg</code>。</p>
<p>如果图片的大小恰恰和我们手机屏幕尺寸大小一样自然是最好的。</p>
<p>幸运的是，现在通过 Bootstrap，我们仅仅只需要为 image 标签上设置 class 属性为 <code>img-responsive</code> ， 就可以让它完美地适应你的页面的宽度了。</p>
<h3 id="3-用-Bootstrap-居中文本"><a href="#3-用-Bootstrap-居中文本" class="headerlink" title="3. 用 Bootstrap 居中文本"></a>3. 用 Bootstrap 居中文本</h3><p>可以使用 Bootstrap 将顶部的元素居中来美化页面。 只需要将 <code>h2</code> 元素的 class 属性设置为 <code>text-center</code> 就可以实现。</p>
<p>记住：可以为一个元素添加多个 classes ，class 间通过空格分隔，就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;red-text text-center&quot;</span>&gt;</span>your text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-创建一个-Bootstrap-按钮"><a href="#4-创建一个-Bootstrap-按钮" class="headerlink" title="4. 创建一个 Bootstrap 按钮"></a>4. 创建一个 Bootstrap 按钮</h3><p>Bootstrap 的 <code>button</code> 元素有着独有的、比默认 HTML 按钮更好的样式风格。</p>
<p>在较大的小猫图片下方创建新的 <code>button</code> 元素。 为它添加 <code>btn</code> 与 <code>btn-default</code> 两个 classes 和 <code>Like</code> 文本。</p>
<h3 id="5-创建一个-Bootstrap-块级元素按钮"><a href="#5-创建一个-Bootstrap-块级元素按钮" class="headerlink" title="5. 创建一个 Bootstrap 块级元素按钮"></a>5. 创建一个 Bootstrap 块级元素按钮</h3><p>一般情况下，<code>btn</code> 和 <code>btn-default</code> 两个 classes 修饰的 <code>button</code> 元素宽度与它包含的文本相同， 举个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个按钮的宽度应该和文本 <code>Submit</code> 的宽度相同。</p>
<p>提交</p>
<p>通过为按钮添加 class 属性 <code>btn-block</code> 使其成为块级元素，按钮会伸展并填满页面的整个水平空间，后续的元素会流到这个块级元素的下方，即 “另起一行”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-block&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个按钮会 100% 占满所有的可用宽度。</p>
<h3 id="6-体验-Bootstrap-按钮的不同主题"><a href="#6-体验-Bootstrap-按钮的不同主题" class="headerlink" title="6. 体验 Bootstrap 按钮的不同主题"></a>6. 体验 Bootstrap 按钮的不同主题</h3><p><code>btn-primary</code> class 的颜色是应用的主要颜色。 这样 “突出显示” 是引导用户按部就班进行操作的有效办法。</p>
<p>将按钮的 class 从 Bootstrap 的 <code>btn-default</code> 替换为 <code>btn-primary</code>。</p>
<p>注意：按钮仍然需要 <code>btn</code> 和 <code>btn-block</code> classes。</p>
<h3 id="7-可选操作样式-btn-info"><a href="#7-可选操作样式-btn-info" class="headerlink" title="7. 可选操作样式 btn-info"></a>7. 可选操作样式 btn-info</h3><p>Bootstrap 有着丰富的预定义按钮颜色。 浅蓝色的 <code>btn-info</code> class 通常用在备选操作上。</p>
<p>在 <code>Like</code> 按钮下方使用文本 <code>Info</code> 创建一个新的块级 Bootstrap 按钮，并向其中添加 Bootstrap 的 <code>btn-info</code> 类。</p>
<p>注意：这些按钮仍然需要 <code>btn</code> 和 <code>btn-block</code> class。</p>
<h3 id="8-使用-btn-danger-提示危险操作"><a href="#8-使用-btn-danger-提示危险操作" class="headerlink" title="8. 使用 btn-danger 提示危险操作"></a>8. 使用 btn-danger 提示危险操作</h3><p>Bootstrap 有着丰富的预定义按钮颜色。 红色 <code>btn-danger</code> class 用来提醒用户此行为具有破坏性，比如删除一张猫的图片。</p>
<p>创建一个带有文本 <code>Delete</code> 的按钮，给它设置 class <code>btn-danger</code>。</p>
<p>注意：这些按钮仍然需要 <code>btn</code> 和 <code>btn-block</code> class。</p>
<h3 id="9-使用-Bootstrap-Grid-并排放置元素"><a href="#9-使用-Bootstrap-Grid-并排放置元素" class="headerlink" title="9. 使用 Bootstrap Grid 并排放置元素"></a>9. 使用 Bootstrap Grid 并排放置元素</h3><p>Bootstrap 具有一套 12 列的响应式栅格系统，可以轻松地将多个元素放入一行并指定它们的相对宽度。 Bootstrap 的大部分 class 属性都可以应用在 <code>div</code> 元素上。</p>
<p>Bootstrap 有不同的列宽属性，它根据用户的屏幕宽度来使用相应的宽度。 比如，手机的屏幕窄，而笔记本电脑的屏幕更宽。</p>
<p>以 Bootstrap 的 <code>col-md-*</code> class 为例， 在这里， <code>md</code> 表示 medium （中等的）， 而 <code>*</code> 是一个数字，说明了这个元素占有多少个列宽度。 这个例子就是指定了中等大小屏幕（例如笔记本电脑）下元素所占的列宽度。</p>
<p>在 Cat Photo App 中，将使用 <code>col-xs-*</code> ， 其中 <code>xs</code> 是 extra small 的缩写 (比如窄屏手机屏幕)， <code>*</code> 是填写的数字，代表一行中的元素该占多少列宽。</p>
<p>将 <code>Like</code>、<code>Info</code> 和 <code>Delete</code> 三个按钮并排放入一个 <code>&lt;div class=&quot;row&quot;&gt;</code> 元素中，然后将每个按钮都各用一个 <code>&lt;div class=&quot;col-xs-4&quot;&gt;</code> 元素包裹起来。</p>
<p>当 <code>div</code> 元素设置了 <code>row</code> class 之后，那几个按钮便会嵌入其中了。</p>
<h3 id="10-替换自定义的-Bootstrap-样式"><a href="#10-替换自定义的-Bootstrap-样式" class="headerlink" title="10. 替换自定义的 Bootstrap 样式"></a>10. 替换自定义的 Bootstrap 样式</h3><p>现在可以清理一下之前代码，用 Bootstrap 的内置样式来替换之前定义的样式，这样 Cat Photo App 看起来更简洁些。</p>
<p>别担心——以后会有大把时间来自定义 CSS 样式的。</p>
<p>删除 <code>style</code> 元素里的 <code>.red-text</code>、<code>p</code> 和 <code>.smaller-image</code> CSS 声明，使 <code>style</code> 元素只留下 <code>h2</code> 和 <code>thick-green-border</code>。</p>
<p>删除包含死链接的 <code>p</code> 元素。 然后将 <code>h2</code> 的 <code>red-text</code> class 替换为 Bootstrap 的 <code>text-primary</code> class。</p>
<p>最后，从第一个 <code>img</code> 元素中删除 <code>smaller-image</code> class，并将其替换为 <code>img-responsive</code> class。</p>
<h3 id="11-使用-span-创建行内元素"><a href="#11-使用-span-创建行内元素" class="headerlink" title="11. 使用 span 创建行内元素"></a>11. 使用 span 创建行内元素</h3><p>通过使用行内元素 <code>span</code>，可以把不同的元素放在同一行，甚至能为一行的不同部分指定不同样式。</p>
<p>使用一个 <code>span</code> 元素，将文本 <code>love</code> 嵌入现在包含文本 <code>Things cats love</code> 的 <code>p</code> 元素中。 然后给 <code>span</code> 元素设置 class <code>text-danger</code>，使文本变成红色。</p>
<p>对含有文本 <code>Top 3 things cats hate</code> 的 <code>p</code> 元素这样处理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Top 3 things cats <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>hate:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-创建自定义标题"><a href="#12-创建自定义标题" class="headerlink" title="12. 创建自定义标题"></a>12. 创建自定义标题</h3><p>为 Cat Photo App 做一个简单的头部，把标题和惬意的猫咪图片放在同一行。</p>
<p>记住，由于 Bootstrap 使用了响应式栅格系统，可以很方便地把元素放到一行以及指定元素的相对宽度。 大部分的 Bootstrap 的 class 都能被用在 <code>div</code> 元素上。</p>
<p>把第一张图片和 <code>h2</code> 元素用一个简单的 <code>&lt;div class=&quot;row&quot;&gt;</code> 元素包裹起来。 再用 <code>&lt;div class=&quot;col-xs-8&quot;&gt;</code> 包裹 <code>h2</code> 元素，用 <code>&lt;div class=&quot;col-xs-4&quot;&gt;</code> 包裹我们的图片，这样它们就能位于同一行了。</p>
<p>注意现在图片是否与文字大小一致呢？</p>
<h3 id="13-在按钮中添加字体图标"><a href="#13-在按钮中添加字体图标" class="headerlink" title="13. 在按钮中添加字体图标"></a>13. 在按钮中添加字体图标</h3><p>Font Awesome 是一个非常便利的图标库。 我们可以通过 webfont 或矢量图的方式来使用这些图标。 这些图标就和字体一样， 不仅能通过像素单位指定它们的大小，它们也同样会继承父级 HTML 元素的字号。</p>
<p>可以将 Font Awesome 图标库添加至任何一个 web app 中，方法很简单，只需要在 HTML head 标签中添加以下代码即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://use.fontawesome.com/releases/v5.8.1/css/all.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个挑战中，我们已经为你在页面上添加好了 Font Awesome 图标库。</p>
<p><code>i</code> 元素原本是用来表示斜体文字内容的；不过现在，用它来表示图标也很常见。 只需要为 <code>i</code> 元素添加相应的 class 就可以让它展示图标，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-info-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时，我们也可以使用 <code>span</code> 元素来展示图标。</p>
<hr>
<p>请使用 Font Awesome 来为我们的点赞按钮添加一个 <code>thumbs-up</code> 图标，只需添加一个 class 包含 <code>fas</code> 和 <code>fa-thumbs-up</code> 的 <code>i</code> 元素即可。 同时，请记得保留图标之后的文字内容 <code>Like</code>。</p>
<h3 id="14-将字体图标添加到所有的按钮上"><a href="#14-将字体图标添加到所有的按钮上" class="headerlink" title="14.将字体图标添加到所有的按钮上"></a>14.将字体图标添加到所有的按钮上</h3><p>为 info 按钮添加 Font Awesome <code>info-circle</code> 图标，delete 按钮添加 <code>trash</code> 图标。</p>
<p><strong>Note:</strong> You can use either <code>i</code> or <code>span</code> elements to complete this challenge.</p>
<h3 id="15-响应式风格的单选按钮"><a href="#15-响应式风格的单选按钮" class="headerlink" title="15. 响应式风格的单选按钮"></a>15. 响应式风格的单选按钮</h3><p>Bootstrap 的 <code>col-xs-*</code> class 也可以用在 <code>form</code> 元素上！ 这样就可以在不关心屏幕大小的情况下，将的单选按钮均匀的平铺在页面上。</p>
<p>将所有单选按钮放入 <code>&lt;div class=&quot;row&quot;&gt;</code> 元素中。 再用 <code>&lt;div class=&quot;col-xs-6&quot;&gt;</code> 元素包裹每一个单选按钮。</p>
<p><strong>注意：</strong> 提醒一句，单选按钮是 type 为 <code>radio</code> 的 <code>input</code> 元素。</p>
<h3 id="16-响应式风格的复选框"><a href="#16-响应式风格的复选框" class="headerlink" title="16. 响应式风格的复选框"></a>16. 响应式风格的复选框</h3><p>Bootstrap 的 <code>col-xs-*</code> 可应用于所有的 <code>form</code> 元素上，包括复选框！ 这样就可以不必关注屏幕大小，均匀地把复选框放在页面上了。</p>
<hr>
<p>将所有三个复选框都放置于一个 <code>&lt;div class=&quot;row&quot;&gt;</code> 元素中。 然后分别把每个复选框都放置于一个 <code>&lt;div class=&quot;col-xs-4&quot;&gt;</code> 元素中。</p>
<h3 id="17-给表单输入框添加样式"><a href="#17-给表单输入框添加样式" class="headerlink" title="17. 给表单输入框添加样式"></a>17. 给表单输入框添加样式</h3><p>可以在 submit <code>button</code> 元素内加上 <code>&lt;i class=&quot;fa fa-paper-plane&quot;&gt;&lt;/i&gt;</code>，来添加 Font Awesome 的 <code>fa-paper-plane</code> 图标。</p>
<p>为表单的文本输入框（text input）设置 <code>form-control</code> class。 为表单的提交（submit）按钮设置 <code>btn btn-primary</code> class， 并为它加上 Font Awesome 的 <code>fa-paper-plane</code> 图标。</p>
<p>所有文本输入类的元素如 <code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 只要设置 <code>.form-control</code> class 就会占满100%的宽度。</p>
<h3 id="18-使用-Bootstrap-响应式排列表单元素"><a href="#18-使用-Bootstrap-响应式排列表单元素" class="headerlink" title="18. 使用 Bootstrap 响应式排列表单元素"></a>18. 使用 Bootstrap 响应式排列表单元素</h3><p>现在把表单里的 <code>input</code> 元素和 submit <code>button</code> （提交按钮）放在同一行。 跟着之前的做法来就行：准备好一个具有 <code>row</code> class 的 <code>div</code> 元素还有几个具有 <code>col-xs-*</code> class 的 <code>div</code> 元素。</p>
<p>先把表单的 text <code>input</code> （文本输入框）和 submit <code>button</code> （提交按钮）放进具有 <code>row</code> class 的 <code>div</code> 中。 再用 <code>col-xs-7</code> class 的 div 包裹表单的 text <code>input</code> （文本输入框）， <code>col-xs-5</code> class 的 <code>div</code> 包裹表单的 submit <code>button</code> （提交按钮）。</p>
<p>这是我们到目前为止 Cat Photo App 的最后一个挑战了。 祝你编码愉快。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">&quot;https://fonts.googleapis.com/css?family=Lobster&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">h2</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">font-family</span>: Lobster, Monospace;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.thick-green-border</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-color</span>: green;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-style</span>: solid;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-8&quot;&gt;</span><br><span class="line">      &lt;h2 class=&quot;text-primary text-center&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-4&quot;&gt;</span><br><span class="line">      &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;img-responsive thick-green-border&quot; src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;Three kittens running towards the camera.&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-4&quot;&gt;</span><br><span class="line">      &lt;button class=&quot;btn btn-block btn-primary&quot;&gt;&lt;i class=&quot;fa fa-thumbs-up&quot;&gt;&lt;/i&gt; Like&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-4&quot;&gt;</span><br><span class="line">      &lt;button class=&quot;btn btn-block btn-info&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt; Info&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-4&quot;&gt;</span><br><span class="line">      &lt;button class=&quot;btn btn-block btn-danger&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; Delete&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;p&gt;Things cats &lt;span class=&quot;text-danger&quot;&gt;love:&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;p&gt;Top 3 things cats hate:&lt;/p&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">  &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">        &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Indoor&lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">        &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-4&quot;&gt;</span><br><span class="line">        &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Loving&lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-4&quot;&gt;</span><br><span class="line">        &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-4&quot;&gt;</span><br><span class="line">        &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Crazy&lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-7&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-xs-5&quot;&gt;</span><br><span class="line">        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&lt;i class=&quot;fa fa-paper-plane&quot;&gt;&lt;/i&gt; Submit&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="19-创建一个-Bootstrap-标题"><a href="#19-创建一个-Bootstrap-标题" class="headerlink" title="19. 创建一个 Bootstrap 标题"></a>19. 创建一个 Bootstrap 标题</h3><p>现在，来运用 HTML、CSS 和 Bootstrap 从头开始做点东西。</p>
<p>接下来将会搭建一个 jQuery playground，以便在后续的 jQuery 课程中使用它。</p>
<p>首先，创建一个包含 <code>jQuery Playground</code> 文本内容的 <code>h3</code> 元素。</p>
<p>通过给 <code>h3</code> 元素设置 Bootstrap 的 <code>text-primary</code> class 属性来为其上色，然后添加 Bootstrap 的 <code>text-center</code> class 属性使其文本居中显示。</p>
<h3 id="20-将页面放在-container-fluid-div-中"><a href="#20-将页面放在-container-fluid-div-中" class="headerlink" title="20. 将页面放在 container-fluid div 中"></a>20. 将页面放在 container-fluid div 中</h3><p>现在确保页面所有内容都可以响应移动端。</p>
<p>将的 <code>h3</code> 元素内嵌进一个具有 <code>container-fluid</code> class 的<code>div</code> 元素中。</p>
<h3 id="21-将页面放在-container-fluid-div-中"><a href="#21-将页面放在-container-fluid-div-中" class="headerlink" title="21. 将页面放在 container-fluid div 中"></a>21. 将页面放在 container-fluid div 中</h3><p>现在确保页面所有内容都可以响应移动端。</p>
<p>将的 <code>h3</code> 元素内嵌进一个具有 <code>container-fluid</code> class 的<code>div</code> 元素中。</p>
<h3 id="22-分割-Bootstrap-Row"><a href="#22-分割-Bootstrap-Row" class="headerlink" title="22. 分割 Bootstrap Row"></a>22. 分割 Bootstrap Row</h3><p>现在已经有了一个 Bootstrap Row，把它分成两列。</p>
<p>在行内创建两个 class 属性为 <code>col-xs-6</code> 的 <code>div</code> 元素。</p>
<h3 id="23-创建-Bootstrap-Wells"><a href="#23-创建-Bootstrap-Wells" class="headerlink" title="23. 创建 Bootstrap Wells"></a>23. 创建 Bootstrap Wells</h3><p>Bootstrap 有一个叫作 <code>well</code> 的 class，作用是使界面更具层次感。</p>
<p>在每一个 class 属性为 <code>col-xs-6</code> 的 <code>div</code> 元素中都嵌入一个带有 <code>well</code> class 的 <code>div</code> 元素。</p>
<h3 id="24-在-Bootstrap-Wells-中添加元素"><a href="#24-在-Bootstrap-Wells-中添加元素" class="headerlink" title="24. 在 Bootstrap Wells 中添加元素"></a>24. 在 Bootstrap Wells 中添加元素</h3><p>现在的每一行的列都已经有了 <code>div</code> 元素。 这已经足够了， 现在让我们添加 <code>button</code> 元素吧。</p>
<p>每一个 class 属性为 <code>well</code> 的 <code>div</code> 元素内都应该放三个 <code>button</code> 元素。</p>
<h3 id="25-给-Bootstrap-按钮添加默认样式"><a href="#25-给-Bootstrap-按钮添加默认样式" class="headerlink" title="25. 给 Bootstrap 按钮添加默认样式"></a>25. 给 Bootstrap 按钮添加默认样式</h3><p>Bootstrap 还有另外一种按钮 class 属性叫做 <code>btn-default</code>。</p>
<p>为所有的 <code>button</code> 元素增加两个 class： <code>btn</code> 和 <code>btn-default</code>。</p>
<h3 id="26-用-jQuery-选择器给目标元素的添加-class"><a href="#26-用-jQuery-选择器给目标元素的添加-class" class="headerlink" title="26. 用 jQuery 选择器给目标元素的添加 class"></a>26. 用 jQuery 选择器给目标元素的添加 class</h3><p>并不是所有 class 属性都需要有对应的 CSS 样式。 有时候我们设置 class 只是为了更方便地在 jQuery 中选中这些元素。</p>
<p>为每一个 <code>button</code> 元素添加 <code>target</code> class。</p>
<h3 id="27-给-Bootstrap-元素添加-id-属性"><a href="#27-给-Bootstrap-元素添加-id-属性" class="headerlink" title="27. 给 Bootstrap 元素添加 id 属性"></a>27. 给 Bootstrap 元素添加 id 属性</h3><p>回忆一下，除了可以给元素添加 class 属性，我们还可以给元素设置 <code>id</code> 属性。</p>
<p>每个元素的 id 都必须是唯一的，并且在一个页面中只能使用一次。</p>
<p>让我们为每个 class 为 <code>well</code> 的 <code>div</code> 元素添加一个唯一的 id。</p>
<p>记住，可以这样给一个元素设置 id：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;center-well&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给左边的块设置 id 为 <code>left-well</code>。 给右边的块设置 id 为 <code>right-well</code>。</p>
<h3 id="28-给-Bootstrap-Wells-设置标签"><a href="#28-给-Bootstrap-Wells-设置标签" class="headerlink" title="28. 给 Bootstrap Wells 设置标签"></a>28. 给 Bootstrap Wells 设置标签</h3><p>为了让页面逻辑更清晰，每个 wells 都标上它们的 id 吧。</p>
<p>在 left-well 的上一层，class 属性为 <code>col-xs-6</code> 的 <code>div</code> 元素里面，增加一个文本为 <code>#left-well</code> 的 <code>h4</code> 元素。</p>
<p>在 right-well 的上一层，class 属性为 <code>col-xs-6</code> 的 <code>div</code> 元素里面，增加一个文本为 <code>#right-well</code> 的 <code>h4</code> 元素。</p>
<h3 id="29-给每个元素一个唯一的-id"><a href="#29-给每个元素一个唯一的-id" class="headerlink" title="29. 给每个元素一个唯一的 id"></a>29. 给每个元素一个唯一的 id</h3><p>也可以通过 jQuery 根据每个按钮唯一的 id 来定位出它们。</p>
<p>给每一个按钮设置唯一的 id，以 <code>target1</code> 开始，<code>target6</code> 结束。</p>
<p>确保 <code>target1</code> 到 <code>target3</code> 在 <code>#left-well</code> 之中，<code>target4</code> 到 <code>target6</code> 在 <code>#right-well</code> 之中。</p>
<h3 id="30-给-Bootstrap-按钮设置标签"><a href="#30-给-Bootstrap-按钮设置标签" class="headerlink" title="30. 给 Bootstrap 按钮设置标签"></a>30. 给 Bootstrap 按钮设置标签</h3><p>正如标注了每个 wells 一样，同样可以标注每一个按钮。</p>
<p>为每个 <code>button</code> 元素设置与其 id 选择器对应的文本。</p>
<h3 id="31-使用注释来说明代码"><a href="#31-使用注释来说明代码" class="headerlink" title="31. 使用注释来说明代码"></a>31. 使用注释来说明代码</h3><p>使用 jQuery 时，修改 HTML 元素时并不需要直接修改 HTML 代码。</p>
<p>必须确保让每个人都知道不应该直接修改此页面上的这些代码。</p>
<p>记住，可以在 <code>&lt;!--</code> 为开始，<code>--&gt;</code> 为结束的地方进行评论注释。</p>
<p>请你在 HTML 顶部加如下一段注释： <code>Code below this line should not be changed</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--<span class="title class_">Code</span> below <span class="variable language_">this</span> line should not be changed--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;text-primary text-center&quot;</span>&gt;</span>jQuery Playground<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#left-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left-well&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target1&quot;</span>&gt;</span>#target1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target2&quot;</span>&gt;</span>#target2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target3&quot;</span>&gt;</span>#target3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>#right-well<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right-well&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target4&quot;</span>&gt;</span>#target4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target5&quot;</span>&gt;</span>#target5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default target&quot;</span> <span class="attr">id</span>=<span class="string">&quot;target6&quot;</span>&gt;</span>#target6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Front End Development Libraries</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Front End Development Libraries(三)</title>
    <url>/front-end-development-libraries-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Front-End-Development-Libraries"><a href="#freeCodeCamp-—-Front-End-Development-Libraries" class="headerlink" title="freeCodeCamp —- Front End Development Libraries"></a>freeCodeCamp —- Front End Development Libraries</h1><hr>
<h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><h3 id="1-用-Sass-变量存储数据"><a href="#1-用-Sass-变量存储数据" class="headerlink" title="1. 用 Sass 变量存储数据"></a>1. 用 Sass 变量存储数据</h3><p>Sass 不同于 CSS 的一个特点是它允许使用变量。 可以在 Sass 中声明变量，并为它赋值，就像在 JavaScript 中一样。</p>
<p>在 JavaScript 中，变量是使用 <code>let</code> 和 <code>const</code> 关键字定义的。 在 Sass 中，变量以 <code>$</code> 开头的，后跟变量名。</p>
<span id="more"></span>
<p>这里有几个例子：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$main-fonts</span>: Arial, sans-serif;</span><br><span class="line"><span class="variable">$headings-color</span>: green;</span><br></pre></td></tr></table></figure>

<p>并使用变量：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$main-fonts</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$headings-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当需要把多个元素设置成相同颜色时，变量就会很有用。 一旦需要更改颜色，只需要改变这个变量的值就好。</p>
<h3 id="2-用-Sass-嵌套-CSS"><a href="#2-用-Sass-嵌套-CSS" class="headerlink" title="2. 用 Sass 嵌套 CSS"></a>2. 用 Sass 嵌套 CSS</h3><p>Sass 允许 CSS 规则的嵌套，这在组织样式表的时候会很有用。</p>
<p>在 CSS 里，每个元素的样式都需要写在独立的代码块中，如下所示：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于一个大型项目，CSS 规则会很复杂。 这时，引入嵌套功能（即在对应的父元素中写子元素的样式）可以有效地简化代码：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-用-Mixins-创建可重用-CSS"><a href="#3-用-Mixins-创建可重用-CSS" class="headerlink" title="3. 用 Mixins 创建可重用 CSS"></a>3. 用 Mixins 创建可重用 CSS</h3><p>在 Sass 中，mixin 是一组 CSS 声明，可以在整个样式表中重复使用。</p>
<p>CSS 的新功能需要一段时间适配后，所有浏览器后才能完全使用。 随着浏览器的不断升级，使用这些 CSS 规则时可能需要添加浏览器前缀。 考虑 <code>box-shadow</code>：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">4px</span> <span class="number">#fff</span>;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">4px</span> <span class="number">#fff</span>;</span><br><span class="line">  -ms-<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">4px</span> <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">4px</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于所有具有 <code>box-shadow</code> 属性的元素重写此规则，或者更改每个值以测试不同的效果，需要花费大量的精力。 Mixins 就像 CSS 的函数。 以下是一个例子：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$x</span>, <span class="variable">$y</span>, <span class="variable">$blur</span>, <span class="variable">$c</span>)&#123; </span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$x</span> <span class="variable">$y</span> <span class="variable">$blur</span> <span class="variable">$c</span>;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">$x</span> <span class="variable">$y</span> <span class="variable">$blur</span> <span class="variable">$c</span>;</span><br><span class="line">  -ms-<span class="attribute">box-shadow</span>: <span class="variable">$x</span> <span class="variable">$y</span> <span class="variable">$blur</span> <span class="variable">$c</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$x</span> <span class="variable">$y</span> <span class="variable">$blur</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义以 <code>@mixin</code> 开头，后跟自定义名称。 参数（<code>$x</code>，<code>$y</code>，<code>$blur</code>，以及上例中的 <code>$c</code> ）是可选的。 现在在需要 <code>box-shadow</code> 规则的地方，只需一行 mixin 调用而无需添加所有的浏览器前缀。 mixin 可以通过 <code>@include</code> 指令调用。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> box-shadow(<span class="number">0px</span>, <span class="number">0px</span>, <span class="number">4px</span>, <span class="number">#fff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-if-和-else-为样式添加逻辑"><a href="#4-使用-if-和-else-为样式添加逻辑" class="headerlink" title="4. 使用 @if 和 @else 为样式添加逻辑"></a>4. 使用 @if 和 @else 为样式添加逻辑</h3><p>Sass 中的 <code>@if</code> 指令对于测试特定情况非常有用——它的工作方式与 JavaScript 中的 <code>if</code> 语句类似。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> make-bold(<span class="variable">$bool</span>) &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$bool</span> == true &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And just like in JavaScript, the <code>@else if</code> and <code>@else</code> directives test for more conditions:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> text-effect(<span class="variable">$val</span>) &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$val</span> == danger &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> if <span class="variable">$val</span> == alert &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> if <span class="variable">$val</span> == success &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>创建一个名为 <code>border-stroke</code> 的 mixin，它接受一个参数 <code>$val</code>。 The mixin should check for the following conditions using <code>@if</code>, <code>@else if</code>, and <code>@else</code> directives:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">light - <span class="number">1px</span> solid black</span><br><span class="line">medium - <span class="number">3px</span> solid black</span><br><span class="line">heavy - <span class="number">6px</span> solid black</span><br></pre></td></tr></table></figure>

<h3 id="5-使用-for-创建一个-Sass-循环"><a href="#5-使用-for-创建一个-Sass-循环" class="headerlink" title="5. 使用 @for 创建一个 Sass 循环"></a>5. 使用 @for 创建一个 Sass 循环</h3><p>可以在 Sass 中使用 <code>@for</code> 循环添加样式，它的用法和 JavaScript 中的 <code>for</code> 循环类似。</p>
<p><code>@for</code> 以两种方式使用：“开始 through 结束” 或 “开始 to 结束”。 主要区别在于“开始 <strong>to</strong> 结束”<em>不包括</em>结束数字，而“开始 <strong>through</strong> 结束”<em>包括</em>结束数字。</p>
<p>这是一个开始 <strong>through</strong> 结束的示例：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">12</span> &#123;</span><br><span class="line">  <span class="selector-class">.col-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">100%</span>/<span class="number">12</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>#&#123;$i&#125;</code> 部分是将变量（<code>i</code>）与文本组合成字符串的语法。 当 Sass 文件转换为 CSS 时，它看起来像这样：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.col-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8.33333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16.66667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col-12</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是创建网格布局的有效方法。 现在，有了 12 个可用作 CSS class 的列宽选项。</p>
<h3 id="6-使用-each-遍历列表中的项目"><a href="#6-使用-each-遍历列表中的项目" class="headerlink" title="6.使用 @each 遍历列表中的项目"></a>6.使用 @each 遍历列表中的项目</h3><p>上一个挑战显示了 <code>@for</code> 指令如何通过起始值和结束值循环一定次数。 Sass 还提供 <code>@each</code> 指令，该指令循环遍历列表或映射中的每个项目。 在每次迭代时，变量将从列表或映射分配给当前值。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@each</span> <span class="variable">$color</span> in blue, red, green &#123;</span><br><span class="line">  .#&#123;<span class="variable">$color</span>&#125;-text &#123;<span class="attribute">color</span>: <span class="variable">$color</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>map 的语法略有不同。 这是一个示例：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$colors</span>: (color1: blue, color2: red, color3: green);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$key</span>, <span class="variable">$color</span> in <span class="variable">$colors</span> &#123;</span><br><span class="line">  .#&#123;<span class="variable">$color</span>&#125;-text &#123;<span class="attribute">color</span>: <span class="variable">$color</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，需要用 <code>$key</code> 变量来引用 map 中的键。 否则，编译后的 CSS 将包含 <code>color1</code>，<code>color2</code>…… 以上两个代码示例都转换为以下 CSS：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.blue-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.green-text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-使用-while-循环创建样式"><a href="#7-使用-while-循环创建样式" class="headerlink" title="7. 使用 @while 循环创建样式"></a>7. 使用 @while 循环创建样式</h3><p>Sass 中的 <code>@while</code> 指令与 JavaScript 中的 <code>while</code> 类似。 只要满足条件，它就会一直创建 CSS 代码。</p>
<p><code>@for</code> 挑战提供了一个创建简单网格系统的示例。 用 <code>@while</code> 也可以实现。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span>: <span class="number">1</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$x</span> &lt; <span class="number">13</span> &#123;</span><br><span class="line">  <span class="selector-class">.col-</span>#&#123;<span class="variable">$x</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">100%</span>/<span class="number">12</span> * <span class="variable">$x</span>;&#125;</span><br><span class="line">  <span class="variable">$x</span>: <span class="variable">$x</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，定义变量 <code>$x</code> 并将其设置为 1。 接下来，使用 <code>@while</code> 指令，<em>while</em> <code>$x</code> 小于 13 时创建网格系统 。 在设置 <code>width</code> 的 CSS 规则后，<code>$x</code> 增加 1 以避免无限循环。</p>
<h3 id="8-用-Partials-将样式分成小块"><a href="#8-用-Partials-将样式分成小块" class="headerlink" title="8. 用 Partials 将样式分成小块"></a>8. 用 Partials 将样式分成小块</h3><p>Sass 中的 Partials 是包含 CSS 代码段的单独的文件。 这些片段可以导入其它 Sass 文件使用。 可以把类似代码放到模块中，以保持代码结构规整且易于管理。</p>
<p>partials 的名称以下划线（<code>_</code>）字符开头，这样 Sass 就知道它是 CSS 的一小部分，而不会将其转换为 CSS 文件。 此外，Sass 文件以 <code>.scss</code> 文件扩展名结尾。 要将 partial 中的代码放入另一个 Sass 文件中，使用 <code>@import</code> 指令。</p>
<p>例如，如果所有 mixins 都保存在名为 “_mixins.scss” 的 partial 中，并且在 “main.scss” 文件中需要它们，下面是使用方法：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;mixins&#x27;</span></span><br></pre></td></tr></table></figure>

<p>请注意，<code>import</code> 语句中不需要下划线——Sass 知道它是 partial。 将 partial 导入文件后，可以使用所有变量、mixins 和其它代码。</p>
<h3 id="9-将一组-CSS-样式扩展到另一个元素"><a href="#9-将一组-CSS-样式扩展到另一个元素" class="headerlink" title="9. 将一组 CSS 样式扩展到另一个元素"></a>9. 将一组 CSS 样式扩展到另一个元素</h3><p>Sass 有一个名为 <code>extend</code> 的功能，可以很容易地从一个元素中借用 CSS 规则并在另一个元素上重用它们。</p>
<p>例如，下面的 CSS 规则块设置了 <code>.panel</code> class 的样式。 它有 <code>background-color</code>，<code>height</code> 和 <code>border</code>。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.panel</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在需要另一个名为 <code>.big-panel</code> 的面板。 它具有与 <code>.panel</code> 相同的基本属性，但还需要 <code>width</code> 和 <code>font-size</code>。 可以从 <code>.panel</code> 复制并粘贴初始 CSS 规则，但是当添加更多类型的面板时，代码会变得重复。 <code>extend</code> 指令是一种重用为一个元素编写的规则的简单方法，可以为另一个元素重用并添加更多规则：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.big-panel</span>&#123;</span><br><span class="line">  <span class="keyword">@extend</span> .panel;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了新样式之外，<code>.big-panel</code> 将具有与 <code>.panel</code> 相同的属性。</p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Front End Development Libraries</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Front End Development Libraries(五)</title>
    <url>/front-end-development-libraries-%E4%BA%94/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Front-End-Development-Libraries"><a href="#freeCodeCamp-—-Front-End-Development-Libraries" class="headerlink" title="freeCodeCamp —- Front End Development Libraries"></a>freeCodeCamp —- Front End Development Libraries</h1><hr>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><h3 id="1-创建一个-Redux-Store"><a href="#1-创建一个-Redux-Store" class="headerlink" title="1. 创建一个 Redux Store"></a>1. 创建一个 Redux Store</h3><p>Redux 是一个状态管理框架，可以与包括 React 在内的许多不同的 Web 技术一起使用。</p>
<span id="more"></span>

<p>在 Redux 中，有一个状态对象负责应用程序的整个状态， 这意味着如果你有一个包含十个组件且每个组件都有自己的本地状态的 React 项目，那么这个项目的整个状态将通过 Redux <code>store</code> 被定义为单个状态对象， 这是学习 Redux 时要理解的第一个重要原则：Redux store 是应用程序状态的唯一真实来源。</p>
<p>这也意味着，如果应用程序想要更新状态，<strong>只能</strong>通过 Redux store 执行。 单向数据流可以更轻松地对应用程序中的状态进行监测管理。</p>
<hr>
<p>Redux <code>store</code> 是一个保存和管理应用程序状态的<code>state</code>。 可以使用 Redux 对象中的 <code>createStore()</code> 来创建一个 redux <code>store</code>。 此方法将 <code>reducer</code> 函数作为必需参数， <code>reducer</code> 函数将在后面的挑战中介绍。该函数已在代码编辑器中为你定义， 它只需将 <code>state</code> 作为参数并返回一个 <code>state</code> 即可。</p>
<p>声明一个 <code>store</code> 变量并把它分配给 <code>createStore()</code> 方法，然后把 <code>reducer</code> 作为一个参数传入即可。</p>
<h3 id="2-从-Redux-Store-获取状态"><a href="#2-从-Redux-Store-获取状态" class="headerlink" title="2. 从 Redux Store 获取状态"></a>2. 从 Redux Store 获取状态</h3><p>Redux store 对象提供了几种与之交互的方法， 比如，可以使用 <code>getState()</code> 方法检索 Redux store 对象中保存的当前 <code>state</code>。</p>
<hr>
<p>在代码编辑器中可以将上一个挑战中的代码更简洁地重写， 在 <code>store</code> 中使用 <code>store.getState()</code> 检索<code>state</code>，并将其分配给新变量 <code>currentState</code>。</p>
<h3 id="3-定义一个-Redux-Action"><a href="#3-定义一个-Redux-Action" class="headerlink" title="3. 定义一个 Redux Action"></a>3. 定义一个 Redux Action</h3><p>由于 Redux 是一个状态管理框架，因此更新状态是其核心任务之一。 在 Redux 中，所有状态更新都由 dispatch action 触发， action 只是一个 JavaScript 对象，其中包含有关已发生的 action 事件的信息。 Redux store 接收这些 action 对象，然后更新相应的状态。 有时，Redux action 也会携带一些数据。 例如，在用户登录后携带用户名， 虽然数据是可选的，但 action 必须带有 <code>type</code> 属性，该属性表示此 action 的类型。</p>
<p>我们可以将 Redux action 视为信使，将有关应用程序中发生的事件信息提供给 Redux store， 然后 store 根据发生的 action 进行状态的更新。</p>
<hr>
<p>编写 Redux action 就像声明具有 type 属性的对象一样简单， 声明一个对象 <code>action</code> 并为它设置一个属性 <code>type</code>，并将它的值设置成字符串<code>&#39;LOGIN&#39;</code>。</p>
<h3 id="4-定义一个-Action-Creator"><a href="#4-定义一个-Action-Creator" class="headerlink" title="4. 定义一个 Action Creator"></a>4. 定义一个 Action Creator</h3><p>创建 action 后要将 action 发送到 Redux store，以便它可以更新其状态。 在 Redux 中，可以定义动作创建器来完成此任务， action creator 只是一个返回动作的 JavaScript 函数。 换句话说，action creator 创建表示动作事件的对象。</p>
<hr>
<p>定义名为 <code>actionCreator()</code> 的函数，该函数在调用时返回 <code>action</code> 对象。</p>
<h3 id="5-分发-Action-Event"><a href="#5-分发-Action-Event" class="headerlink" title="5. 分发 Action Event"></a>5. 分发 Action Event</h3><p><code>dispatch</code> 方法用于将 action 分派给 Redux store， 调用 <code>store.dispatch()</code>，并传递从一个 action creator 返回的值，将一个 action 送回给 store。</p>
<p>回想一下，action creator 返回一个具有 type 属性的对象，该属性指定已发生的动作。 然后该方法会将一个 action 对象发送到 Redux store。 基于上一个挑战的示例，下面的行是等效的，两者都会调度类 <code>LOGIN</code> 类型的 action：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">actionCreator</span>());</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;LOGIN&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<p>代码编辑器中的 Redux store 具有初始化状过的 state，包含 <code>login</code> 属性当前设置为 <code>false</code>的对象， 还有一个名为 <code>loginAction()</code> 的 action creator，它返回类型为 <code>LOGIN</code> 的 action， 然后通过调用 <code>dispatch</code> 方法将 <code>LOGIN</code> 的 action dispatch 给 Redux store，并传入 <code>loginAction()</code> 创建的 action。</p>
<h3 id="6-在-Store-里处理-Action"><a href="#6-在-Store-里处理-Action" class="headerlink" title="6. 在 Store 里处理 Action"></a>6. 在 Store 里处理 Action</h3><p>在一个 action 被创建并 dispatch 之后，Redux store 需要知道如何响应该操作。 这就是 <code>reducer</code> 函数存在的意义。 Redux 中的 Reducers 负责响应 action 然后进行状态的修改。 <code>reducer</code> 将 <code>state</code> 和 <code>action</code> 作为参数，并且它总是返回一个新的 <code>state</code>。 我们要知道这是 reducer 的<strong>唯一</strong>的作用。 它不应有任何其他的作用：比如它不应调用 API 接口，也不应存在任何潜在的副作用。 reducer 只是一个接受状态和动作，然后返回新状态的纯函数。</p>
<p>Redux 的另一个关键原则是 <code>state</code> 是只读的。 换句话说，<code>reducer</code> 函数必须<strong>始终</strong>返回一个新的 <code>state</code>，并且永远不会直接修改状态。 Redux 不强制改变状态，但是需要在 reducer 函数的代码中强制执行它， 以后的挑战会练习这一点。</p>
<hr>
<p>代码编辑器中具有前面的示例以及一个 <code>reducer</code> 函数。 需要完善 <code>reducer</code> 函数的内容，使得它如果收到类型为<code>&#39;LOGIN&#39;</code>的action，它将返回一个将 <code>login</code> 设置为 <code>true</code> 的 state 对象。 否则，它就返回当前的 <code>state</code>。 请注意，当前 <code>state</code> 和 dispatch 的 <code>action</code> 将被传递给 reducer，因此可以使用 <code>action.type</code> 直接获取 action 的类型。</p>
<h3 id="7-使用-Switch-语句处理多个-Actions"><a href="#7-使用-Switch-语句处理多个-Actions" class="headerlink" title="7. 使用 Switch 语句处理多个 Actions"></a>7. 使用 Switch 语句处理多个 Actions</h3><p>可以定义 Redux store 处理多种 action 类型。 假设在 Redux store 中管理用户身份验证。 希望用状态表示用户登录和注销。 使用 state 的 <code>authenticated</code> 属性表示它。 还需要使用 action creators 创建与用户登录和用户注销相对应的 action，以及 action 对象本身。</p>
<hr>
<p>代码编辑器为你创建了 store、actions、action creators。 通过编写 <code>reducer</code> 函数来处理多个身份验证操作。 可以在 <code>reducer</code> 里通过使用 JavaScript 的 <code>switch</code> 来响应不同的 action 事件。 这是编写 Redux reducers 的标准模式。 switch 语句应该切换 <code>action.type</code> 并返回适当的身份验证状态。</p>
<p><strong>注意：</strong> 此时，不要担心 state 的不变性，因为在这个示例中它很小而且很简单。 所以对于每个操作都可以返回一个新对象，比如 <code>&#123;authenticated: true&#125;</code>。 另外，不要忘记在 switch 语句中写一个 <code>default</code> case，返回当前的 <code>state</code>。 这是很重要的，因为当程序有多个 reducer，当每一个 action 被 dispatch 时它们都会运行，即使 action 与该 reducer 无关。 在这种情况下，你要确保返回当前的 <code>state</code></p>
<h3 id="8-使用-const-声明-Action-Types"><a href="#8-使用-const-声明-Action-Types" class="headerlink" title="8. 使用 const 声明 Action Types"></a>8. 使用 const 声明 Action Types</h3><p>在使用 Redux 时的一个常见做法是将操作类型指定为只读，然后在任何使用它们的地方引用这些常量。 可以通过将 action types 使用 <code>const</code> 声明重构你正在使用的代码。</p>
<hr>
<p>将 <code>LOGIN</code> 和 <code>LOGOUT</code> 声明为 <code>const</code> 的值，并为它们分别分配字符串 <code>&#39;LOGIN&#39;</code> 和 <code>&#39;LOGOUT&#39;</code>。 然后，编辑 <code>authReducer()</code> 和 action creators 来引用这些常量而不是字符串值。</p>
<p><strong>注意：</strong> 通常以全部大写形式写出常量，这也是 Redux 的标准做法。</p>
<h3 id="9-注册-Store-监听器"><a href="#9-注册-Store-监听器" class="headerlink" title="9. 注册 Store 监听器"></a>9. 注册 Store 监听器</h3><p>在 Redux <code>store</code> 对象上访问数据的另一种方法是 <code>store.subscribe()</code>。 这允许将监听器函数订阅到 store，只要 action 被 dispatch 就会调用它们。 这个方法的一个简单用途是为 store 订阅一个函数，它只是在每次收到一个 action 并且更新 store 时记录一条消息。</p>
<hr>
<p>编写一个回调函数，每次 store 收到一个 action 时，它会递增全局变量 <code>count</code>，并将此函数传递给 <code>store.subscribe()</code> 方法。 将会看到 <code>store.dispatch()</code> 连续三次被调用，每次都直接传入一个 action 对象。 观察 dispatch action 之间的控制台输出，看看是否发生了更新。</p>
<h3 id="10-组合多个-Reducers"><a href="#10-组合多个-Reducers" class="headerlink" title="10. 组合多个 Reducers"></a>10. 组合多个 Reducers</h3><p>当应用程序的状态开始变得越来越复杂时，可能会将 state 分成多个块。 相反，请记住 Redux 的第一个原则：所有应用程序状态都保存在 store 中的一个简单的 state 对象中。 因此，Redux 提供 reducer 组合作为复杂状态模型的解决方案。 定义多个 reducer 来处理应用程序状态的不同部分，然后将这些 reducer 组合成一个 root reducer。 然后将 root reducer 传递给 Redux <code>createStore()</code>方法。</p>
<p>为了将多个 reducer 组合在一起，Redux 提供了<code>combineReducers()</code>方法。 该方法接受一个对象作为参数，在该参数中定义一个属性，该属性将键与特定 reducer 函数关联。 Redux 将使用给定的键值作为关联状态的名称。</p>
<p>通常情况下，当它们在某种程度上是独一无二的，为每个应用程序的 state 创建一个 reducer 是一个很好的做法。 例如，在一个带有用户身份验证的记笔记应用程序中，一个 reducer 可以处理身份验证而另一个处理用户提交的文本和注释。 对于这样的应用程序，可能会编写 <code>combineReducers()</code> 方法，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rootReducer = <span class="title class_">Redux</span>.<span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">  <span class="attr">auth</span>: authenticationReducer,</span><br><span class="line">  <span class="attr">notes</span>: notesReducer</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>现在，<code>notes</code> 键将包含与注释相关联的所有状态，并由 <code>notesReducer</code> 处理。 这就是组合多个 reducer 来管理更复杂的应用程序状态的方式， 在此示例中，Redux store 中保存的状态将是一个包含 <code>auth</code> 和 <code>notes</code> 属性的简单对象。</p>
<hr>
<p>代码编辑器中提供了 <code>counterReducer()</code> 和 <code>authReducer()</code> 函数以及 Redux store。 使用 <code>Redux.combineReducers()</code> 方法编写完成 <code>rootReducer()</code> 函数。 将 <code>counterReducer</code> 分配给一个叫做 <code>count</code> 的键，将 <code>authReducer</code> 分配给一个叫做 <code>auth</code> 的键。</p>
<h3 id="11-发送-Action-Data-给-Store"><a href="#11-发送-Action-Data-给-Store" class="headerlink" title="11. 发送 Action Data 给 Store"></a>11. 发送 Action Data 给 Store</h3><p>到目前为止，你已经学会了如何将 action dispatch 给 Redux store，但到目前为止，这些 action 并未包含除 <code>type</code>之外的任何信息。 还可以和 action 一起发送特定数据。 事实上，这是非常常见的，因为 action 通常源于一些用户交互，并且往往会携带一些数据， Redux store 经常需要知道这些数据。</p>
<hr>
<p>在代码编辑器中定义了一个基础的 <code>notesReducer()</code> 和 <code>addNoteText()</code> action creator。 完成 <code>addNoteText()</code> 函数的主体，这样它就会返回一个 <code>action</code> 对象。 该对象应该包含一个 <code>type</code> 属性，其值为 <code>ADD_NOTE</code>，还有一个传入 action creator 的属性为 <code>text</code> 的 <code>note</code> 数据。 当调用 action creator 时，需要传入可以访问该对象的特定笔记信息。</p>
<p>接下来，完成在 <code>notesReducer()</code> 中编写的 <code>switch</code> 语句。 需要添加一个处理 <code>addNoteText()</code> 操作的选项。 如果 action 的类型为 <code>ADD_NOTE</code>，就应该触发这个 case，并且它应该在传入的 <code>action</code> 上返回 <code>text</code> 属性作为新的 <code>state</code></p>
<p>这个 action 将在代码底部发送。 一旦完成后，运行代码并观察控制台。 这就是将特定于 action 的数据发送到 store 并在更新 store <code>state</code>时使用它所需的全部内容。</p>
<h3 id="12-使用中间件处理异步操作"><a href="#12-使用中间件处理异步操作" class="headerlink" title="12.使用中间件处理异步操作"></a>12.使用中间件处理异步操作</h3><p>目前为止的挑战都在避免讨论异步操作，但它们是 Web 开发中不可避免的一部分。 在某些时候，需要在 Redux 应用程序中使用异步请求，那么如何处理这些类型的请求？ Redux 中间件专为此目的而设计，称为 Redux Thunk 中间件。 这里简要介绍如何在 Redux 中使用它。</p>
<p>如果要使用 Redux Thunk 中间件，请将其作为参数传递给 <code>Redux.applyMiddleware()</code>。 然后将此函数作为第二个可选参数提供给 <code>createStore()</code> 函数， 看一下编辑器底部的代码。 然后，要创建一个异步的 action，需要在 action creator 中返回一个以 <code>dispatch</code> 为参数的函数。 在这个函数中，可以 dispatch action 并执行异步请求。</p>
<p>在此示例中，使用 <code>setTimeout()</code> 模拟异步请求。 通常在执行异步行为之前 dispatch action，以便应用程序状态知道正在请求某些数据（例如，这个状态可以显示加载图标）。 然后，一旦收到数据，就会发送另一个 action，该 action 的 data 是请求返回的数据同时也代表 API 操作完成。</p>
<p>请记住，正在将 <code>dispatch</code> 作为参数传递给这个特殊的 action creator。 需要 dispatch action 时只需将 action 直接传递给 dispatch，中间件就可以处理其余的部分。</p>
<hr>
<p>在 <code>handleAsync()</code> 的 action creator 中编写两个 dispatch 事件。 在 <code>setTimeout()</code>（模拟 API 调用）之前 dispatch <code>requestingData()</code>。 然后在收到（模拟）数据后，dispatch <code>receivedData()</code> action，传入这些数据。 现在已经知道如何处理 Redux 中的异步操作， 其他所有操作都继续像以前一样。</p>
<h3 id="13-用-Redux-写一个计数器"><a href="#13-用-Redux-写一个计数器" class="headerlink" title="13. 用 Redux 写一个计数器"></a>13. 用 Redux 写一个计数器</h3><p>现在已经了解了 Redux 的所有核心原则！ 已经了解了如何创建 action 和 action creator，创建 Redux store，通过 store dispatch action，以及使用纯粹的 reducer 设计状态更新。 甚至已经看到过如何使用 reducer 组合管理复杂状态并处理异步操作。 这些例子很简单，但这些概念是 Redux 的核心原则。 如果已经理解这些，那么就可以开始构建自己的 Redux 应用了。 接下来的挑战包括关于 <code>state</code> 不变性的一些细节，但是，这里是对到目前为止学到的所有内容的回顾。</p>
<hr>
<p>在本课程中，将从头开始使用 Redux 实现一个简单的计数器。 基本知识在代码编辑器中提供，但你必须完成细节！ 使用提供的名称定义 <code>incAction</code> 和 <code>decAction</code> action creator，<code>counterReducer()</code>，<code>INCREMENT</code>和<code>DECREMENT</code> action 类型，以及 Redux <code>store</code>。 一旦完成，应该能够 dispatch <code>INCREMENT</code> 或 <code>DECREMENT</code> 动作来增加或减少 <code>store</code> 中保存的状态。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&quot;INCREMENT&quot;</span>; <span class="comment">// define a constant for increment action types</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DECREMENT</span> = <span class="string">&quot;DECREMENT&quot;</span>; <span class="comment">// define a constant for decrement action types</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define the counter reducer which will increment or decrement the state based on the action it receives</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">counterReducer</span> = (<span class="params">state = <span class="number">0</span>, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">INCREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="attr">DECREMENT</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define an action creator for incrementing</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">incAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">INCREMENT</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define an action creator for decrementing</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">decAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">DECREMENT</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the Redux store here, passing in your reducers</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(counterReducer);</span><br></pre></td></tr></table></figure>

<h3 id="14-永不改变状态"><a href="#14-永不改变状态" class="headerlink" title="14. 永不改变状态"></a>14. 永不改变状态</h3><p>这些最后的挑战描述了在 Redux 中强制执行状态不变性关键原则的几种方法。 不可变状态意味着永远不直接修改状态，而是返回一个新的状态副本。</p>
<p>如果拍摄 Redux 应用程序一段时间状态的快照，会看到类似 <code>state 1</code>，<code>state 2</code>，<code>state 3</code>，<code>state 4</code>，<code>...</code>等等，每个状态可能与最后一个状态相似，但每个状态都是一个独特的数据。 事实上，这种不变性提供了时间旅行调试等功能。</p>
<p>Redux 并没有主动地在其 store 或者 reducer 中强制执行状态不变性，责任落在程序员身上。 幸运的是，JavaScript（尤其是 ES6）提供了一些有用的工具，可以用来强制执行状态的不变性，无论是 <code>string</code>，<code>number</code>，<code>array</code> 或 <code>object</code>。 请注意，字符串和数字是原始值，并且本质上是不可变的。 换句话说，3 总是 3， 不能改变数字 3 的值。 然而，<code>array</code> 或 <code>object</code> 是可变的。 实际上，状态可能会包括 <code>array</code> 或 <code>object</code>，因为它们经常用来描述一些代表信息的数据结构。</p>
<hr>
<p>代码编辑器中有一个 <code>store</code> 和 <code>reducer</code>，用于管理待办事项。 完成 reducer 里的 <code>ADD_TO_DO</code> 用例，使其可以将一个新的待办事项附加到 state。 使用通过标准 JavaScript 或 ES6 的一些方法实现此目的。 看看是否可以找到一种方法来返回一个新数组，其中来自 <code>action.todo</code> 的项目添加到数组的末尾。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADD_TO_DO</span> = <span class="string">&quot;ADD_TO_DO&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A list of strings representing tasks to do:</span></span><br><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">  <span class="string">&quot;Go to the store&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Clean the house&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Cook dinner&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Learn to code&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">immutableReducer</span> = (<span class="params">state = todos, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">ADD_TO_DO</span>:</span><br><span class="line">      <span class="comment">// don&#x27;t mutate state here or the tests will fail</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> state.<span class="title function_">concat</span>(action.<span class="property">todo</span>);</span><br><span class="line">    <span class="comment">// or return [...state, action.todo]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// an example todo argument would be &#x27;Learn React&#x27;,</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addToDo</span> = todo =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">ADD_TO_DO</span>,</span><br><span class="line">    todo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(immutableReducer);</span><br></pre></td></tr></table></figure>

<p>保存！你的代码已保存到你的浏览器本地存储中。</p>
<ol>
<li><a href="https://www.freecodecamp.org/chinese/learn/front-end-development-libraries">前端开发库</a></li>
<li><a href="https://www.freecodecamp.org/chinese/learn/front-end-development-libraries/#redux">Redux</a></li>
</ol>
<h3 id="15-在数组中使用扩展运算符"><a href="#15-在数组中使用扩展运算符" class="headerlink" title="15. 在数组中使用扩展运算符"></a>15. 在数组中使用扩展运算符</h3><p>ES6 中有助于在 Redux 中强制执行状态不变性的一个解决方案是扩展运算符：<code>...</code>。 扩展运算符具有很多的应用，其中一种非常适合通过一个已有的数组生成一个新数组。 这是相对较新的但常用的语法。 例如，如果你有一个数组 <code>myArray</code> 并写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = [...myArray];</span><br></pre></td></tr></table></figure>

<p><code>newArray</code> 现在是 <code>myArray</code> 的克隆。 两个数组仍然分别存在于内存中。 如果你执行像 <code>newArray.push(5)</code> 这样的变异， <code>myArray</code> 不会改变。 <code>...</code> 有效将 <code>myArray</code> 中的值<em>展开</em>到一个新数组中。 要克隆数组，但在新数组中添加其他值，可以编写 <code>[...myArray, &#39;new value&#39;]</code>。 这将返回一个由 <code>myArray</code> 中的值和字符串 <code>new value</code>（作为最后一个值）组成的新数组。 扩展语法可以像这样在数组组合中多次使用，但重要的是要注意它只是生成数组的浅拷贝副本。 也就是说，它只为一维数组提供不可变的数组操作。</p>
<hr>
<p>添加待办事项时，使用 spread 运算符返回新的状态副本。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">immutableReducer</span> = (<span class="params">state = [<span class="string">&quot;Do not mutate state!&quot;</span>], action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ADD_TO_DO&quot;</span>:</span><br><span class="line">      <span class="comment">// don&#x27;t mutate state here or the tests will fail</span></span><br><span class="line">      <span class="keyword">let</span> arr = [...state, action.<span class="property">todo</span>];</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addToDo</span> = todo =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;ADD_TO_DO&quot;</span>,</span><br><span class="line">    todo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(immutableReducer);</span><br></pre></td></tr></table></figure>

<h3 id="16-从数组中删除项目"><a href="#16-从数组中删除项目" class="headerlink" title="16. 从数组中删除项目"></a>16. 从数组中删除项目</h3><p>是时候练习从数组中删除项目了。 扩展运算符也可以在这里使用。 其他有用的JavaScript方法包括 <code>slice()</code> 和 <code>concat()</code>。</p>
<hr>
<p>reducer 和 action creator 被修改为根据项目的索引从数组中删除一个项目。 完成编写 reducer 以便返回一个新的状态数组，并删除特定索引处的项目。</p>
<h3 id="17-使用-Object-assign-拷贝对象"><a href="#17-使用-Object-assign-拷贝对象" class="headerlink" title="17. 使用 Object.assign 拷贝对象"></a>17. 使用 Object.assign 拷贝对象</h3><p>最后几个挑战适用于数组，但是当状态是 <code>object</code> 时，有一些方法可以实现状态不变性。 处理对象的一个常用的方法是 <code>Object.assign()</code>。 <code>Object.assign()</code> 获取目标对象和源对象，并将源对象中的属性映射到目标对象。 任何匹配的属性都会被源对象中的属性覆盖。 通常用于通过传递一个空对象作为第一个参数，然后是要用复制的对象来制作对象的浅表副本。 下面是一个示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newObject = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj1, obj2);</span><br></pre></td></tr></table></figure>

<p>这会创建 <code>newObject</code> 作为新的 <code>object</code>，其中包含 <code>obj1</code> 和 <code>obj2</code> 中当前存在的属性。</p>
<hr>
<p>Redux state 和 actions 被修改为处理 <code>state</code> 的 <code>object</code> 。 编辑代码，为类型为 <code>ONLINE</code> 的 actions 返回一个新的 <code>state</code> 对象，这个类型将 <code>status</code> 属性设置为 <code>online</code> 字符串。 尝试使用 <code>Object.assign()</code> 来完成挑战。</p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Front End Development Libraries</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>Front End Development Libraries(六)</title>
    <url>/front-end-development-libraries-%E5%85%AD/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Front-End-Development-Libraries"><a href="#freeCodeCamp-—-Front-End-Development-Libraries" class="headerlink" title="freeCodeCamp —- Front End Development Libraries"></a>freeCodeCamp —- Front End Development Libraries</h1><hr>
<h2 id="React和Redux"><a href="#React和Redux" class="headerlink" title="React和Redux"></a>React和Redux</h2><h3 id="1-React-和-Redux-入门"><a href="#1-React-和-Redux-入门" class="headerlink" title="1. React 和 Redux 入门"></a>1. React 和 Redux 入门</h3><p>React 是提供数据的视图库，能以高效、可预测的方式渲染视图。 Redux 是状态管理框架，可用于简化 APP 应用状态的管理。 在 React Redux app 应用中，通常可创建单一的 Redux store 来管理整个应用的状态。 React 组件仅订阅 store 中与其角色相关的数据， 可直接从 React 组件中分发 actions 以触发 store 对象的更新。</p>
<span id="more"></span>

<p>React 组件可以在本地管理自己的状态，但是对于复杂的应用来说，它的状态最好是用 Redux 保存在单一位置，有特定本地状态的独立组件例外。 当单个组件可能仅具有特定于其的本地状态时，算是例外。 最后一点是，Redux 没有内置的 React 支持，需要安装 <code>react-redux</code>包， 通过这个方式把 Redux 的 <code>state</code> 和 <code>dispatch</code> 作为 <code>props</code> 传给组件。</p>
<p>在接下来的挑战中，先要创建一个可输入新文本消息的 React 组件， 添加这些消息到数组里，在视图上显示数组。 这应该是 React 课程中的一个很好的回顾。 接着，创建 Redux store 和 actions 来管理消息数组的状态。 最后，使用 <code>react-redux</code> 连接 Redux store 和组件，从而将本地状态提取到 Redux store 中。</p>
<hr>
<p>从 <code>DisplayMessages</code> 组件开始。 把构造函数添加到此组件中，使用含两个属性的状态初始化该组件，这两个属性为：<code>input</code>（设置为空字符串），<code>messages</code>（设置为空数组）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DisplayMessages</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 修改这行下面的代码</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">      <span class="attr">input</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">messages</span>:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 修改这行上面的代码</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-首先在本地管理状态"><a href="#2-首先在本地管理状态" class="headerlink" title="2. 首先在本地管理状态"></a>2. 首先在本地管理状态</h3><p>首先，在 <code>render()</code> 方法中，让组件渲染 <code>input</code>、<code>button</code>、<code>ul</code> 三个元素。 <code>input</code> 元素的改变会触发 <code>handleChange()</code> 方法。 此外，<code>input</code> 元素会渲染组件状态中 <code>input</code> 的值。 点击按钮 <code>button</code> 需触发 <code>submitMessage()</code> 方法。</p>
<p>接着，写出这两种方法。 <code>handleChange()</code> 方法会更新 <code>input</code> 为用户正在输入的内容。 <code>submitMessage()</code> 方法把当前存储在 <code>input</code> 的消息与本地状态的 <code>messages</code> 数组连接起来，并清除 <code>input</code> 的值。</p>
<p>最后，在 <code>ul</code> 中展示 <code>messages</code> 数组，其中每个元素内容需放到 <code>li</code> 元素内。</p>
<h3 id="3-提取状态逻辑给-Redux"><a href="#3-提取状态逻辑给-Redux" class="headerlink" title="3. 提取状态逻辑给 Redux"></a>3. 提取状态逻辑给 Redux</h3><p>完成 React 组件后，我们需要把在本地 <code>state</code> 执行的逻辑移到 Redux 中， 这是为小规模 React 应用添加 Redux 的第一步。 该应用的唯一功能是把用户的新消息添加到无序列表中。 下面我们用简单的示例来演示 React 和 Redux 之间的配合。</p>
<hr>
<p>首先，定义 action 的类型 <code>ADD</code>，将其设置为常量 <code>ADD</code>。 接着，定义创建 action 的函数<code>addMessage()</code>，用该函数创建添加消息的 action， 把 <code>message</code> 传给创建 action 的函数并返回包含该消息的 <code>action</code></p>
<p>接着，创建名为 <code>messageReducer()</code> 的 reducer 方法，为这些消息处理状态。 初始状态应为空数组。 reducer 向状态中的消息数组添加消息，或返回当前状态。 最后，创建 Redux store 并传给 reducer。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 ADD、addMessage()、messageReducer() 并在这里存储：</span></span><br><span class="line"><span class="comment">// define ADD, addMessage(), messageReducer(), and store here:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADD</span> = <span class="string">&quot;ADD&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addMessage</span> = message =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">ADD</span>,</span><br><span class="line">    message</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use ES6 default paramter to give the &#x27;previousState&#x27; parameter an initial value.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">messageReducer</span> = (<span class="params">previousState = [], action</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Use switch statement to lay out the reducer logic in response to different action type</span></span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">ADD</span>:</span><br><span class="line">      <span class="comment">// Use ES6 spread operator to return a new array where the new message is added to previousState</span></span><br><span class="line">      <span class="keyword">return</span> [...previousState, action.<span class="property">message</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="comment">// A default case to fall back on in case if the update to Redux store is not for this specific state.</span></span><br><span class="line">      <span class="keyword">return</span> previousState;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(messageReducer);</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-Provider-连接-Redux-和-React"><a href="#4-使用-Provider-连接-Redux-和-React" class="headerlink" title="4. 使用 Provider 连接 Redux 和 React"></a>4. 使用 Provider 连接 Redux 和 React</h3><p>在上一挑战中，创建了 Redux store 和 action，分别用于处理消息数组和添加新消息。 下一步要为 React 提供访问 Redux store 及发起更新所需的 actions。 <code>react-redux</code> 包可帮助我们完成这些任务。</p>
<p>React Redux 提供的 API 有两个关键的功能：<code>Provider</code> 和 <code>connect</code>。 会在另一个挑战会介绍 <code>connect</code>。 <code>Provider</code>是 React Redux 包装 React 应用的 wrapper 组件， 它允许访问整个组件树中的 Redux <code>store</code> 及 <code>dispatch</code>（分发）方法。 <code>Provider</code> 需要两个 props：Redux store 和 App 应用的子组件。 用于 App 组件的 <code>Provider</code> 可这样定义：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Provider</span> store=&#123;store&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Provider</span>&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>此时，编辑器上显示的是过去几个挑战中所有代码， 包括 Redux store、actions、<code>DisplayMessages</code> 组件。 新出现的代码是底部的<code>AppWrapper</code>组件， 这个顶级组件可用于渲染 <code>ReactRedux</code> 的 <code>Provider</code>，并把 Redux 的 store 作为 props 传入。 接着，渲染 <code>DisplayMessages</code> 为子组件。 完成这些任务后，会看到 React 组件渲染到页面上。</p>
<p><strong>注意：</strong> React Redux 在此可作全局变量，因此可通过点号表示法访问 Provider。 利用这一点，编辑器上的代码把 <code>Provider</code> 设置为常量，便于你在 <code>AppWrapper</code> 渲染方法中使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Redux:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADD</span> = <span class="string">&#x27;ADD&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addMessage</span> = (<span class="params">message</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">ADD</span>,</span><br><span class="line">    message</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">messageReducer</span> = (<span class="params">state = [], action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">ADD</span>:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,</span><br><span class="line">        action.<span class="property">message</span></span><br><span class="line">      ];</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(messageReducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DisplayMessages</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">messages</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">submitMessage</span> = <span class="variable language_">this</span>.<span class="property">submitMessage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">submitMessage</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> currentMessage = state.<span class="property">input</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">messages</span>: state.<span class="property">messages</span>.<span class="title function_">concat</span>(currentMessage)</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Type in a new Message:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.submitMessage&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.messages.map( (message, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              return (</span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Provider</span> = <span class="title class_">ReactRedux</span>.<span class="property">Provider</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppWrapper</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 在这一行下面渲染 Provider</span></span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">DisplayMessages</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 修改这行上面的代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-映射-State-到-Props"><a href="#5-映射-State-到-Props" class="headerlink" title="5. 映射 State 到 Props"></a>5. 映射 State 到 Props</h3><p><code>Provider</code>可向 React 组件提供 <code>state</code> 和 <code>dispatch</code> ，但必须确切地指定所需要的 state 和 actions， 以确保每个组件只能访问所需的 state。 完成这个任务，需要创建两个函数：<code>mapStateToProps()</code>、<code>mapDispatchToProps()</code>。</p>
<p>在这两个函数中，声明 state 中函数所要访问的部分及需要 dispatch 的创建 action 的函数。 完成这些，我们就可以迎接下一个挑战，学习如何使用 React Redux 的 <code>connect</code> 方法来把函数连接到组件了。</p>
<p><strong>注意：</strong> 在幕后，React Redux 用 <code>store.subscribe()</code> 方法来实现 <code>mapStateToProps()</code>。</p>
<hr>
<p>创建 <code>mapStateToProps()</code> 函数， 以 <code>state</code> 为参数，然后返回一个对象，该对象把 state 映射到特定属性名上， 这些属性能通过 <code>props</code> 访问组件。 由于此示例把 app 应用的整个状态保存在单一数组中，可把整个状态传给组件。 在返回的对象中创建 <code>messages</code> 属性，并设置为 <code>state</code>。</p>
<h3 id="6-映射-Dispatch-到-Props"><a href="#6-映射-Dispatch-到-Props" class="headerlink" title="6. 映射 Dispatch 到 Props"></a>6. 映射 Dispatch 到 Props</h3><p><code>mapDispatchToProps()</code> 函数可为 React 组件提供特定的创建 action 的函数，以便组件可 dispatch actions，从而更改 Redux store 中的数据。 该函数的结构跟上一挑战中的<code>mapStateToProps()</code>函数相似， 它返回一个对象，把 dispatch actions 映射到属性名上，该属性名成为<code>props</code>。 然而，每个属性都返回一个用 action creator 及与 action 相关的所有数据调用 <code>dispatch</code> 的函数，而不是返回 <code>state</code> 的一部分。 可以访问 <code>dispatch</code>，因为在定义函数时，我们以参数形式把它传入 <code>mapDispatchToProps()</code> 了，这跟 <code>state</code> 传入 <code>mapStateToProps()</code> 是一样的。 在幕后，React Redux 用 Redux 的 <code>store.dispatch()</code> 来管理这些含 <code>mapDispatchToProps()</code> 的dispatches， 这跟它使用 <code>store.subscribe()</code> 来订阅映射到 <code>state</code> 的组件的方式类似。</p>
<p>例如，创建 action 的函数 <code>loginUser()</code> 把 <code>username</code> 作为 action payload， <code>mapDispatchToProps()</code> 返回给创建 action 的函数的对象如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">submitLoginUser</span>: <span class="keyword">function</span>(<span class="params">username</span>) &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">loginUser</span>(username));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>编辑器上提供的是创建 action 的函数 <code>addMessage()</code>。 写出接收 <code>dispatch</code> 为参数的函数 <code>mapDispatchToProps()</code>，返回一个 dispatch 函数对象， 其属性为 <code>submitNewMessage</code>。该函数在 dispatch <code>addMessage()</code> 时为新消息提供一个参数。</p>
<h3 id="7-连接-Redux-和-React"><a href="#7-连接-Redux-和-React" class="headerlink" title="7. 连接 Redux 和 React"></a>7. 连接 Redux 和 React</h3><p>你已经写了<code>mapStateToProps()</code>、<code>mapDispatchToProps()</code> 两个函数，现在可以用它们来把 <code>state</code> 和 <code>dispatch</code> 映射到 React 组件的 <code>props</code> 了。 React Redux 的 <code>connect</code> 方法可以完成这个任务。 此方法有 <code>mapStateToProps()</code>、<code>mapDispatchToProps()</code> 两个可选参数， 它们是可选的，原因是你的组件可能仅需要访问 <code>state</code> 但不需要分发任何 actions，反之亦然。</p>
<p>为了使用此方法，需要传入函数参数并在调用时传入组件。 这种语法有些不寻常，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">MyComponent</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>如果要省略 <code>connect</code> 方法中的某个参数，则应当用 <code>null</code> 替换这个参数。</p>
<hr>
<p>代码编辑器具有 <code>mapStateToProps()</code> 和 <code>mapDispatchToProps()</code> 函数，以及一个名为 <code>Presentational</code> 的新 React 组件。 使用 <code>ReactRedux</code> 全局对象中的 <code>connect</code> 方法将此组件连接到 Redux，并立即在 <code>Presentational</code> 组件上调用它。 将结果赋值给名为 <code>ConnectedComponent</code> 的新 <code>const</code>，表示连接的组件。 就是这样，现在你已经连接到 Redux 了！ 尝试将 <code>connect</code> 的参数更改为 <code>null</code>，并观察测试结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addMessage</span> = (<span class="params">message</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: message</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">messages</span>: state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">submitNewMessage</span>: <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">addMessage</span>(message));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Presentational</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a Presentational Component<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connect = <span class="title class_">ReactRedux</span>.<span class="property">connect</span>;</span><br><span class="line"><span class="comment">// 修改这行下面的代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ConnectedComponent</span> = <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps) (<span class="title class_">Presentational</span>)</span><br></pre></td></tr></table></figure>

<h3 id="8-将-Redux-连接到-Messages-App"><a href="#8-将-Redux-连接到-Messages-App" class="headerlink" title="8. 将 Redux 连接到 Messages App"></a>8. 将 Redux 连接到 Messages App</h3><p>知道如何使用 <code>connect</code> 连接 React 和 Redux 后，我们可以在 React 组件中应用上面学到的内容。</p>
<p>在上一课，连接到 Redux 的组件命名为 <code>Presentational</code>，这个命名不是任意的， 这样的术语<em>通常</em>是指未直接连接到 Redux 的 React 组件， 它们只负责执行接收 props 的函数来实现 UI 的呈现。 相比之下，容器组件用来连接到 Redux 上。 这些组件通常负责把 actions 分派给 store，且经常给子组件传入 store state 属性。</p>
<hr>
<p>到目前为止，我们的编辑器上已包含了整个章节的代码， 唯一不同的是，React 组件被重新命名为 <code>Presentational</code>，即展示层组件。 创建一个新组件，保存在名为 <code>Container</code> 的常量中。 这个常量用 <code>connect</code> 把 <code>Presentational</code> 组件和 Redux 连接起来。 然后，在<code>AppWrapper</code> 中渲染 React Redux 的 <code>Provider</code>组件， 给 <code>Provider</code> 传入 Redux <code>store</code> 属性并渲染 <code>Container</code> 为子组件。 设置完所有内容后，将再次看到消息应用程序渲染到页面上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Redux:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADD</span> = <span class="string">&#x27;ADD&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addMessage</span> = (<span class="params">message</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">ADD</span>,</span><br><span class="line">    <span class="attr">message</span>: message</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">messageReducer</span> = (<span class="params">state = [], action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">ADD</span>:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,</span><br><span class="line">        action.<span class="property">message</span></span><br><span class="line">      ];</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(messageReducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Presentational</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">messages</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">submitMessage</span> = <span class="variable language_">this</span>.<span class="property">submitMessage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">submitMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentMessage = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">input</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">messages</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">messages</span>.<span class="title function_">concat</span>(currentMessage)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Type in a new Message:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.submitMessage&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.messages.map( (message, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              return (</span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React-Redux:</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">messages</span>: state &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">submitNewMessage</span>: <span class="function">(<span class="params">newMessage</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">dispatch</span>(<span class="title function_">addMessage</span>(newMessage))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Provider</span> = <span class="title class_">ReactRedux</span>.<span class="property">Provider</span>;</span><br><span class="line"><span class="keyword">const</span> connect = <span class="title class_">ReactRedux</span>.<span class="property">connect</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define the Container component here:</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">Presentational</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppWrapper</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// complete the return statement:</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Container</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="9-将局部状态提取到-Redux-中"><a href="#9-将局部状态提取到-Redux-中" class="headerlink" title="9. 将局部状态提取到 Redux 中"></a>9. 将局部状态提取到 Redux 中</h3><p>马上就完成了! 请回顾一下为管理 React messages app 的状态写的 Redux 代码。 现在有了连接好的 Redux，还要从<code>Presentational</code>组件中提取状态管理到 Redux， 目前，已连接 Redux，但正在 <code>Presentational</code> 组件中本地处理状态。</p>
<hr>
<p>在 <code>Presentational</code> 组件中，先删除本地 <code>state</code> 中的 <code>messages</code> 属性， 被删的 messages 将由 Redux 管理。 接着，修改 <code>submitMessage()</code> 方法，使该方法从 <code>this.props</code> 那里分发 <code>submitNewMessage()</code>；从本地 <code>state</code> 中传入当前消息输入作为参数。 因本地状态删除了 <code>messages</code> 属性，所以在调用 <code>this.setState()</code> 时也要删除 <code>messages</code> 属性。 最后，修改 <code>render()</code> 方法，使其所映射的消息是从 <code>props</code> 接收的，而不是 <code>state</code></p>
<p>完成这些更改后，我们的应用会实现 Redux 管理应用的状态，但它继续运行着相同的功能。 此示例还阐明了组件获得本地 <code>state</code> 的方式，即在自己的 <code>state</code> 中继续跟踪用户本地输入。 由此可见，Redux 为 React 提供了很有用的状态管理框架。 先前，仅使用 React 的本地状态也实现了相同的结果，这在应付简单的应用时通常是可行的。 但是，随着应用变得越来越大，越来越复杂，应用的状态管理也变得非常困难，Redux 就是为解决这样的问题而诞生的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Redux:</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADD</span> = <span class="string">&#x27;ADD&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addMessage</span> = (<span class="params">message</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="variable constant_">ADD</span>,</span><br><span class="line">    <span class="attr">message</span>: message</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">messageReducer</span> = (<span class="params">state = [], action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">ADD</span>:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,</span><br><span class="line">        action.<span class="property">message</span></span><br><span class="line">      ];</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(messageReducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// React:</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Provider</span> = <span class="title class_">ReactRedux</span>.<span class="property">Provider</span>;</span><br><span class="line"><span class="keyword">const</span> connect = <span class="title class_">ReactRedux</span>.<span class="property">connect</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change code below this line</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Presentational</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Remove property &#x27;messages&#x27; from Presentational&#x27;s local state</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">submitMessage</span> = <span class="variable language_">this</span>.<span class="property">submitMessage</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">submitMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Call &#x27;submitNewMessage&#x27;, which has been mapped to Presentational&#x27;s props, with a new message;</span></span><br><span class="line">    <span class="comment">// meanwhile, remove the &#x27;messages&#x27; property from the object returned by this.setState().</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">submitNewMessage</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">input</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">input</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Type in a new Message:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.input&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.submitMessage&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           &#123;/* The messages state is mapped to Presentational&#x27;s props; therefore, when rendering,</span></span><br><span class="line"><span class="language-xml">               you should access the messages state through props, instead of Presentational&#x27;s</span></span><br><span class="line"><span class="language-xml">               local state. */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.props.messages.map( (message, idx) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              return (</span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;idx&#125;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Change code above this line</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">messages</span>: state&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">submitNewMessage</span>: <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">addMessage</span>(message))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">Presentational</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppWrapper</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Container</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Front End Development Libraries</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(一)</title>
    <url>/javascript-algorithms-and-data-structures-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h4 id="Basic-JavaScript"><a href="#Basic-JavaScript" class="headerlink" title="Basic JavaScript"></a>Basic JavaScript</h4><h5 id="1-添加注释"><a href="#1-添加注释" class="headerlink" title="1. 添加注释"></a>1. 添加注释</h5><p>被注释的代码块在 JavaScript 之中是不会执行的。 在代码中写注释，是一个可以让你自己和以后的其他人理解代码作用的好方法。</p>
<span id="more"></span>

<p>JavaScript有两种写注释的方法。</p>
<ul>
<li>使用 <code>//</code> 注释掉当前行的代码。 这是一个行内注释：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This is an in-line comment.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用多行注释来注释代码，使用 <code>/*</code> 开始， <code>*/</code> 结束。 这是一个多行注释：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* This is amulti-line comment */</span></span><br></pre></td></tr></table></figure>

<p><strong>最佳实践</strong>当你写代码的时候，你应该时不时的添加注释来解释你写的代码的作用。 适当的注释能让别人<em>和</em>你未来的自己更容易看懂代码。</p>
<h5 id="2-声明变量"><a href="#2-声明变量" class="headerlink" title="2. 声明变量"></a>2. 声明变量</h5><p>JavaScript 提供八种不同的数据类型，</p>
<ul>
<li><p><code>undefined</code>（未定义）</p>
</li>
<li><p><code>null</code>（空）</p>
</li>
<li><p><code>boolean</code>（布尔型）</p>
</li>
<li><p><code>string</code>（字符串）</p>
</li>
<li><p><code>symbol</code></p>
</li>
<li><p><code>number</code>（数字）</p>
</li>
<li><p><code>bigint</code>（可以表示任意大的整数）</p>
</li>
<li><p> <code>object</code>（对象）。</p>
</li>
</ul>
<p>变量允许计算机以一种动态的形式来存储和操作数据， 即通过操作指向数据的指针而不是数据本身来实现。 以上八种数据类型中的任何一种都可以存储到一个变量中。</p>
<p>通过在变量前面使用关键字 <code>var</code>，声明一个变量，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ourName;</span><br></pre></td></tr></table></figure>

<p>上面代码的意思是创建一个名为 <code>ourName</code> 的变量。 在 JavaScript 中我们以分号结束语句。 <strong>变量名称</strong>可以由数字、字母、美元符号 <code>$</code> 或者下划线 <code>_</code> 组成，但是<strong>不能</strong>包含空格或者以数字为开头。</p>
<h5 id="3-使用赋值运算符储存值"><a href="#3-使用赋值运算符储存值" class="headerlink" title="3. 使用赋值运算符储存值"></a>3. 使用赋值运算符储存值</h5><p>可以使用赋值（assignment）运算符 （<code>=</code>）将值存储在变量中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myVariable = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>这条语句把 <code>Number</code> 类型的值 <code>5</code> 赋给变量 <code>myVariable</code>。</p>
<p>在将值赋给运算符左侧的变量之前，将先执行 <code>=</code> 运算符右侧的所有运算。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar;</span><br><span class="line">myVar = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>首先，此代码创建一个名为 <code>myVar</code> 的变量。 然后，数值 <code>5</code> 被赋给变量 <code>myVar</code>。 现在，如果 <code>myVar</code> 再次出现在代码中，程序将会将它视为 <code>5</code>。</p>
<hr>
<p><strong>将一个变量的值赋予另一个</strong></p>
<p>在使用赋值运算符赋予变量某个值后，你可以使用赋值运算符将该变量的值赋给另一个变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar;</span><br><span class="line">myVar = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> myNum;</span><br><span class="line">myNum = myVar;</span><br></pre></td></tr></table></figure>

<p>以上代码声明了一个没有初始值的变量 <code>myVar</code>，然后给它赋值为 <code>5</code>。 紧接着，又声明了一个没有初始值的变量 <code>myNum</code>。 然后，变量 <code>myVar</code> 的内容（也就是 <code>5</code>）被赋给了变量 <code>myNum</code>。 现在，变量 <code>myNum</code> 的值也为 <code>5</code>。</p>
<hr>
<p><strong>使用赋值运算符初始化变量</strong></p>
<p>通常在声明变量的时候会给变量初始化一个初始值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myVar = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>创建一个名为 <code>myVar</code> 的变量，并指定其初始值为 <code>0</code>。    </p>
<hr>
<p><strong>声明字符串变量</strong></p>
<p>之前，你使用以下代码声明变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName;</span><br></pre></td></tr></table></figure>

<p>但是你也可以像这样声明一个字符串变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot;your name&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>&quot;your name&quot;</code> 被称为 string literal。 字符串文字或<strong>字符串</strong>是用单引号或双引号括起来的一系列零个或多个字符。</p>
<hr>
<p><strong>未初始化的变量</strong></p>
<p>当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值 <code>undefined</code>。 当你对一个值为 <code>undefined</code> 的变量进行运算操作的时候，算出来的结果将会是 <code>NaN</code>，它的意思是 “Not a Number”。 如果你用 <code>undefined</code> 变量连接一个字符串，你将得到一个 <code>undefined</code> 的 字符串。</p>
<hr>
<p><strong>变量名区分大小写</strong></p>
<p>在 JavaScript 中所有的变量和函数名都是大小写敏感的。 要区别对待大写字母和小写字母。</p>
<p>使用<strong>驼峰命名法</strong>（camelCase）来书写一个 Javascript 变量。</p>
<ul>
<li>变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someVariable;</span><br><span class="line"><span class="keyword">var</span> anotherVariableName;</span><br><span class="line"><span class="keyword">var</span> thisVariableNameIsSoLong;</span><br></pre></td></tr></table></figure>

<h5 id="4-声明变量"><a href="#4-声明变量" class="headerlink" title="4. 声明变量"></a>4. 声明变量</h5><p>使用 <code>var</code> 关键字声明变量的最大问题之一是你可以轻松覆盖变量声明：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> camper = <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> camper = <span class="string">&quot;David&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(camper);</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，<code>camper</code> 变量最初声明为 <code>James</code>，然后被覆盖为 <code>David</code>。 然后控制台显示字符串 <code>David</code>。在小型应用程序中，你可能不会遇到此类问题。 但是随着你的代码库变大，你可能会意外地覆盖一个你不打算覆盖的变量。 由于此行为不会引发错误，因此搜索和修复错误变得更加困难。</p>
<p>ES6 中引入了一个名为 <code>let</code> 的关键字，这是对 JavaScript 的一次重大更新，以解决与 <code>var</code> 关键字有关的潜在问题。</p>
<p>如果将上面代码中的 <code>var</code> 替换为 <code>let</code> ，则会导致错误：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> camper = <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> camper = <span class="string">&quot;David&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>该错误可以在你的浏览器控制台中看到。</p>
<p>所以不像 <code>var</code>，当你使用 <code>let</code> 时，同名的变量<strong>只能声明一次</strong>。</p>
<hr>
<p><strong>使用const关键词声明只读变量</strong></p>
<p>在 ES6 中，可以使用 <code>const</code> 关键字声明变量。</p>
<p><code>const</code> 具有 <code>let</code> 的所有出色功能，另外还有一个额外的好处，即使用 <code>const</code> 声明的变量是只读的。 它们是一个常量值，这意味着一旦一个变量被赋值为 <code>const</code>，它就不能被重新赋值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">FAV_PET</span> = <span class="string">&quot;Cats&quot;</span>;</span><br><span class="line"><span class="variable constant_">FAV_PET</span> = <span class="string">&quot;Dogs&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>由于重新分配 <code>FAV_PET</code> 的值，控制台将显示错误。</p>
<p>你应该始终使用 <code>const</code> 关键字命名不想重新分配的变量。 这有助于避免给一个常量进行额外的再次赋值。</p>
<p><strong>注意：</strong> 通常，开发者会用大写字母作为常量标识符，用小写字母或者驼峰命名作为变量（对象或数组）标识符。</p>
<h5 id="5-运算"><a href="#5-运算" class="headerlink" title="5.运算"></a>5.运算</h5><p>加法运算</p>
<ul>
<li><p><code>Number</code> 是 JavaScript 中的一种数据类型，用来表示数值。</p>
</li>
<li><p>通过符号 <code>+</code> 来进行加法运算</p>
</li>
</ul>
<p>减法运算</p>
<ul>
<li>使用 <code>-</code> 来做减法运算</li>
</ul>
<p>乘法运算</p>
<ul>
<li>使用 <code>*</code> 符号表示两数相乘</li>
</ul>
<p>除法运算</p>
<ul>
<li>使用 <code>/</code> 符号做除法运算</li>
</ul>
<p>求余运算</p>
<ul>
<li><p>使用<code>%</code> 返回两个数相除得到的余数</p>
</li>
<li><p>在数学中，判断一个数是奇数还是偶数，只需要判断这个数除以 <code>2</code> 得到的余数是 0 还是 1。 如果是偶数，余数是 <code>0</code>，而如果是奇数，余数是 <code>1</code>。</p>
<p>17 % 2 = 1<br>48 % 2 = 0</p>
<p><strong>提示</strong> 余数运算符（remainder）有时被错误地称为“模数”运算符。 它与模数非常相似，但不能用于负数的运算。</p>
</li>
</ul>
<p>复合赋值</p>
<ul>
<li> <code>+=</code> 运算符，<code>-=</code> 运算符，<code>*=</code> 运算符，<code>/=</code> 运算符</li>
</ul>
<p><strong>数字递增</strong></p>
<ul>
<li>使用 <code>++</code>，我们可以很容易地对变量进行自增或者 +1 运算。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i++;</span><br></pre></td></tr></table></figure>

等效于：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i = i + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<strong>注意：</strong><code>i++;</code> 这种写法省去了书写等号的必要。</li>
</ul>
<p><strong>数字递减</strong></p>
<ul>
<li>使用自减符号 <code>--</code>，你可以很方便地对一个变量执行自减或者 -1 运算。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i--;</span><br></pre></td></tr></table></figure>

等效于：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">i = i - <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<strong>注意：</strong><code>i--;</code> 这种写法省去了书写等号的必要。</li>
</ul>
<hr>
<h5 id="6-转义字符"><a href="#6-转义字符" class="headerlink" title="6. 转义字符"></a>6. 转义字符</h5><p>在 JavaScript 中，可以通过在引号前面使用反斜杠（<code>\</code>）来转义引号。</p>
<p>引号不是字符串中唯一可以被转义（escaped）的字符。 转义字符允许你使用可能无法在字符串中使用的字符。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>退格符</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>换页符</td>
</tr>
</tbody></table>
<p><em>请注意，反斜线本身必须被转义，才能显示为反斜线。</em></p>
<h5 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7. 字符串"></a>7. 字符串</h5><p><strong>用加号运算符连接字符串</strong></p>
<p>在 JavaScript 中，当 <code>+</code> 操作符被用于一个 <code>String</code> 类型的值的时候，它被称作<strong>拼接操作符</strong>。 你可以通过拼接其他字符串来创建一个新的字符串。</p>
<p><strong>例如：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;My name is Alan,&#x27;</span> + <span class="string">&#x27; I concatenate.&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong> 注意空格。 拼接操作不会在两个字符串之间添加空格。所以，如果想加上空格的话，你需要自己在字符串里面添加。</p>
<hr>
<p><strong>用 += 运算符连接字符串</strong></p>
<p>可以使用 <code>+=</code> 运算符来拼接字符串到现有字符串变量的结尾。 对于那些被分割成几段的长的字符串来说，这一操作是非常有用的。</p>
<p><strong>提示：</strong> 注意空格。 拼接操作不会在两个字符串之间添加空格，所以，如果想要加上空格的话，你需要自己在字符串里面添加。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ourStr = <span class="string">&quot;I come first. &quot;</span>;</span><br><span class="line">ourStr += <span class="string">&quot;I come second.&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>ourStr</code> 的值为字符串 <code>I come first. I come second.</code></p>
<hr>
<p><strong>用变量构造字符串</strong></p>
<p>通过使用连接运算符（<code>+</code>），你可以插入一个或多个变量来组成一个字符串。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourName = <span class="string">&quot;freeCodeCamp&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> ourStr = <span class="string">&quot;Hello, our name is &quot;</span> + ourName + <span class="string">&quot;, how are you?&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>ourStr</code> 值为 <code>Hello, our name is freeCodeCamp, how are you?</code></p>
<hr>
<p><strong>将变量追加到字符串</strong></p>
<p>使用加且赋值（<code>+=</code>）运算符将字符串追加到字符串的末尾。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> anAdjective = <span class="string">&quot;awesome!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ourStr = <span class="string">&quot;freeCodeCamp is &quot;</span>;</span><br><span class="line">ourStr += anAdjective;</span><br></pre></td></tr></table></figure>

<p><code>ourStr</code> 值为 <code>freeCodeCamp is awesome!</code>。</p>
<hr>
<p><strong>查找字符串长度</strong></p>
<p>通过在字符串变量或字符串后面写上 <code>.length</code> 来获得 <code>String</code> 的长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Alan Peter&quot;</span>.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>

<p>值 <code>10</code> 将显示在控制台中。 请注意，“Alan” 和 “Peter” 之间的空格字符也被计算在内。</p>
<p>例如，如果我们创建了一个变量 <code>const firstName = &quot;Ada&quot;</code>，我们可以通过使用 <code>firstName.length</code> 找出字符串 <code>Ada</code> 的长度属性。</p>
<hr>
<p><strong>使用方括号查找字符串中的第n个字符</strong></p>
<p>方括号表示法（Bracket notation）是一种在字符串中的特定 index（索引）处获取字符的方法。</p>
<p>大多数现代编程语言，如 JavaScript，不同于人类从 1 开始计数。 它们是<strong>从 0 开始计数</strong>。 这被称为基于零（Zero-based）的索引。</p>
<ul>
<li>例如，单词 <code>Charles</code> 的索引 0 的字符是 <code>C</code>。 所以如果 <code>const firstName = &quot;Charles&quot;</code>，你可以通过 <code>firstName[0]</code> 得到字符串第一个字母的值。</li>
</ul>
<p>    示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="string">&quot;Charles&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> firstLetter = firstName[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>    <code>firstLetter</code> 值为字符串 <code>C</code> 。</p>
<p>查找最后一个字符需要获取字符串的长度</p>
<ul>
<li><p>要获取字符串的最后一个字符，可以用字符串的长度减 1 的索引值。</p>
</li>
<li><p>例如，如果 <code>const firstName = &quot;Ada&quot;</code>，则可以使用 <code>firstName[firstName.length - 1]</code> 获取字符串最后一个字母的值。</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="string">&quot;Ada&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> lastLetter = firstName[firstName.<span class="property">length</span> - <span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p><code>lastLetter</code> 值为字符串 <code>a</code>。</p>
<hr>
<p><strong>字符串的不变性</strong></p>
<p>在 JavaScript 中，字符串（<code>String</code>）的值是不可变的（immutable），这意味着一旦字符串被创建就不能被改变。</p>
<p>例如，以下代码将产生错误，因为字符串 <code>Bob</code> 中的字母 <code>B</code> 不能更改为字母 <code>J</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myStr = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">myStr[<span class="number">0</span>] = <span class="string">&quot;J&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>请注意，这<em>不</em> 意味着无法重新分配 <code>myStr</code>。 更改 <code>myStr</code> 的唯一方法是为其分配一个新值，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myStr = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">myStr = <span class="string">&quot;Job&quot;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="8-数组"><a href="#8-数组" class="headerlink" title="8. 数组"></a>8. 数组</h5><p><strong>使用 JavaScript 数组将多个值存储在一个变量中</strong></p>
<p>使用数组（<code>array</code>），可以在一个地方存储多个数据。</p>
<p>以左方括号开始定义一个数组，以右方括号结束，里面每个元素之间用逗号隔开，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sandwich = [<span class="string">&quot;peanut butter&quot;</span>, <span class="string">&quot;jelly&quot;</span>, <span class="string">&quot;bread&quot;</span>];</span><br></pre></td></tr></table></figure>

<p><strong>将一个数组嵌套在另一个数组中</strong></p>
<p>可以在其他数组中嵌套数组，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> teams = [[<span class="string">&quot;Bulls&quot;</span>, <span class="number">23</span>], [<span class="string">&quot;White Sox&quot;</span>, <span class="number">45</span>]];</span><br></pre></td></tr></table></figure>

<p>这也叫做多维数组（multi-dimensional array）。</p>
<p><strong>通过索引访问数组中的数据</strong></p>
<p>可以使用索引（indexes）来访问数组中的数据。</p>
<p>数组索引与字符串一样使用方括号来表示，不同的是，它们不是指定字符，而是指定数组中的一个条目。 数组索引与字符串索引一样是从 0 开始（zero-based）的，所以数组中第一个元素的索引编号是 <code>0</code>。</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">const</span> data = array[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p><code>console.log(array[0])</code> 打印 <code>50</code>，<code>data</code> 的值为 <code>60</code>。</p>
<p><strong>通过索引修改数组中的数据</strong></p>
<p>与字符串不同，<strong>数组</strong>的条目是<strong>可变的</strong> 并且可以自由更改，<u>即使数组是用 <code>const</code> 声明的。</u></p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [<span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>];</span><br><span class="line">ourArray[<span class="number">0</span>] = <span class="number">15</span>;</span><br></pre></td></tr></table></figure>

<p><code>ourArray</code> 值为 <code>[15, 40, 30]</code>。</p>
<p><strong>注意：</strong> 数组名与方括号之间不应该有任何空格，比如 <code>array [0]</code> 。 </p>
<p><strong>使用索引访问多维数组</strong></p>
<p>可以把多维数组看作成是<em>数组中的数组</em>。 当你使用括号访问你的数组时，第一组括号指的是最外层（第一层）数组中的条目，而每一对额外的括号指的是里面下一层的条目。</p>
<p><strong>例如：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  [[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subarray = arr[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> nestedSubarray = arr[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> element = arr[<span class="number">3</span>][<span class="number">0</span>][<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>subarray</code> 的值为 <code>[[10, 11, 12], 13, 14]</code>， <code>nestedSubarray</code> 的值为 <code>[10, 11, 12]</code>，<code>element</code> 的值为 <code>11</code> 。</p>
<p><strong>注意：</strong> 数组名与方括号之间不应该有任何空格，比如 <code>array [0][0]</code> 甚至是 <code>array [0] [0]</code> 都是不允许的。</p>
<hr>
<p><strong>操作数组</strong></p>
<ol>
<li><strong>push 方法</strong></li>
</ol>
<p>一个将数据添加到数组末尾的简单方法是 <code>push()</code> 函数。</p>
<p><code>.push()</code> 接受一个或多个参数（parameters），并把它压入到数组的末尾。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr1.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;cat&quot;</span>];</span><br><span class="line">arr2.<span class="title function_">push</span>([<span class="string">&quot;happy&quot;</span>, <span class="string">&quot;joy&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p><code>arr1</code> 现在值为 <code>[1, 2, 3, 4]</code>，<code>arr2</code> 值为 <code>[&quot;Stimpson&quot;, &quot;J&quot;, &quot;cat&quot;, [&quot;happy&quot;, &quot;joy&quot;]]</code>。</p>
<ol start="2">
<li><strong>pop 方法</strong></li>
</ol>
<p>改变数组中数据的另一种方法是用 <code>.pop()</code> 函数。</p>
<p><code>.pop()</code> 函数用来弹出一个数组末尾的值。 我们可以把这个弹出的值赋给一个变量存储起来。 换句话说就是 <code>.pop()</code> 函数移除数组末尾的元素并返回这个元素。</p>
<p>数组中任何类型的元素（数值，字符串，甚至是数组）都可以被弹出来 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> threeArr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> oneDown = threeArr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oneDown);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(threeArr);</span><br></pre></td></tr></table></figure>

<p>第一个 <code>console.log</code> 将显示值 <code>6</code>，第二个将显示值 <code>[1, 4]</code>。</p>
<ol start="3">
<li><strong>shift方法</strong></li>
</ol>
<p> <code>.shift()</code>的工作原理就像 <code>.pop()</code>，但它移除的是第一个元素，而不是最后一个。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, [<span class="string">&quot;cat&quot;</span>]];</span><br><span class="line"><span class="keyword">const</span> removedFromOurArray = ourArray.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>

<p><code>removedFromOurArray</code> 值为 <code>Stimpson</code>，<code>ourArray</code> 值为 <code>[&quot;J&quot;, [&quot;cat&quot;]]</code></p>
<ol start="4">
<li><strong>unshift方法</strong></li>
</ol>
<p> <code>unshift</code>（移入）一个元素到数组的头部。</p>
<p><code>.unshift()</code> 函数用起来就像 <code>.push()</code> 函数一样，但不是在数组的末尾添加元素，<code>unshift()</code> 在数组的头部添加元素。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [<span class="string">&quot;Stimpson&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;cat&quot;</span>];</span><br><span class="line">ourArray.<span class="title function_">shift</span>();</span><br><span class="line">ourArray.<span class="title function_">unshift</span>(<span class="string">&quot;Happy&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在 <code>shift</code>、<code>ourArray</code> 后值为 <code>[&quot;J&quot;, &quot;cat&quot;]</code>。 在 <code>unshift</code>、<code>ourArray</code> 后值为 <code>[&quot;Happy&quot;, &quot;J&quot;, &quot;cat&quot;]</code>。</p>
<h5 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h5><p>可以把代码的重复部分抽取出来，放到一个函数 （functions）中。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以通过函数名加上后面的小括号来调用（invoke）这个函数，就像这样： <code>functionName();</code> 每次调用函数时，它都会在控制台上打印消息 <code>Hello World</code>。 每次调用函数时，大括号之间的所有代码都将被执行。</p>
<hr>
<p><strong>将值传递给带有参数的函数</strong></p>
<p>函数的参数 （parameters）在函数调用中充当传入函数的输入占位符（也叫形参）。 函数调用时，参数可以为一个或多个。 调用函数时输入（或传递 “passed”）的实际值被称为参数（arguments）。</p>
<p>这是带有两个参数的函数，<code>param1</code> 和 <code>param2</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testFun</span>(<span class="params">param1, param2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(param1, param2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们可以调用 <code>testFun</code>，就像这样： <code>testFun(&quot;Hello&quot;, &quot;World&quot;);</code>。 我们传入了两个字符串参数， <code>Hello</code> 和 <code>World</code>。 在函数中，<code>param1</code> 等于字符串 <code>Hello</code> 以及 <code>param2</code> 等于字符串 <code>World</code>。 请注意，<code>testFun</code> 函数可以多次调用，每次调用时传递的参数会决定参数的实际值。</p>
<hr>
<p><strong>使用 return 给函数返回值</strong></p>
<p>可以通过函数的参数（arguments）把值传入函数， 也可以使用 <code>return</code> 语句把数据从一个函数中传出来。</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">plusThree</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> answer = <span class="title function_">plusThree</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p><code>answer</code> 的值为 <code>8</code>。</p>
<p><code>plusThree</code> 带有一个参数（argument）<code>num</code>，并返回（return）一个等于 <code>num + 3</code> 的值。</p>
<h6 id="9-1-全局作用域和函数"><a href="#9-1-全局作用域和函数" class="headerlink" title="9.1 全局作用域和函数"></a>9.1 全局作用域和函数</h6><p>在 JavaScript 中，作用域涉及到变量的作用范围。 在函数外定义的变量具有 全局 作用域。 这意味着，具有全局作用域的变量可以在代码的任何地方被调用。</p>
<p>未使用 <code>let</code> 或 <code>const</code> 关键字声明的变量会在 <code>global</code> 范围内自动创建。 当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。 你应该总是用 <code>let</code> 或 <code>const</code> 声明你的变量。</p>
<h6 id="9-2-局部作用域和函数"><a href="#9-2-局部作用域和函数" class="headerlink" title="9.2 局部作用域和函数"></a>9.2 局部作用域和函数</h6><p>在一个函数内声明的变量，以及该函数的参数都具有局部（local）作用域。 这意味着它们只在该函数内可见。</p>
<p>这是在函数 <code>myTest</code> 内声明局部变量 <code>loc</code> 的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> loc = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(loc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myTest</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(loc);</span><br></pre></td></tr></table></figure>

<p><code>myTest()</code> 函数调用将在控制台中显示字符串 <code>foo</code>。 <code>console.log(loc)</code> 行（在 <code>myTest</code> 函数之外）将抛出错误，因为 <code>loc</code> 未在函数之外定义。</p>
<hr>
<p><strong>函数中的全局作用域和局部作用域</strong></p>
<p>一个程序中有可能具有相同名称的局部变量 和全局变量。 在这种情况下，局部变量将会优先于全局变量。</p>
<p>下面为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someVar = <span class="string">&quot;Hat&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> someVar = <span class="string">&quot;Head&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> someVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数 <code>myFun</code> 将会返回字符串 <code>Head</code>，因为局部变量的优先级更高。</p>
<hr>
<p><strong>函数也可以返回 undefined</strong></p>
<p>函数一般用 <code>return</code> 语句来返回值，但这不是必须的。 在函数没有 <code>return</code> 语句的情况下，当你调用它时，该函数会执行内部代码，返回的值是 <code>undefined</code>。</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addSum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  sum = sum + num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addSum</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><code>addSum</code> 是一个没有 <code>return</code> 语句的函数。 该函数将更改全局变量 <code>sum</code>，函数的返回值为 <code>undefined</code>。</p>
<p>可以获取函数的返回值，并将其赋值给一个变量。</p>
<p>假设我们有一个预先定义的函数 <code>sum</code> ，它将两个数相加。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ourSum = <span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<p>调用 <code>sum</code> 函数，参数为 <code>5</code> 和 <code>12</code>，生成的返回值为 <code>17</code>。 将返回值赋给 <code>ourSum</code> 变量。</p>
<h5 id="10-队列"><a href="#10-队列" class="headerlink" title="10. 队列"></a>10. 队列</h5><p>队列（queue）是一个抽象的数据结构（Data Structure），队列中的条目都是有秩序的。 新的条目会被加到队列的末尾，旧的条目会从队列的头部被移出。</p>
<h5 id="11-布尔值"><a href="#11-布尔值" class="headerlink" title="11. 布尔值"></a>11. 布尔值</h5><p>数据类型布尔（Boolean）</p>
<p>布尔值只能是两个值中的一个：<code>true</code> 或者 <code>false</code>。 它非常像电路开关，<code>true</code> 是 “开”，<code>false</code> 是 “关”。 这两种状态是互斥的。</p>
<p><strong>注意：</strong> 布尔值是不带引号的。 字符串 <code>&quot;true&quot;</code> 和 <code>&quot;false&quot;</code> 不是布尔值，在 JavaScript 中也没有特殊含义。</p>
<hr>
<p><strong>从函数返回布尔值</strong></p>
<p>所有比较操作符都会返回布尔值：要么是<code>true</code>，要么是<code>false</code>。</p>
<p>有时人们通过 <code>if/else</code> 语句来做比较，像这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但有更好的方式来达到相同的效果。 既然 <code>===</code> 返回 <code>true</code> 或 <code>false</code> 我们可以直接返回比较结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="12-if-语句"><a href="#12-if-语句" class="headerlink" title="12. if 语句"></a>12. if 语句</h5><p> <code>if</code> 语句用于在代码中做出决定。 关键字 <code>if</code> 告诉 JavaScript 在小括号中的条件为真的情况下去执行定义在大括号里面的代码。 这种条件被称为 <code>Boolean</code> 条件，因为他们只可能是 <code>true</code>（真）或 <code>false</code>（假）。</p>
<p>当条件的计算结果为 <code>true</code>，程序执行大括号内的语句。 当布尔条件的计算结果为 <code>false</code>，大括号内的代码将不会执行。</p>
<p><strong>伪代码</strong></p>
<blockquote>
<p>if（<em>条件为真</em>）{<br><em>语句被执行</em><br>}</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (myCondition) &#123;</span><br><span class="line">  <span class="keyword">if</span> (myCondition) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;It was true&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;It was false&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="title function_">test</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p><code>test(true)</code> 返回字符串 <code>It was true</code>，<code>test(false)</code> 返回字符串 <code>It was false</code>。</p>
<p>当 <code>test</code> 被调用，并且传递进来的参数值为 <code>true</code> 时，<code>if</code> 语句会计算 <code>myCondition</code> 的结果，看它是否为 <code>true</code>。 如果条件为 <code>true</code>，函数会返回 <code>It was true</code>。 当 <code>test</code> 被调用，并且传递进来的参数值为 <code>false</code> 时，<code>myCondition</code> <em>不</em> 为 <code>true</code>，并且不执行大括号后面的语句，函数返回 <code>It was false</code>。</p>
<hr>
<h6 id="12-1-运算符"><a href="#12-1-运算符" class="headerlink" title="12.1 运算符"></a>12.1 运算符</h6><p>在 JavaScript 中，有很多 相互比较的操作。 所有这些操作符都返回一个 <code>true</code> 或 <code>false</code> 值。</p>
<p>最基本的运算符是 <strong>相等运算符</strong>：<code>==</code>。 相等运算符比较两个值，如果它们是相等，返回 <code>true</code>，如果它们不相等，返回 <code>false</code>。 值得注意的是相等运算符不同于赋值运算符（<code>=</code>），赋值运算符是把等号右边的值赋给左边的变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">equalityTest</span>(<span class="params">myVal</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (myVal == <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Equal&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Not Equal&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>myVal</code> 等于 <code>10</code>，相等运算符会返回 <code>true</code>，因此大括号里面的代码会被执行，函数将返回 <code>Equal</code>。 否则，函数返回 <code>Not Equal</code>。 在 JavaScript 中，为了让两个不同的数据类型（例如 <code>numbers</code> 和 <code>strings</code>）的值可以作比较，它必须把一种类型转换为另一种类型。 这叫作 “<strong>类型强制转换</strong>”。 转换之后，可以像下面这样来比较：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>   ==  <span class="number">1</span>  <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span>   ==  <span class="number">2</span>  <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span>   == <span class="string">&#x27;1&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;3&quot;</span> ==  <span class="number">3</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>严格相等运算符</strong>（<code>===</code>）是相对相等操作符（<code>==</code>）的另一种比较操作符。 与相等操作符转换数据两类型不同，严格相等运算符不会做类型转换。</p>
<p>如果比较的值类型不同，那么在严格相等运算符比较下它们是不相等的，会返回 false 。</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> ===  <span class="number">3</span>  <span class="comment">// true</span></span><br><span class="line"><span class="number">3</span> === <span class="string">&#x27;3&#x27;</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>在第二个例子中，<code>3</code> 是一个 <code>Number</code> 类型，而 <code>&#39;3&#39;</code> 是一个 <code>String</code> 类型。</p>
<p> JavaScript 中，你可以使用 <code>typeof</code> 运算符确定变量或值的类型</p>
<hr>
<p><strong>不相等运算符</strong>（<code>!=</code>）与相等运算符是相反的。 这意味着不相等并返回 <code>false</code> 的地方，用相等运算符会返回 <code>true</code>，<em>反之亦然</em>。 与相等运算符类似，不相等运算符在比较的时候也会转换值的数据类型。</p>
<p><strong>例如</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> !=  <span class="number">2</span>    <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> != <span class="string">&quot;1&quot;</span>   <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span> != <span class="string">&#x27;1&#x27;</span>   <span class="comment">// false</span></span><br><span class="line"><span class="number">1</span> != <span class="literal">true</span>  <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> != <span class="literal">false</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>严格不相等运算符</strong>（<code>!==</code>）与全等运算符是相反的。 这意味着严格不相等并返回 <code>false</code> 的地方，用严格相等运算符会返回 <code>true</code>，<em>反之亦然</em>。 严格不相等运算符不会转换值的数据类型。</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> !==  <span class="number">3</span>  <span class="comment">// false</span></span><br><span class="line"><span class="number">3</span> !== <span class="string">&#x27;3&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">4</span> !==  <span class="number">3</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<hr>
<p>使用<strong>大于运算符</strong>（<code>&gt;</code>）来比较两个数字。 如果大于运算符左边的数字大于右边的数字，将会返回 <code>true</code>。 否则，它返回 <code>false</code>。</p>
<p>与相等运算符一样，大于运算符在比较的时候，<strong>会转换值的数据类型</strong>。</p>
<p><strong>例如：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>   &gt;  <span class="number">3</span>  <span class="comment">// true</span></span><br><span class="line"><span class="number">7</span>   &gt; <span class="string">&#x27;3&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span>   &gt;  <span class="number">3</span>  <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> &gt;  <span class="number">9</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<hr>
<p>使用<strong>大于等于运算符</strong>（<code>&gt;=</code>）来比较两个数字的大小。 如果大于等于运算符左边的数字比右边的数字大或者相等，会返回 <code>true</code>。 否则，会返回 <code>false</code>。</p>
<p>与相等运算符相似，大于等于运算符在比较的时候<strong>会转换值的数据类型</strong>。</p>
<p><strong>例如：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span>   &gt;=  <span class="number">6</span>  <span class="comment">// true</span></span><br><span class="line"><span class="number">7</span>   &gt;= <span class="string">&#x27;3&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span>   &gt;=  <span class="number">3</span>  <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;7&#x27;</span> &gt;=  <span class="number">9</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<hr>
<p>使用<strong>小于运算符</strong>（<code>&lt;</code>）来比较两个数字。 如果小于运算符左边的数字比右边的数字小，它会返回 <code>true</code>。 否则会返回 <code>false</code>。 与相等运算符类似，小于运算符在做比较的时候会<strong>转换值的数据类型</strong>。</p>
<p><strong>例如：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>   &lt; <span class="number">5</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;3&#x27;</span> &lt; <span class="number">7</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">5</span>   &lt; <span class="number">5</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">3</span>   &lt; <span class="number">2</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;8&#x27;</span> &lt; <span class="number">4</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<hr>
<p>使用<strong>小于等于运算符</strong>（<code>&lt;=</code>）比较两个数字的大小。 如果在小于等于运算符左边的数字小于或者等于右边的数字，它会返回 <code>true</code>。 如果在小于等于运算符左边的数字大于右边的数字，它会返回 <code>false</code>。 与相等运算符类似，小于或等于运算符会<strong>转换数据类型</strong>。</p>
<p><strong>例如</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>   &lt;= <span class="number">5</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;7&#x27;</span> &lt;= <span class="number">7</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">5</span>   &lt;= <span class="number">5</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">3</span>   &lt;= <span class="number">2</span> <span class="comment">// false</span></span><br><span class="line"><span class="string">&#x27;8&#x27;</span> &lt;= <span class="number">4</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<hr>
<p>当且仅当运算符的左边和右边都是 true，<strong>逻辑与运算符</strong>（<code>&amp;&amp;</code>）才会返回 <code>true</code>。</p>
<p>可以通过在一个 <code>if</code> 语句中嵌套另一个 <code>if</code> 语句来实现同样的效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>当 <code>num</code> 的值大于 <code>5</code> 并且小于<code>10</code>，代码会返回 <code>Yes</code>。 可以使用逻辑 and 操作符写出相同的逻辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">5</span> &amp;&amp; num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>只要逻辑或运算符（<code>||</code>）两边的任何一个运算的结果是 <code>true</code>，则返回 <code>true</code>。 否则，返回 <code>false</code>。</p>
<p>逻辑或运算符由两个竖线（<code>||</code>）组成。 这个按键位于退格键和回车键之间。</p>
<p>下面这个模式看起来应该很熟悉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Yes&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>如果 <code>num</code> 在 <code>5</code> 和 <code>10</code> 之间（包括 <code>5</code> 和 <code>10</code>），这段代码将返回 <code>Yes</code>。 可以使用逻辑 or 操作符写出同样的逻辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">10</span> || num &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;No&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Yes&quot;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>当 <code>if</code> 语句的条件为真，会执行大括号里的代码。 那如果条件为假呢？ 正常情况下什么也不会发生。 使用 <code>else</code> 语句，可以执行当条件为假时相应的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Bigger than 10&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;10 or Less&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="12-2-if-else语句"><a href="#12-2-if-else语句" class="headerlink" title="12.2 if else语句"></a>12.2 if else语句</h6><p>如果你有多个条件语句，你可以通过 <code>else if</code> 语句把 <code>if</code> 语句链起来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">15</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Bigger than 15&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Smaller than 5&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Between 5 and 15&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><code>if</code>、<code>else if</code> 语句中的代码顺序是很重要的。</p>
<p>在条件判断语句中，代码的执行顺序是从上到下，所以你需要考虑清楚先执行哪一句，后执行哪一句。</p>
<p>这有两个例子。</p>
<p>第一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Less than one&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Less than two&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Greater than or equal to two&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个例子更改了代码的执行顺序：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Less than two&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Less than one&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Greater than or equal to two&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个函数看起来几乎一模一样，我们传一个值进去看看它们有什么区别。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(<span class="number">0</span>)</span><br><span class="line"><span class="title function_">bar</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><code>foo(0)</code> 将返回字符串 <code>Less than one</code>，<code>bar(0)</code> 将返回字符串 <code>Less than two</code>。</p>
<hr>
<p><code>if/else</code> 语句串联在一起可以实现复杂的逻辑。 这是多个 <code>if</code> / <code>else if</code> 语句串联在一起的伪代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">  statement1</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">  statement2</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition3) &#123;</span><br><span class="line">  statement3</span><br><span class="line">. . .</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  statementN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="13-switch语句"><a href="#13-switch语句" class="headerlink" title="13. switch语句"></a>13. switch语句</h5><p><code>switch</code> 语句将值与定义各种可能的值的 case 语句比较。 任何有效的 JavaScript 语句都可以在 case 块中执行，并且将从第一个匹配的 <code>case</code> 的值开始运行，直到遇到 <code>break</code>。</p>
<p>这是 <code>switch</code> 语句的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The fruit is an apple&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;orange&quot;</span>:</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The fruit is an orange&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试 <code>case</code> 值使用严格相等（<code>===</code>）运算符进行比较。 <code>break</code> 告诉 JavaScript 停止执行 switch 语句。 如果遗漏了 <code>break</code> ，下一个语句将会被执行。</p>
<hr>
<p>在 switch 语句中<strong>添加默认选项</strong></p>
<p>在 <code>switch</code> 语句中，你可能无法用 <code>case</code> 枚举出所有可能的值。 相反，你可以添加 <code>default</code> 语句，它会在找不到相匹配的 <code>case</code> 语句之后执行。 你可以把它看作是 <code>if/else</code> 链中最后的那个 <code>else</code> 语句。</p>
<p><code>default</code> 语句应该被放到最后。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">    statement1;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">    statement2;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    defaultStatement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>添加多个相同选项</strong></p>
<p>如果你忘了给 <code>switch</code> 的每一条 <code>case</code> 添加 <code>break</code>，那么后续的 <code>case</code> 会一直执行，直到遇见 <code>break</code> 为止。 如果你想为 <code>switch</code> 中的多个不同的输入设置相同的结果，可以这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (val) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    result = <span class="string">&quot;1, 2, or 3&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    result = <span class="string">&quot;4 alone&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，1、2、3 都会有相同的结果。</p>
<hr>
<p>如果你有多个选项需要选择，<code>switch</code> 语句写起来会比多个串联的 <code>if</code>/<code>else if</code> 语句容易些。 譬如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (val === <span class="number">1</span>) &#123;</span><br><span class="line">  answer = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="number">2</span>) &#123;</span><br><span class="line">  answer = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  answer = <span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以被下面替代：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (val) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    answer = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    answer = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    answer = <span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>函数执行到 return 语句就结束</strong></p>
<p>当代码执行到 <code>return</code> 语句时，函数返回一个结果就结束运行了，return 后面的语句不会执行。</p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;World&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;byebye&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myFun</span>();</span><br></pre></td></tr></table></figure>

<p>以上将在控制台中显示字符串 <code>Hello</code> 并返回字符串 <code>World</code>。 字符串 <code>byebye</code> 将永远不会在控制台中显示，因为函数在 <code>return</code> 语句处就退出了。</p>
<h5 id="14-JavaScript对象"><a href="#14-JavaScript对象" class="headerlink" title="14. JavaScript对象"></a>14. JavaScript对象</h5><p>对象和 <code>arrays</code> 类似，区别在于数组使用索引来访问和修改数据，而对象中的数据是通过 <code>properties</code> 访问的。</p>
<p>对象非常适合用来存储结构化数据，可以表示真实世界中的物体，比如一只猫。</p>
<p>这里是一个猫对象的样本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Whiskers&quot;</span>,</span><br><span class="line">  <span class="string">&quot;legs&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&quot;tails&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;enemies&quot;</span>: [<span class="string">&quot;Water&quot;</span>, <span class="string">&quot;Dogs&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在此示例中，所有属性都存储为字符串，例如 <code>name</code>、<code>legs</code> 和 <code>tails</code>。 然而，你也可以使用数字作为属性。 你甚至可以省略单字字符串属性中的引号，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> anotherObject = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">&quot;five&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;focus&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然而，如果你的对象有非字符串属性的话，JavaScript 会自动将它们转为字符串。</p>
<hr>
<p>和访问数组类似，访问对象属性有两种方式：<strong>点号表示法（<code>.</code>）和方括号表示法（<code>[]</code>）</strong>。</p>
<p>如果我们已经提前知道要访问的属性名，使用点号表示法是最方便的。</p>
<ul>
<li><p>这里是一个用点符号（<code>.</code>）读取对象属性的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  <span class="attr">prop1</span>: <span class="string">&quot;val1&quot;</span>,</span><br><span class="line">  <span class="attr">prop2</span>: <span class="string">&quot;val2&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prop1val = myObj.<span class="property">prop1</span>;</span><br><span class="line"><span class="keyword">const</span> prop2val = myObj.<span class="property">prop2</span>;</span><br></pre></td></tr></table></figure>

<p><code>prop1val</code> 的值将为字符串 <code>val1</code>，并且<code>prop2val</code> 的值将为字符串 <code>val2</code>。</p>
</li>
<li><p>访问对象属性的第二种方式是方括号表示法（<code>[]</code>）。 如果你想访问的属性名中包含空格，就必须使用方括号表示法来获取它的属性值。</p>
<p>当然，如果属性名不包含空格，也可以使用方括号表示法。</p>
<p>这是一个使用方括号表示法读取对象属性的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123;</span><br><span class="line">  <span class="string">&quot;Space Name&quot;</span>: <span class="string">&quot;Kirk&quot;</span>,</span><br><span class="line">  <span class="string">&quot;More Space&quot;</span>: <span class="string">&quot;Spock&quot;</span>,</span><br><span class="line">  <span class="string">&quot;NoSpace&quot;</span>: <span class="string">&quot;USS Enterprise&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObj[<span class="string">&quot;Space Name&quot;</span>];</span><br><span class="line">myObj[<span class="string">&#x27;More Space&#x27;</span>];</span><br><span class="line">myObj[<span class="string">&quot;NoSpace&quot;</span>];</span><br></pre></td></tr></table></figure>

<p><code>myObj[&quot;Space Name&quot;]</code> 将会是字符串 <code>Kirk</code>，<code>myObj[&#39;More Space&#39;]</code> 将会是字符串 <code>Spock</code>，并且<code>myObj[&quot;NoSpace&quot;]</code> 将会是字符串 <code>USS Enterprise</code>。</p>
<p>注意，如果属性名中包含空格，就必须使用引号（单引号或双引号）将它们包裹起来。</p>
</li>
<li><p>对对象上使用方括号表示法，还可以访问对象上作为变量值存储的属性。 当你需要遍历对象的所有属性，或者根据一个变量的值查找对应的属性值时，这种写法尤其适用。</p>
<p>以下是一个使用变量来访问属性的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dogs = &#123;</span><br><span class="line">  <span class="title class_">Fido</span>: <span class="string">&quot;Mutt&quot;</span>,</span><br><span class="line">  <span class="title class_">Hunter</span>: <span class="string">&quot;Doberman&quot;</span>,</span><br><span class="line">  <span class="title class_">Snoopie</span>: <span class="string">&quot;Beagle&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDog = <span class="string">&quot;Hunter&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> myBreed = dogs[myDog];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBreed);</span><br></pre></td></tr></table></figure>

<p>字符串 <code>Doberman</code> 将会出现在控制台中。</p>
<p>请注意，我们在使用变量名访问属性时，<em>不要</em>使用引号引起来，因为我们使用的是 <em>值</em>，而不是 <em>属性名</em>。</p>
</li>
</ul>
<hr>
<p>在你创建了 JavaScript 对象后，你可以随时<strong>更新属性</strong>，就像更新任何其他变量那样。 你可以使用点或中括号操作符来更新。</p>
<p>举个例子，让我们看看 <code>ourDog</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourDog = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Camper&quot;</span>,</span><br><span class="line">  <span class="string">&quot;legs&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&quot;tails&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;friends&quot;</span>: [<span class="string">&quot;everything!&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>既然他是一个特别愉快的狗，让我们将他的名字更改为字符串 <code>Happy Camper</code>。 这有两种方式来更新对象的 name 属性： <code>ourDog.name = &quot;Happy Camper&quot;;</code> 或 <code>ourDog[&quot;name&quot;] = &quot;Happy Camper&quot;;</code>。更新后，<code>ourDog.name</code> 的值就不再是 <code>Camper</code>，而是 <code>Happy Camper</code>。</p>
<hr>
<p>像更改属性一样给 JavaScript 对象添加属性。</p>
<p>这里展示了如何给 <code>ourDog</code> 添加一个属性 <code>bark</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ourDog.<span class="property">bark</span> = <span class="string">&quot;bow-wow&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ourDog[<span class="string">&quot;bark&quot;</span>] = <span class="string">&quot;bow-wow&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>现在，当我们执行 <code>ourDog.bark</code> 时，就能得到他的叫声，<code>bow-wow</code>。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourDog = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Camper&quot;</span>,</span><br><span class="line">  <span class="string">&quot;legs&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&quot;tails&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;friends&quot;</span>: [<span class="string">&quot;everything!&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ourDog.<span class="property">bark</span> = <span class="string">&quot;bow-wow&quot;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>删除对象的属性，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> ourDog.<span class="property">bark</span>;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourDog = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Camper&quot;</span>,</span><br><span class="line">  <span class="string">&quot;legs&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&quot;tails&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;friends&quot;</span>: [<span class="string">&quot;everything!&quot;</span>],</span><br><span class="line">  <span class="string">&quot;bark&quot;</span>: <span class="string">&quot;bow-wow&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> ourDog.<span class="property">bark</span>;</span><br></pre></td></tr></table></figure>

<p>在上面代码的最后一行中，<code>ourDog</code> 是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Camper&quot;</span>,</span><br><span class="line">  <span class="string">&quot;legs&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&quot;tails&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;friends&quot;</span>: [<span class="string">&quot;everything!&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>对象和字典一样，可以用来存储键/值对。 如果数据是扁平的，你可以用对象来查找你想要的值，而不是链式使用 <code>switch</code> 或 <code>if/else</code> 语句。 当你知道你的输入数据在某个范围时，这种查找方式极为有效。</p>
<p>这是一个文章对象的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> article = &#123;</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;How to create objects in JavaScript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;link&quot;</span>: <span class="string">&quot;https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;Kaashan Hussain&quot;</span>,</span><br><span class="line">  <span class="string">&quot;language&quot;</span>: <span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;TECHNOLOGY&quot;</span>,</span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span>: <span class="string">&quot;NOVEMBER 28, 2018&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> articleAuthor = article[<span class="string">&quot;author&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> articleLink = article[<span class="string">&quot;link&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="string">&quot;title&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> valueLookup = article[value];</span><br></pre></td></tr></table></figure>

<p><code>articleAuthor</code> 是字符串 <code>Kaashan Hussain</code>，<code>articleLink</code> 是字符串 <code>https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/</code>，<code>valueLookup</code> 是字符串 <code>How to create objects in JavaScript</code>。</p>
<hr>
<p>要检查一个给定对象上的属性是否存在，你可以使用.<code>hasOwnProperty()方法</code>。 <code>SomeObject.hasOwnProperty(someProperty)</code>根据该对象上是否有该属性，返回真或假。  </p>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkForProperty</span>(<span class="params">object, property</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> object.<span class="title function_">hasOwnProperty</span>(property);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkForProperty</span>(&#123; <span class="attr">top</span>: <span class="string">&#x27;hat&#x27;</span>, <span class="attr">bottom</span>: <span class="string">&#x27;pants&#x27;</span> &#125;, <span class="string">&#x27;top&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">checkForProperty</span>(&#123; <span class="attr">top</span>: <span class="string">&#x27;hat&#x27;</span>, <span class="attr">bottom</span>: <span class="string">&#x27;pants&#x27;</span> &#125;, <span class="string">&#x27;middle&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>The first <code>checkForProperty</code> function call returns <code>true</code>, while the second returns <code>false</code>.</p>
<hr>
<p> JavaScript 对象是一种灵活的数据结构。 它可以储存字符串（strings）、数字（numbers）、布尔值（booleans）、数组（arrays）、函数（functions）和对象（objects）以及这些值的任意组合。</p>
<p>这是一个复杂数据结构的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourMusic = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;artist&quot;</span>: <span class="string">&quot;Daft Punk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Homework&quot;</span>,</span><br><span class="line">    <span class="string">&quot;release_year&quot;</span>: <span class="number">1997</span>,</span><br><span class="line">    <span class="string">&quot;formats&quot;</span>: [ </span><br><span class="line">      <span class="string">&quot;CD&quot;</span>, </span><br><span class="line">      <span class="string">&quot;Cassette&quot;</span>, </span><br><span class="line">      <span class="string">&quot;LP&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;gold&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>这是一个包含一个对象的数组。 该对象有关于专辑的各种元数据（metadata）。 它也有一个嵌套的 <code>formats</code> 数组。 可以将专辑添加到顶级数组来增加更多的专辑记录。 对象将数据以一种键 - 值对的形式保存。 在上面的示例中，<code>&quot;artist&quot;: &quot;Daft Punk&quot;</code> 有一个键为 <code>artist</code> 值为 <code>Daft Punk</code> 的属性。</p>
<p><strong>提示：</strong>数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。</p>
<hr>
<p>可以通过连续使用点号表示法和方括号表示法来访问对象的嵌套属性。</p>
<p>这是一个嵌套对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourStorage = &#123;</span><br><span class="line">  <span class="string">&quot;desk&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;drawer&quot;</span>: <span class="string">&quot;stapler&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;cabinet&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;top drawer&quot;</span>: &#123; </span><br><span class="line">      <span class="string">&quot;folder1&quot;</span>: <span class="string">&quot;a file&quot;</span>,</span><br><span class="line">      <span class="string">&quot;folder2&quot;</span>: <span class="string">&quot;secrets&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;bottom drawer&quot;</span>: <span class="string">&quot;soda&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ourStorage.<span class="property">cabinet</span>[<span class="string">&quot;top drawer&quot;</span>].<span class="property">folder2</span>;</span><br><span class="line">ourStorage.<span class="property">desk</span>.<span class="property">drawer</span>;</span><br></pre></td></tr></table></figure>

<p><code>ourStorage.cabinet[&quot;top drawer&quot;].folder2</code> 将会是字符串 <code>secrets</code>，并且 <code>ourStorage.desk.drawer</code> 将会是字符串 <code>stapler</code>。</p>
<hr>
<p>你将创建一个帮助维护音乐专辑集的函数。 这个集合是一个包含多个相册的对象，这些相册也是对象。 每张专辑在集合中以唯一的 <code>id</code> 作为属性名来表示。 在每个专辑对象中，有各种描述专辑信息的属性。 并非所有专辑都有完整的信息。</p>
<p><code>updateRecords</code> 函数有 4 个参数，即以下参数：</p>
<ul>
<li><code>records</code> - 一个包含多个专辑的对象</li>
<li><code>id</code> - 一个数字，代表 <code>records</code> 对象中特定的专辑</li>
<li><code>prop</code> - 一个字符串，代表相册属性名称</li>
<li><code>value</code> - 一个字符串，包含用来更新相册属性的信息</li>
</ul>
<p>使用下面的规则完成函数来修改传递给函数的对象。</p>
<ul>
<li>你的函数必须始终返回整个 <code>records</code> 对象。</li>
<li>如果 <code>value</code> 是空字符串，从专辑里删除指定的 <code>prop</code>。</li>
<li>如果 <code>prop</code> 不是 <code>tracks</code>，并且 <code>value</code> 不是一个空字符串，将 <code>value</code> 赋给那个专辑的 <code>prop</code>。</li>
<li>If <code>prop</code> is <code>tracks</code> and <code>value</code> isn’t an empty string, you need to update the album’s <code>tracks</code> array. First, if the album does not have a <code>tracks</code> property, assign it an empty array. Then add the <code>value</code> as the last item in the album’s <code>tracks</code> array.</li>
</ul>
<p><strong>注意：</strong> 将 <code>recordCollection</code> 对象的副本用于测试。 你不应该直接修改 <code>recordCollection</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateRecords</span>(<span class="params">records, id, prop, value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> records[id][prop];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prop !== <span class="string">&quot;tracks&quot;</span> &amp;&amp; value !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    records[id][prop] = value;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prop === <span class="string">&quot;tracks&quot;</span> &amp;&amp; value !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (records[id].<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;tracks&quot;</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">      records[id][prop] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    records[id][prop].<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> records;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="15-循环"><a href="#15-循环" class="headerlink" title="15. 循环"></a>15. 循环</h5><h6 id="15-1while循环"><a href="#15-1while循环" class="headerlink" title="15.1while循环"></a>15.1while循环</h6><p>当 while 指定的条件为真，循环才会执行，反之不执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [];</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  ourArray.<span class="title function_">push</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码里，<code>while</code> 循环执行 5 次把 0 到 4 的数字添加到 <code>ourArray</code> 数组里。</p>
<h6 id="15-2-for循环"><a href="#15-2-for循环" class="headerlink" title="15.2 for循环"></a>15.2 for循环</h6><p><code>for</code>，它可以循环指定次数。</p>
<p>for 循环中的可选三个表达式用分号隔开：</p>
<p><code>for (a; b; c)</code>，其中<code>a</code>为初始化语句，<code>b</code>为条件语句，<code>c</code> 是最终的表达式。</p>
<p>初始化语句只会在执行循环开始之前执行一次。 它通常用于定义和设置你的循环变量。</p>
<p>循环条件语句会在每一轮循环的开始前执行，只要条件判断为 <code>true</code> 就会继续执行循环。 当条件为 <code>false</code> 的时候，循环将停止执行。 这意味着，如果条件在一开始就为 false，这个循环将不会执行。</p>
<p>终止循环表达式在每次循环迭代结束， 在下一个条件检查之前时执行，通常用来递增或递减循环计数。</p>
<p>在下面的例子中，先初始化 <code>i = 0</code>，条件 <code>i &lt; 5</code> 为 true 时，进入循环。 每次循环后 <code>i</code> 的值增加 <code>1</code>，然后执行终止循环条件表达式 <code>i++</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  ourArray.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ourArray</code> 现在的值为 <code>[0, 1, 2, 3, 4]</code>。</p>
<hr>
<p><strong>使用 For 循环遍历数组的奇数</strong></p>
<p>对于循环，一次不必递增一个。 通过更改我们的 <code>final-expression</code>，我们可以用偶数来计数。</p>
<p>初始化 <code>i = 0</code>，当 <code>i &lt; 10</code> 的时候继续循环。 <code>i += 2</code> 让 <code>i</code> 每次循环之后增加 2。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">  ourArray.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ourArray</code> 现在将包含 <code>[0, 2, 4, 6, 8]</code>。 改变计数器（<code>initialization</code>） ，这样我们可以用奇数来递增。</p>
<hr>
<p><strong>使用 For 循环反向遍历数组</strong></p>
<p>只要我们定义好合适的条件，for 循环也可以反向遍历。</p>
<p>为了让每次递减 2，我们需要改变 initialization、condition 和 final-expression。</p>
<p>设置 <code>i = 10</code>，并且当 <code>i &gt; 0</code> 的时候才继续循环。 我们使用 <code>i -= 2</code> 来让 <code>i</code> 每次循环递减 2。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">  ourArray.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ourArray</code> 现在将包含 <code>[10, 8, 6, 4, 2]</code>。 让我们改变初始值和最后的表达式，这样我们就可以按照奇数从后往前两两倒着数。</p>
<hr>
<p><strong>使用 For 循环遍历数组</strong></p>
<p>JavaScript 中的一个常见任务是遍历数组的内容。 一种方法是使用 <code>for</code> 循环。 下面的代码将输出数组 <code>arr</code> 的每个元素到控制台：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记住数组的索引从零开始的，这意味着数组的最后一个元素的下标是：<code>length - 1</code>（数组的长度 -1）。 我们这个循环的条件是 <code>i &lt; arr.length</code>，当 <code>i</code> 的值为 <code>length</code> 的时候循环就停止了。 在这个例子中，最后一个循环是 <code>i === 4</code>，也就是说，当 <code>i</code> 的值等于 <code>arr.length - 1</code> 时，结果输出 <code>6</code>。 然后 <code>i</code> 增加到 <code>5</code>，循环会终止，因为 <code>i &lt; arr.length</code> 是 <code>false</code>。</p>
<hr>
<p><strong>循环嵌套</strong></p>
<p>如果你有一个二维数组，可以使用相同的逻辑，先遍历外面的数组，再遍历里面的子数组。 下面是一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i][j]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里一次输出了 <code>arr</code> 中的每个子元素。 提示，对于内部循环，我们可以通过 <code>arr[i]</code> 的 <code>.length</code> 来获得子数组的长度，因为 <code>arr[i]</code> 本身就是一个数组。</p>
<h6 id="15-3-do…while-循环"><a href="#15-3-do…while-循环" class="headerlink" title="15.3 do…while 循环"></a>15.3 do…while 循环</h6><p> <code>do...while</code> 循环，不论什么情况，它都会首先 <code>do</code>（运行）循环里的第一部分代码，然后 <code>while</code>（当）规定的条件被评估为 <code>true</code>（真）的时候，它会继续运行循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = [];</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  ourArray.<span class="title function_">push</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>上面的示例行为类似于其他类型的循环，由此产生的数组将看起来像 <code>[0, 1, 2, 3, 4]</code>。 然而，<code>do...while</code> 不同于其他循环的地方，是第一次循环检查失败时的行为。 让我们看看代码示例。 这里是一个常规的 <code>while</code> 循环，只要 <code>i &lt; 5</code>，就会在循环中运行代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = []; </span><br><span class="line"><span class="keyword">let</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">  ourArray.<span class="title function_">push</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子中，定义了一个空数组 <code>ourArray</code> 以及一个值为 5 的 <code>i</code> 。 当执行 <code>while</code> 循环时，因为 <code>i</code> 不小于 5，所以循环条件为 <code>false</code>，循环内的代码将不会执行。 <code>ourArray</code> 最终没有添加任何内容，因此示例中的所有代码执行完时，ourArray 仍然是<code>[]</code>。 现在，看一下 <code>do...while</code> 循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ourArray = []; </span><br><span class="line"><span class="keyword">let</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  ourArray.<span class="title function_">push</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<p>在这里，和使用 <code>while</code> 循环一样，将 <code>i</code> 的值初始化为 5。 执行下一行时，没有执行循环检查，直接执行花括号内的代码。 数组会添加一个元素，并在进行条件检查之前递增 <code>i</code>。 然后，在条件检查时因为 <code>i</code> 等于 6 不符合条件 <code>i &lt; 5</code>，所以退出循环。 最终 <code>ourArray</code> 的值是 <code>[5]</code>。 本质上，<code>do...while</code> 循环确保循环内的代码至少运行一次。 让我们通过 <code>do...while</code> 循环将值添加到数组中。</p>
<h6 id="15-4-递归"><a href="#15-4-递归" class="headerlink" title="15.4 递归"></a>15.4 递归</h6><p><strong>使用递归代替循环</strong></p>
<p>递归是函数调用自身的操作。 为了便于理解，有如下任务：计算数组内元素前 <code>n</code> 的元素乘积。 使用 <code>for</code> 循环， 可以这样做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">arr, n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> product = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    product *= arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是递归写法，注意代码里的 <code>multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]</code>。 这意味着可以重写 <code>multiply</code> 以调用自身而无需依赖循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">arr, n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">multiply</span>(arr, n - <span class="number">1</span>) * arr[n - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归版本的 <code>multiply</code> 详述如下。 在 base case 里，也就是 <code>n &lt;= 0</code> 时，返回 1。 在 <code>n</code> 比 0 大的情况里，函数会调用自身，参数 n 的值为 <code>n - 1</code>。 函数以相同的方式持续调用 <code>multiply</code>，直到 <code>n &lt;= 0</code> 为止。 所以，所有函数都可以返回，原始的 <code>multiply</code> 返回结果。</p>
<p><strong>注意：</strong> 递归函数在没有函数调用时（在这个例子是，是当 <code>n &lt;= 0</code> 时）必需有一个跳出结构，否则永远不会执行完毕。</p>
<hr>
<p><strong>使用递归创建一个倒计时</strong></p>
<p>函数返回一个从 <code>1</code> 到传递给函数的指定数字的连续数字数组。</p>
<p>正如上一个挑战提到的，会有一个 base case。 base case 告诉递归函数什么时候不再需要调用其自身。 这是简单 情况，返回得到的值。 还有 recursive call，继续用不同的参数调用自身。 如果函数无误，一直执行直到 base case 为止。</p>
<p>比如，如果想写一个递归函数，返回一个数字 <code>1</code> 到 <code>n</code> 的连续数组。 这个函数需要接收一个参数 <code>n</code> 代表最终数字。 然后会持续的调用自身，传入一个比 <code>n</code> 更小的值一直到传入的值是 <code>1</code> 为止。 函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countup</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> countArray = <span class="title function_">countup</span>(n - <span class="number">1</span>);</span><br><span class="line">    countArray.<span class="title function_">push</span>(n);</span><br><span class="line">    <span class="keyword">return</span> countArray;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countup</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<p>值 <code>[1, 2, 3, 4, 5]</code> 将显示在控制台中。</p>
<p>起初，这似乎是违反直觉的，因为 <code>n</code> 的值<em>递减</em>，但是最终数组中的值却<em>递增</em>。 之所以发生这种情况，是因为在递归调用返回之后，才调用 push。 在将 <code>n</code> pushed 进数组时，<code>countup(n - 1)</code> 已经调用赋值成功并返回了 <code>[1, 2, ..., n - 1]</code>。</p>
<hr>
<p><strong>资料查找</strong></p>
<p>我们有一个对象数组，里面存储着通讯录。</p>
<p><code>lookUpProfile</code> 函数已经写好了参数，需要 <code>name</code> 和属性 (<code>prop</code>) 参数。</p>
<p>函数将会检查通讯录中是否存在一个 <code>firstName</code> 与传入的 <code>name</code> 相同的联系人。 如果存在，那么还需要检查对应的联系人中是否存在 <code>prop</code> 属性。</p>
<p>如果它们都存在，函数返回 prop 属性对应的值。</p>
<p>如果 <code>name</code> 不对应于任何联系人，然后返回字符串 <code>No such contact</code>。</p>
<p>如果 <code>prop</code> 属性在匹配 <code>name</code> 的联系人里不存在，返回 <code>No such property</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lookUpProfile</span>(<span class="params">name, prop</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; contacts.<span class="property">length</span>; x++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (contacts[x].<span class="property">firstName</span> === name) &#123;</span><br><span class="line">      <span class="keyword">if</span> (contacts[x].<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">        <span class="keyword">return</span> contacts[x][prop];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No such property&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;No such contact&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="16"><a href="#16" class="headerlink" title="16."></a>16.</h5><h6 id="16-1-随机数"><a href="#16-1-随机数" class="headerlink" title="16.1 随机数"></a>16.1 随机数</h6><p>随机数非常适合用来创建随机行为。</p>
<p>在 JavaScript 中，可以用 <code>Math.random()</code> 生成一个在<code>0</code>（包括 0）到 <code>1</code>（不包括 1）之间的随机小数。 因此 <code>Math.random()</code> 可能返回 <code>0</code>，但绝不会返回 <code>1</code>。</p>
<hr>
<p>可以用Math.random()生成随机小数，但有时你需要生成随机整数。下面的过程会给你一个小于20的随机整数：  </p>
<ul>
<li><p>使用Math.random()生成一个随机的小数。  </p>
</li>
<li><p>将该随机小数乘以20。  </p>
</li>
<li><p>使用Math.floor()将这个数字四舍五入为最接近的整数。  </p>
</li>
<li><p>记住，Math.random()不可能完全返回1，所以不可能真正得到20，因为你是用Math.floor()四舍五入的。这个过程会给你一个在0到19范围内的随机整数。  </p>
</li>
</ul>
<p>把所有东西放在一起，这就是你的代码的样子：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>你正在调用<code>Math.random()</code>，将结果乘以20，然后将该值传给<code>Math.floor()</code>，将该值四舍五入为最近的整数。</p>
<hr>
<p>你可以在从零到给定数字的范围内生成一个随机整数。你也可以为这个范围挑选一个不同的下限数字。  </p>
<p>你将把你的最小数称为min，最大数称为max。  </p>
<p>这个公式给出了一个从min到max范围内的随机整数。仔细看看并尝试理解这行代码到底在干嘛：。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min</span><br></pre></td></tr></table></figure>

<hr>
<h6 id="16-2-parseInt-函数"><a href="#16-2-parseInt-函数" class="headerlink" title="16.2 parseInt 函数"></a>16.2 parseInt 函数</h6><p><code>parseInt()</code> 函数解析一个字符串返回一个整数。 下面是一个示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">parseInt</span>(<span class="string">&quot;007&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上述函数将字符串 <code>007</code> 转换为整数 <code>7</code>。 如果字符串中的第一个字符不能转换为数字，则返回 <code>NaN</code>。</p>
<hr>
<p><code>parseInt()</code> 函数解析一个字符串并返回一个整数。 它还可以传入第二个参数，指定了字符串中数字的基数。 基数可以是 2 到 36 之间的整数。</p>
<p>函数调用如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(string, radix);</span><br></pre></td></tr></table></figure>

<p>这是一个示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">parseInt</span>(<span class="string">&quot;11&quot;</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>变量 radix 表示 <code>11</code> 是在二进制系统中。 这个示例将字符串 <code>11</code> 转换为整数 <code>3</code>。</p>
<h6 id="16-3-三元运算符"><a href="#16-3-三元运算符" class="headerlink" title="16.3 三元运算符"></a>16.3 三元运算符</h6><p>条件运算符（ conditional operator,）（也称为三元运算符（ ternary operator））的就像写成一行的 if-else 表达式</p>
<p>语法是：<code>a ? b : c</code>, where <code>a</code> 是条件，当条件返回 <code>true</code> 的时候运行代码 <code>b</code>，当条件返回 <code>false</code> 的时候运行代码 <code>c</code>。</p>
<p>以下函数使用 <code>if/else</code> 语句来检查条件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findGreater</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a is greater&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;b is greater or equal&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这可以使用三元运算符重写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findGreater</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; b ? <span class="string">&quot;a is greater&quot;</span> : <span class="string">&quot;b is greater or equal&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将多个运算符串联在一起以检查多种条件。</p>
<p>下面的函数使用 <code>if</code>，<code>else if</code> 和 <code>else</code> 语句来检查多个条件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findGreaterOrEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a and b are equal&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a is greater&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;b is greater&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上函数可以使用多个三元运算符重写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findGreaterOrEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (a === b) ? <span class="string">&quot;a and b are equal&quot;</span> </span><br><span class="line">    : (a &gt; b) ? <span class="string">&quot;a is greater&quot;</span> </span><br><span class="line">    : <span class="string">&quot;b is greater&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上文所示，对多个三元运算符进行每个条件都是单独一行的格式化被认为是最佳做法。 使用多个三元运算符而没有适当的缩进可能会使您的代码难以理解。 例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findGreaterOrEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (a === b) ? <span class="string">&quot;a and b are equal&quot;</span> : (a &gt; b) ? <span class="string">&quot;a is greater&quot;</span> : <span class="string">&quot;b is greater&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(十)</title>
    <url>/javascript-algorithms-and-data-structures-%E5%8D%81/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="JavaScript算法和数据结构项目"><a href="#JavaScript算法和数据结构项目" class="headerlink" title="JavaScript算法和数据结构项目"></a>JavaScript算法和数据结构项目</h2><span id="more"></span>

<h2 id="1-回文检查器"><a href="#1-回文检查器" class="headerlink" title="1. 回文检查器"></a>1. 回文检查器</h2><p>如果传入的字符串是回文字符串，则返回 <code>true</code>。 否则返回 <code>false</code></p>
<p>回文 palindrome，指在忽略标点符号、大小写和空格的前提下，正着读和反着读一模一样。</p>
<p><strong>注意</strong>：<strong>检查回文时，你需要先去除所有非字母数字的字符</strong>（标点、空格和符号），并将所有字母都转换成大写或都转换成小写。</p>
<p>我们会传入具有不同格式的字符串，如 <code>racecar</code>、<code>RaceCar</code> 和 <code>race CAR</code> 等等。</p>
<p>我们也会传入一些包含特殊符号的字符串，例如 <code>2A3*3a2</code>、<code>2A3 3a2</code>、<code>2_A3*3#A2</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">palindrome</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newStr = str.<span class="title function_">split</span>(<span class="regexp">/[\W_]+/gi</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">let</span> len = newStr.<span class="property">length</span>; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newStr)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span>;i &lt; len; i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>( newStr[i] != newStr[len - i - <span class="number">1</span>])&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">palindrome</span>(<span class="string">&quot;A man, a plan, a canal. Panama&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-罗马数字转换器"><a href="#2-罗马数字转换器" class="headerlink" title="2. 罗马数字转换器"></a>2. 罗马数字转换器</h2><p>把传入的数字转为罗马数字。</p>
<table>
<thead>
<tr>
<th>罗马数字</th>
<th>阿拉伯数字</th>
</tr>
</thead>
<tbody><tr>
<td>M</td>
<td>1000</td>
</tr>
<tr>
<td>CM</td>
<td>900</td>
</tr>
<tr>
<td>D</td>
<td>500</td>
</tr>
<tr>
<td>CD</td>
<td>400</td>
</tr>
<tr>
<td>C</td>
<td>100</td>
</tr>
<tr>
<td>XC</td>
<td>90</td>
</tr>
<tr>
<td>L</td>
<td>50</td>
</tr>
<tr>
<td>XL</td>
<td>40</td>
</tr>
<tr>
<td>X</td>
<td>10</td>
</tr>
<tr>
<td>IX</td>
<td>9</td>
</tr>
<tr>
<td>V</td>
<td>5</td>
</tr>
<tr>
<td>IV</td>
<td>4</td>
</tr>
<tr>
<td>I</td>
<td>1</td>
</tr>
</tbody></table>
<p>所有罗马数字答案都应该大写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertToRoman</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> romanNumerals = [</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">1000</span>, <span class="attr">letter</span>:<span class="string">&#x27;M&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">900</span>, <span class="attr">letter</span>:<span class="string">&#x27;CM&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">500</span>, <span class="attr">letter</span>:<span class="string">&#x27;D&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">400</span>, <span class="attr">letter</span>:<span class="string">&#x27;CD&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">100</span>, <span class="attr">letter</span>:<span class="string">&#x27;C&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">90</span>, <span class="attr">letter</span>:<span class="string">&#x27;XC&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">50</span>, <span class="attr">letter</span>:<span class="string">&#x27;L&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">40</span>, <span class="attr">letter</span>:<span class="string">&#x27;XL&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">10</span>, <span class="attr">letter</span>:<span class="string">&#x27;X&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">9</span>, <span class="attr">letter</span>:<span class="string">&#x27;IX&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">5</span>, <span class="attr">letter</span>:<span class="string">&#x27;V&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">4</span>, <span class="attr">letter</span>:<span class="string">&#x27;IV&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">1</span>, <span class="attr">letter</span>:<span class="string">&#x27;I&#x27;</span>&#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> romanNumeral = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; romanNumerals.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (num &gt;= romanNumerals[i].<span class="property">value</span>) &#123;</span><br><span class="line">      romanNumeral += romanNumerals[i].<span class="property">letter</span>;</span><br><span class="line">      num -= romanNumerals[i].<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> romanNumeral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：将数字 1234 转换为罗马字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">convertToRoman</span>(<span class="number">1234</span>)); <span class="comment">// 输出 MCCXXXIV</span></span><br></pre></td></tr></table></figure>

<h2 id="3-恺撒密码"><a href="#3-恺撒密码" class="headerlink" title="3. 恺撒密码"></a>3. 恺撒密码</h2><p>恺撒密码（ Caesar cipher）是最简单且最广为人知的密码（ciphers），也被称为移位密码（shift cipher）。 在移位密码中，明文中的字母通过按照一个固定数目进行偏移后被替换成新的字母。</p>
<p>现代最常被应用到的一个变种就是 <a href="https://www.freecodecamp.org/news/how-to-code-the-caesar-cipher-an-introduction-to-basic-encryption-3bf77b4e19f7/">ROT13</a> 加密，也就是明文中的字母向后移 13 位。 也就是， <code>A ↔ N</code>，<code>B ↔ O</code> 等等。</p>
<p>编写一个函数，它将把使用 <a href="https://www.freecodecamp.org/news/how-to-code-the-caesar-cipher-an-introduction-to-basic-encryption-3bf77b4e19f7/">ROT13</a> 加密编码的字符串作为输入并返回解码字符串。</p>
<p>所有解码后的字母都必须为字母大写。 请不要解码非字母的字符（例如，空格、标点符号），但你需要在结果中保留它们。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rot13</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;str.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> charCode =str.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    <span class="keyword">if</span>(charCode&gt;=<span class="number">65</span>&amp;&amp;charCode&lt;=<span class="number">90</span>)&#123;</span><br><span class="line">      output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((charCode -<span class="number">65</span> + <span class="number">13</span>) % <span class="number">26</span> +<span class="number">65</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      output += str.<span class="title function_">charAt</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">rot13</span>(<span class="string">&quot;SERR PBQR PNZC&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-电话号码检查器"><a href="#4-电话号码检查器" class="headerlink" title="4. 电话号码检查器"></a>4. 电话号码检查器</h2><p>如果传入的字符串是一个有效的美国电话号码格式，则返回 <code>true</code>。</p>
<p>只要是有效的美国电话号码的格式，用户可以按照他们的方式填写表单中的电话号码。 以下是一些正确的例子（其他格式变形请参考以下例子）：</p>
<blockquote>
<p>555-555-5555<br>(555)555-5555<br>(555) 555-5555<br>555 555 5555<br>5555555555<br>1 555 555 5555</p>
</blockquote>
<p>在这个挑战中，参数可能是 <code>800-692-7753</code> 或者 <code>8oo-six427676;laskdjf</code> 的号码。 你的任务是根据上面不同的格式组合，判断它是否为有效的电话号码。 其中，地区码（电话号码中的前三位）是必须的。 如果提供国家代码，则国家代码只能为 <code>1</code>。 如果传入的参数是有效的美国电话号码就返回 <code>true</code>，否则返回 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">telephoneCheck</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 匹配以上四种格式之一</span></span><br><span class="line">  <span class="comment">// ^(1\s?)? 表示匹配国家代码+1（可选），后面可以有一个空格（可选）</span></span><br><span class="line">  <span class="comment">// ((\d&#123;3&#125;)|\d&#123;3&#125;) 表示匹配区号，可以使用括号，也可以直接使用3个数字</span></span><br><span class="line">  <span class="comment">// ([-.\s])? 表示匹配连接符（可选）</span></span><br><span class="line">  <span class="comment">// \d&#123;3&#125; 表示匹配3个数字，代表本地号码前半部分</span></span><br><span class="line">  <span class="comment">// ([-.\s])? 表示匹配连接符（可选）</span></span><br><span class="line">  <span class="comment">// \d&#123;4&#125; 表示匹配4个数字，代表本地号码后半部分</span></span><br><span class="line">  <span class="keyword">let</span> regex = <span class="regexp">/^(1\s?)?(\(\d&#123;3&#125;\)|\d&#123;3&#125;)([\-\.\s])?\d&#123;3&#125;([\-\.\s])?\d&#123;4&#125;$/</span>;</span><br><span class="line">  <span class="keyword">return</span> regex.<span class="title function_">test</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">telephoneCheck</span>(<span class="string">&quot;555-555-5555&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="5-计算找零"><a href="#5-计算找零" class="headerlink" title="5. 计算找零"></a>5. 计算找零</h2><p>请编写一个用于收银机的函数 <code>checkCashRegister()</code>：它的第一个参数为售价 <code>price</code>、第二个参数为支付金额 <code>cash</code>、第三个参数为收银机內的金额 <code>cid</code>。</p>
<p><code>cid</code> 是包含货币面值的二维数组。</p>
<p>函数 <code>checkCashRegister()</code> 应返回含有 <code>status</code> 属性和 <code>change</code> 属性的对象。</p>
<p>如果收银机內的金额少于应找回的零钱数，或者你无法返回确切的数目时，返回 <code>&#123;status: &quot;INSUFFICIENT_FUNDS&quot;, change: []&#125;</code>。</p>
<p>如果收银机內的金额恰好等于应找回的零钱数，返回 <code>&#123;status: &quot;CLOSED&quot;, change: [...]&#125;</code>，其中 <code>change</code> 的属性值就是收银机內的金额。</p>
<p>否则，返回 <code>&#123;status: &quot;OPEN&quot;, change: [...]&#125;</code>，其中 <code>change</code> 键值是应找回的零钱数，并将找零的面值由高到低排序。</p>
<table>
<thead>
<tr>
<th>货币单位 Unit</th>
<th>面值</th>
</tr>
</thead>
<tbody><tr>
<td>Penny</td>
<td>0.01 美元（PENNY）</td>
</tr>
<tr>
<td>Nickel</td>
<td>0.05 美元（NICKEL）</td>
</tr>
<tr>
<td>Dime</td>
<td>0.1 美元（DIME）</td>
</tr>
<tr>
<td>Quarter</td>
<td>0.25 美元（QUARTER）</td>
</tr>
<tr>
<td>Dollar</td>
<td>1 美元（ONE）</td>
</tr>
<tr>
<td>Five Dollars</td>
<td>5 美元（五）</td>
</tr>
<tr>
<td>Ten Dollars</td>
<td>10 美元（TEN）</td>
</tr>
<tr>
<td>Twenty Dollars</td>
<td>20 美元（TWENTY）</td>
</tr>
<tr>
<td>One-hundred Dollars</td>
<td>100美元（ONE HUNDRED）</td>
</tr>
</tbody></table>
<p>下面的抽屉里现金数组示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="string">&quot;PENNY&quot;</span>, <span class="number">1.01</span>],</span><br><span class="line">  [<span class="string">&quot;NICKEL&quot;</span>, <span class="number">2.05</span>],</span><br><span class="line">  [<span class="string">&quot;DIME&quot;</span>, <span class="number">3.1</span>],</span><br><span class="line">  [<span class="string">&quot;QUARTER&quot;</span>, <span class="number">4.25</span>],</span><br><span class="line">  [<span class="string">&quot;ONE&quot;</span>, <span class="number">90</span>],</span><br><span class="line">  [<span class="string">&quot;FIVE&quot;</span>, <span class="number">55</span>],</span><br><span class="line">  [<span class="string">&quot;TEN&quot;</span>, <span class="number">20</span>],</span><br><span class="line">  [<span class="string">&quot;TWENTY&quot;</span>, <span class="number">60</span>],</span><br><span class="line">  [<span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="number">100</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkCashRegister</span>(<span class="params">price, cash, cid</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> currencyUnits = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="attr">value</span>: <span class="number">100.00</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;TWENTY&quot;</span>, <span class="attr">value</span>: <span class="number">20.00</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;TEN&quot;</span>, <span class="attr">value</span>: <span class="number">10.00</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;FIVE&quot;</span>, <span class="attr">value</span>: <span class="number">5.00</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;ONE&quot;</span>, <span class="attr">value</span>: <span class="number">1.00</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;QUARTER&quot;</span>, <span class="attr">value</span>: <span class="number">0.25</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;DIME&quot;</span>, <span class="attr">value</span>: <span class="number">0.10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;NICKEL&quot;</span>, <span class="attr">value</span>: <span class="number">0.05</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;PENNY&quot;</span>, <span class="attr">value</span>: <span class="number">0.01</span> &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">//cashAvailable总金额</span></span><br><span class="line">  <span class="comment">//reduce() 方法接收的回调函数包含两个参数：total 和 current。total 初始值为 0，用于存储累加的结果，current 包含两个元素，分别是钞票类型和金额。在每次循环中，回调函数将 current 中的第二个元素加上 total，最终返回累加器的当前值。也就是将收银机中每种钞票的金额都加起来，得到收银机中总金额。</span></span><br><span class="line">  <span class="keyword">let</span> changeDue = cash - price;</span><br><span class="line">  <span class="keyword">let</span> cashAvailable = cid.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, current</span>) =&gt;</span> total + current[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> change = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (changeDue &gt; cashAvailable) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">status</span>: <span class="string">&quot;INSUFFICIENT_FUNDS&quot;</span>, <span class="attr">change</span>: [] &#125;;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">//  toFixed() 方法将其转换为指定位数的小数</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (changeDue.<span class="title function_">toFixed</span>(<span class="number">2</span>) === cashAvailable.<span class="title function_">toFixed</span>(<span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">status</span>: <span class="string">&quot;CLOSED&quot;</span>, <span class="attr">change</span>: cid &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cid = cid.<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; currencyUnits.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> currencyAmount = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (changeDue &gt;= currencyUnits[i].<span class="property">value</span> &amp;&amp; cid[i][<span class="number">1</span>] &gt;= currencyUnits[i].<span class="property">value</span>) &#123;</span><br><span class="line">        currencyAmount += currencyUnits[i].<span class="property">value</span>;</span><br><span class="line">        cid[i][<span class="number">1</span>] -= currencyUnits[i].<span class="property">value</span>;</span><br><span class="line">        changeDue -= currencyUnits[i].<span class="property">value</span>;</span><br><span class="line">        changeDue = <span class="title class_">Math</span>.<span class="title function_">round</span>(changeDue * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (currencyAmount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        change.<span class="title function_">push</span>([currencyUnits[i].<span class="property">name</span>, currencyAmount]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (changeDue &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">status</span>: <span class="string">&quot;INSUFFICIENT_FUNDS&quot;</span>, <span class="attr">change</span>: [] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">status</span>: <span class="string">&quot;OPEN&quot;</span>, <span class="attr">change</span>: change &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkCashRegister</span>(<span class="number">19.5</span>, <span class="number">20</span>, [[<span class="string">&quot;PENNY&quot;</span>, <span class="number">1.01</span>], [<span class="string">&quot;NICKEL&quot;</span>, <span class="number">2.05</span>], [<span class="string">&quot;DIME&quot;</span>, <span class="number">3.1</span>], [<span class="string">&quot;QUARTER&quot;</span>, <span class="number">4.25</span>], [<span class="string">&quot;ONE&quot;</span>, <span class="number">90</span>], [<span class="string">&quot;FIVE&quot;</span>, <span class="number">55</span>], [<span class="string">&quot;TEN&quot;</span>, <span class="number">20</span>], [<span class="string">&quot;TWENTY&quot;</span>, <span class="number">60</span>], [<span class="string">&quot;ONE HUNDRED&quot;</span>, <span class="number">100</span>]]);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(二)</title>
    <url>/javascript-algorithms-and-data-structures-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="1-比较-var-和-let-关键字的作用域"><a href="#1-比较-var-和-let-关键字的作用域" class="headerlink" title="1.比较 var 和 let 关键字的作用域"></a>1.比较 <code>var</code> 和 <code>let</code> 关键字的作用域</h3><p>使用 <code>var</code> 关键字声明变量时，它是<strong>全局声明</strong>的，如果在函数<strong>内部</strong>声明则是<strong>局部声明</strong>的。</p>
<p><code>let</code> 关键字的行为类似，但有一些额外的功能。 在代码块、语句或表达式中使用 <code>let</code> 关键字声明变量时，其<strong>作用域</strong> <strong>仅</strong>限于该代码块、语句或表达式。</p>
<span id="more"></span>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numArray = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  numArray.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p>此处控制台将显示值 <code>[0, 1, 2]</code> 和 <code>3</code>。</p>
<p>使用 <code>var</code> 关键字，<code>i</code> 是全局声明的。 所以当 <code>i++</code> 被执行时，它会更新全局变量。 此代码类似于以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numArray = [];</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  numArray.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numArray);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p>此处控制台将显示值 <code>[0, 1, 2]</code> 和 <code>3</code>。</p>
<p>如果你创建一个函数，将它存储起来，稍后在使用 <code>i</code> 变量的 <code>for</code> 循环中使用。这么做可能会出现问题。 这是因为存储的函数将始终引用更新后的全局 <code>i</code> 变量的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> printNumTwo;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">2</span>) &#123;</span><br><span class="line">    printNumTwo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">printNumTwo</span>());</span><br></pre></td></tr></table></figure>

<p>此处控制台将显示值 <code>3</code>。</p>
<p>可以看到，<code>printNumTwo()</code> 打印了 3 而不是 2。 这是因为赋值给 <code>i</code> 的值已经更新，<code>printNumTwo()</code> 返回全局的 <code>i</code>，而不是在 for 循环中创建函数时 <code>i</code> 的值。 <code>let</code> 关键字就不会出现这种现象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> printNumTwo;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">2</span>) &#123;</span><br><span class="line">    printNumTwo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">printNumTwo</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure>

<p>在这里控制台将显示值 <code>2</code> 和一个错误提示 <code>i is not defined</code>。</p>
<p><code>i</code> 未定义，因为它没有在全局范围内声明。 它只在 <code>for</code> 循环语句中被声明。 <code>printNumTwo()</code> 返回了正确的值，因为 <code>let</code> 关键字创建了三个具有唯一值（0、1 和 2）的不同 <code>i</code> 变量在循环语句中。</p>
<h3 id="2-改变一个用-const-声明的数组"><a href="#2-改变一个用-const-声明的数组" class="headerlink" title="2. 改变一个用 const 声明的数组"></a>2. 改变一个用 const 声明的数组</h3><p><code>const</code> 声明在现代 JavaScript 中有很多用例。</p>
<p>默认情况下，一些开发人员更喜欢使用 <code>const</code> 分配所有变量，除非他们知道需要重新分配值。 只有在这种情况下，他们才使用 <code>let</code>。</p>
<p>但是，重要的是要了解使用 <code>const</code> 分配给变量的对象（包括数组和函数）仍然是可变的。 使用 <code>const</code> 声明只能防止变量标识符的重新分配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">s[<span class="number">2</span>] = <span class="number">45</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure>

<p><code>s = [1, 2, 3]</code> 将导致错误。 注释掉该行后，<code>console.log</code> 将显示值 <code>[5, 6, 45]</code>。</p>
<p>如你所见，你可以改变对象 <code>[5, 6, 7]</code> 本身，变量 <code>s</code> 仍将指向更改后的数组 <code>[5, 6, 45]</code>。 像所有数组一样，<code>s</code> 中的数组元素是可变的，但是因为使用了 <code>const</code>，所以不能使用变量标识符 <code>s</code> 来指向一个使用赋值运算符的不同数组。</p>
<h3 id="3-防止对象改变"><a href="#3-防止对象改变" class="headerlink" title="3. 防止对象改变"></a>3. 防止对象改变</h3><p>为了确保数据不被改变，JavaScript 提供了一个函数 <code>Object.freeze</code>。</p>
<p>任何更改对象的尝试都将被拒绝，如果脚本在严格模式下运行，将抛出错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;FreeCodeCamp&quot;</span>,</span><br><span class="line">  <span class="attr">review</span>:<span class="string">&quot;Awesome&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line">obj.<span class="property">review</span> = <span class="string">&quot;bad&quot;</span>;</span><br><span class="line">obj.<span class="property">newProp</span> = <span class="string">&quot;Test&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); </span><br></pre></td></tr></table></figure>

<p><code>obj.review</code> 和 <code>obj.newProp</code> 赋值将导致错误，因为我们的编辑器默认在严格模式下运行，控制台将显示值 <code>&#123; name: &quot;FreeCodeCamp&quot;, review: &quot;Awesome&quot; &#125;</code>。</p>
<h3 id="4-使用箭头函数编写简洁的匿名函数"><a href="#4-使用箭头函数编写简洁的匿名函数" class="headerlink" title="4. 使用箭头函数编写简洁的匿名函数"></a>4. 使用箭头函数编写简洁的匿名函数</h3><p>在 JavaScript 里，我们会经常遇到不需要给函数命名的情况，尤其是在需要将一个函数作为参数传给另外一个函数的时候。 这时，我们会创建匿名函数。 因为这些函数不会在其他地方复用，所以我们不需要给它们命名。</p>
<p>这种情况下，我们通常会使用以下语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> myVar = <span class="string">&quot;value&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 提供了其他写匿名函数的方式的语法糖。 你可以使用<strong>箭头函数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> myVar = <span class="string">&quot;value&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当不需要函数体，只返回一个值的时候，箭头函数允许你省略 <code>return</code> 关键字和外面的大括号。 这样就可以将一个简单的函数简化成一个单行语句。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">myFunc</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;value&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这段代码默认会返回字符串 <code>value</code>。</p>
<h3 id="5-编写带参数的箭头函数"><a href="#5-编写带参数的箭头函数" class="headerlink" title="5. 编写带参数的箭头函数"></a>5. 编写带参数的箭头函数</h3><p>和一般的函数一样，你也可以给箭头函数传递参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doubler</span> = (<span class="params">item</span>) =&gt; item * <span class="number">2</span>;</span><br><span class="line"><span class="title function_">doubler</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p><code>doubler(4)</code> 将返回 <code>8</code>。</p>
<p>如果箭头函数只有一个参数，则可以省略参数外面的括号。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doubler</span> = item =&gt; item * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>可以给箭头函数传递多个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">multiplier</span> = (<span class="params">item, multi</span>) =&gt; item * multi;</span><br><span class="line"><span class="title function_">multiplier</span>(<span class="number">4</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><code>multiplier(4, 2)</code> 将返回 <code>8</code>。</p>
<h3 id="6-设置函数的默认参数"><a href="#6-设置函数的默认参数" class="headerlink" title="6. 设置函数的默认参数"></a>6. 设置函数的默认参数</h3><p>ES6 里允许给函数传入默认参数，来构建更加灵活的函数。</p>
<p>请看以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">greeting</span> = (<span class="params">name = <span class="string">&quot;Anonymous&quot;</span></span>) =&gt; <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greeting</span>(<span class="string">&quot;John&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greeting</span>());</span><br></pre></td></tr></table></figure>

<p>控制台将显示字符串 <code>Hello John</code> 和 <code>Hello Anonymous</code>。</p>
<p>默认参数会在参数没有被指定（值为 undefined）的时候起作用。 在上面的例子中，参数 <code>name</code> 会在没有得到新的值的时候，默认使用值 <code>Anonymous</code>。 你还可以给多个参数赋予默认值。</p>
<h3 id="7-将-rest-操作符与函数参数一起使用"><a href="#7-将-rest-操作符与函数参数一起使用" class="headerlink" title="7. 将 rest 操作符与函数参数一起使用"></a>7. 将 <code>rest</code> 操作符与函数参数一起使用</h3><p>ES6 推出了用于函数参数的 <code>rest</code> 操作符帮助我们创建更加灵活的函数。 <code>rest</code> 操作符可以用于创建有一个变量来接受多个参数的函数。 这些参数被储存在一个可以在函数内部读取的数组中。</p>
<p>请看以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">howMany</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;You have passed &quot;</span> + args.<span class="property">length</span> + <span class="string">&quot; arguments.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">howMany</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">howMany</span>(<span class="string">&quot;string&quot;</span>, <span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123; &#125;));</span><br></pre></td></tr></table></figure>

<p>控制台将显示字符串 <code>You have passed 3 arguments.</code> 和 <code>You have passed 4 arguments.</code>。</p>
<p>rest 参数使我们不需要使用 <code>arguments</code> 对象，允许我们对传递给函数 <code>howMany</code> 的参数数组使用数组方法。</p>
<h3 id="8-使用-spread-运算符展开数组项"><a href="#8-使用-spread-运算符展开数组项" class="headerlink" title="8. 使用 spread 运算符展开数组项"></a>8. 使用 <code>spread</code> 运算符展开数组项</h3><p>ES6 引入了展开操作符，可以展开数组以及需要多个参数或元素的表达式。</p>
<p>下面的 ES5 代码使用了 <code>apply()</code> 来计算数组的最大值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">6</span>, <span class="number">89</span>, <span class="number">3</span>, <span class="number">45</span>];</span><br><span class="line"><span class="keyword">var</span> maximus = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br></pre></td></tr></table></figure>

<p><code>maximus</code> 的值为 <code>89</code>。</p>
<p>我们必须使用 <code>Math.max.apply(null, arr)</code>，因为 <code>Math.max(arr)</code> 返回 <code>NaN</code>。 <code>Math.max()</code> 函数中需要传入的是一系列由逗号分隔的参数，而不是一个数组。 展开操作符可以提升代码的可读性，使代码易于维护。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">6</span>, <span class="number">89</span>, <span class="number">3</span>, <span class="number">45</span>];</span><br><span class="line"><span class="keyword">const</span> maximus = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr);</span><br></pre></td></tr></table></figure>

<p><code>maximus</code> 的值应该是 <code>89</code>。</p>
<p><code>...arr</code> 返回一个解压的数组。 In other words, it spreads the array. 然而，展开操作符只能够在函数的参数中或者数组中使用。 For example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> spreaded = [...arr];</span><br></pre></td></tr></table></figure>

<p>However, the following code will not work:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> spreaded = ...arr;</span><br></pre></td></tr></table></figure>

<h3 id="9-使用解构赋值来获取对象的值"><a href="#9-使用解构赋值来获取对象的值" class="headerlink" title="9. 使用解构赋值来获取对象的值"></a>9. 使用解构赋值来获取对象的值</h3><p>解构赋值是 ES6 引入的新语法，用来从数组和对象中提取值，并优雅地对变量进行赋值。</p>
<p>有如下 ES5 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = user.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">const</span> age = user.<span class="property">age</span>;</span><br></pre></td></tr></table></figure>

<p><code>name</code> 的值应该是字符串 <code>John Doe</code>， <code>age</code> 的值应该是数字 <code>34</code>。</p>
<p>下面是使用 ES6 解构赋值语句，实现相同效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = user;</span><br></pre></td></tr></table></figure>

<p>同样，<code>name</code> 的值应该是字符串 <code>John Doe</code>， <code>age</code> 的值应该是数字 <code>34</code>。</p>
<p>在这里，自动创建 <code>name</code> 和 <code>age</code> 变量，并将 <code>user</code> 对象相应属性的值赋值给它们。 这个方法简洁多了。</p>
<p>你可以从对象中提取尽可能多或很少的值。</p>
<h3 id="10-使用解构赋值从对象中分配变量"><a href="#10-使用解构赋值从对象中分配变量" class="headerlink" title="10. 使用解构赋值从对象中分配变量"></a>10. 使用解构赋值从对象中分配变量</h3><p>可以给解构的值赋予一个新的变量名， 通过在赋值的时候将新的变量名放在冒号后面来实现。</p>
<p>还是以上个例子的对象来举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;;</span><br></pre></td></tr></table></figure>

<p>这是指定新的变量名的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: userName, <span class="attr">age</span>: userAge &#125; = user;</span><br></pre></td></tr></table></figure>

<p>你可以这么理解这段代码：获取 <code>user.name</code> 的值，将它赋给一个新的变量 <code>userName</code>，等等。 <code>userName</code> 的值将是字符串 <code>John Doe</code>，<code>userAge</code> 的值将是数字 <code>34</code></p>
<h3 id="11-使用解构赋值从嵌套对象中分配变量"><a href="#11-使用解构赋值从嵌套对象中分配变量" class="headerlink" title="11. 使用解构赋值从嵌套对象中分配变量"></a>11. 使用解构赋值从嵌套对象中分配变量</h3><p>使用与前面的例子中类似的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">johnDoe</span>: &#123; </span><br><span class="line">    <span class="attr">age</span>: <span class="number">34</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;johnDoe@freeCodeCamp.com&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这是解构对象的属性值赋值给具有相同名字的变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">johnDoe</span>: &#123; age, email &#125;&#125; = user;</span><br></pre></td></tr></table></figure>

<p>这是将对象的属性值赋值给具有不同名字的变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">johnDoe</span>: &#123; <span class="attr">age</span>: userAge, <span class="attr">email</span>: userEmail &#125;&#125; = user;</span><br></pre></td></tr></table></figure>

<h3 id="12-使用解构赋值从数组中分配变量"><a href="#12-使用解构赋值从数组中分配变量" class="headerlink" title="12. 使用解构赋值从数组中分配变量"></a>12. 使用解构赋值从数组中分配变量</h3><p>在 ES6 里面，解构数组可以如同解构对象一样简单。</p>
<p>与数组解构不同，数组的扩展运算会将数组里的所有内容分解成一个由逗号分隔的列表。 所以，你不能选择哪个元素来给变量赋值。</p>
<p>而对数组进行解构却可以让我们做到这一点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br></pre></td></tr></table></figure>

<p>控制台将显示 <code>a</code> 和 <code>b</code> 的值为 <code>1, 2</code>。</p>
<p>数组的第一个值被赋值给变量 <code>a</code>，数组的第二个值被赋值给变量 <code>b</code>。 我们甚至能在数组解构中使用逗号分隔符，来获取任意一个想要的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b,,, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br></pre></td></tr></table></figure>

<p>控制台将显示 <code>a</code>、<code>b</code> 和 <code>c</code> 的值为 <code>1, 2, 5</code>。</p>
<h3 id="13-通过-rest-参数解构"><a href="#13-通过-rest-参数解构" class="headerlink" title="13. 通过 rest 参数解构"></a>13. 通过 rest 参数解构</h3><p>在解构数组的某些情况下，我们可能希望将剩下的元素放进另一个数组里面。</p>
<p>以下代码的结果与使用 <code>Array.prototype.slice()</code> 类似：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, ...arr] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>

<p>控制台将显示 <code>1, 2</code> 和 <code>[3, 4, 5, 7]</code>。</p>
<p>变量 <code>a</code> 和 <code>b</code> 分别接收数组的第一个和第二个值。 之后，因为 rest 语法，<code>arr</code> 以数组形式接收了剩余的值。 rest 参数只能对数组列表最后的元素起作用。 这意味着你不能使用 rest 语法来省略原数组最后一个元素、截取中间的元素作为子数组。</p>
<h3 id="14-使用解构赋值将对象作为函数的参数传递"><a href="#14-使用解构赋值将对象作为函数的参数传递" class="headerlink" title="14. 使用解构赋值将对象作为函数的参数传递"></a>14. 使用解构赋值将对象作为函数的参数传递</h3><p>在某些情况下，你可以在函数的参数里直接解构对象。</p>
<p>请看以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">profileUpdate</span> = (<span class="params">profileData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age, nationality, location &#125; = profileData;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的操作解构了传给函数的对象。 这样的操作也可以直接在参数里完成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">profileUpdate</span> = (<span class="params">&#123; name, age, nationality, location &#125;</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>profileData</code> 被传递到上面的函数时，从函数参数中解构出值以在函数内使用。</p>
<h3 id="15-使用模板字面量创建字符串"><a href="#15-使用模板字面量创建字符串" class="headerlink" title="15. 使用模板字面量创建字符串"></a>15. 使用模板字面量创建字符串</h3><p>模板字符串是 ES6 的另外一项新的功能。 这是一种可以轻松构建复杂字符串的方法。</p>
<p>模板字符串可以使用多行字符串和字符串插值功能。</p>
<p>请看以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Zodiac Hasbro&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">56</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, my name is <span class="subst">$&#123;person.name&#125;</span>!I am <span class="subst">$&#123;person.age&#125;</span> years old.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting);</span><br></pre></td></tr></table></figure>

<p>控制台将显示字符串 <code>Hello, my name is Zodiac Hasbro!</code> 和 <code>I am 56 years old.</code>。</p>
<p>这里发生了许多事情。 首先，这个例子使用反引号（<code>`</code>），而不是引号（<code>&#39;</code> 或者 <code>&quot;</code>）将字符串括起来。 其次，注意代码和输出中的字符串都是多行的。 不需要在字符串中插入 <code>\n</code>。 上面使用的 <code>$&#123;variable&#125;</code> 语法是一个占位符。 这样一来，你将不再需要使用 <code>+</code> 运算符来连接字符串。 当需要在字符串里增加变量的时候，你只需要在变量的外面括上 <code>$&#123;</code> 和 <code>&#125;</code>，并将其放在模板字符串里就可以了。 同样，你可以在字符串中包含其他表达式，例如 <code>$&#123;a + b&#125;</code>。 这个新的方式使你可以更灵活地创建复杂的字符串。</p>
<h3 id="16-使用简单字段编写简洁的对象字面量声明"><a href="#16-使用简单字段编写简洁的对象字面量声明" class="headerlink" title="16. 使用简单字段编写简洁的对象字面量声明"></a>16. 使用简单字段编写简洁的对象字面量声明</h3><p>ES6 添加了一些很棒的功能，用于更方便地定义对象。</p>
<p>请看以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getMousePosition</span> = (<span class="params">x, y</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">x</span>: x,</span><br><span class="line">  <span class="attr">y</span>: y</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>getMousePosition</code> 简单的函数，返回拥有两个属性的对象。 ES6 提供了一个语法糖，消除了类似 <code>x: x</code> 这种冗余的写法。 你可以只写一次 <code>x</code>，解释器会自动将其转换成 <code>x: x</code>（或效果相同的内容）。 下面是使用这种语法重写的同样的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getMousePosition</span> = (<span class="params">x, y</span>) =&gt; (&#123; x, y &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="17-用-ES6-编写简洁的函数声明"><a href="#17-用-ES6-编写简洁的函数声明" class="headerlink" title="17. 用 ES6 编写简洁的函数声明"></a>17. 用 ES6 编写简洁的函数声明</h3><p>在 ES5 中，当我们需要在对象中定义一个函数的时候，必须像这样使用 <code>function</code> 关键字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Taylor&quot;</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>用 ES6 的语法在对象中定义函数的时候，可以删除 <code>function</code> 关键词和冒号。 请看以下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Taylor&quot;</span>,</span><br><span class="line">  <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello! My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="18-使用-class-语法定义构造函数"><a href="#18-使用-class-语法定义构造函数" class="headerlink" title="18. 使用 class 语法定义构造函数"></a>18. 使用 class 语法定义构造函数</h3><p>ES6 提供了一个新的创建对象的语法，使用关键字 class。</p>
<p>在 ES5 里面，我们通过定义一个函数 <code>constructor</code> 来创建一个对象，然后使用 <code>new</code> 关键字来实例化对象。</p>
<p>在 ES6 里，<code>class</code> 声明有一个 <code>constructor</code> 方法，与 <code>new</code> 关键字一起被调用。 如果 <code>constructor</code> 方法没有明确定义，那么它就被含蓄地定义为没有参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Explicit constructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpaceShuttle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">targetPlanet</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">targetPlanet</span> = targetPlanet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">takeOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;To &quot;</span> + <span class="variable language_">this</span>.<span class="property">targetPlanet</span> + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implicit constructor </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rocket</span> &#123;</span><br><span class="line">  <span class="title function_">launch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;To the moon!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zeus = <span class="keyword">new</span> <span class="title class_">SpaceShuttle</span>(<span class="string">&#x27;Jupiter&#x27;</span>);</span><br><span class="line"><span class="comment">// prints To Jupiter! in console</span></span><br><span class="line">zeus.<span class="title function_">takeOff</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> atlas = <span class="keyword">new</span> <span class="title class_">Rocket</span>();</span><br><span class="line"><span class="comment">// prints To the moon! in console</span></span><br><span class="line">atlas.<span class="title function_">launch</span>();</span><br></pre></td></tr></table></figure>

<p>应该注意 <code>class</code> 关键字声明了一个新的函数，里面添加了一个构造函数。 当用 <code>new</code> 创建一个新的对象时，构造函数会被调用。</p>
<p><strong>注意：</strong>首字母大写驼峰命名法 UpperCamelCase 是 ES6 class 命名的惯例，就像上面的 <code>SpaceShuttle</code>。</p>
<p><code>constructor</code> 方法是一个特殊方法，用于创建和初始化 class 创建的对象。 在 JavaScript 算法和数据结构认证的面向对象编程章节里会更深入介绍它。</p>
<h3 id="19-使用-getter-和-setter-来控制对象的访问"><a href="#19-使用-getter-和-setter-来控制对象的访问" class="headerlink" title="19. 使用 getter 和 setter 来控制对象的访问"></a>19. 使用 getter 和 setter 来控制对象的访问</h3><p>你可以从对象中获得一个值，也可以给对象的属性赋值。</p>
<p>这些操作通常被称为 getters 以及 setters。</p>
<p>Getter 函数的作用是可以让对象返回一个私有变量，而不需要直接去访问私有变量。</p>
<p>Setter 函数的作用是可以基于传进的参数来修改对象中私有变量。 这些修改可以是计算，或者是直接替换之前的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">author</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_author</span> = author;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">writer</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_author</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// setter</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">writer</span>(<span class="params">updatedAuthor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_author</span> = updatedAuthor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> novel = <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&#x27;anonymous&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(novel.<span class="property">writer</span>);</span><br><span class="line">novel.<span class="property">writer</span> = <span class="string">&#x27;newAuthor&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(novel.<span class="property">writer</span>);</span><br></pre></td></tr></table></figure>

<p>控制台将显示字符串 <code>anonymous</code> 和 <code>newAuthor</code>。</p>
<p>请注意用于调用 getter 和 setter 的语法。 它们甚至看起来不像是函数。 getter 和 setter 非常重要，因为它们隐藏了内部的实现细节。</p>
<p><strong>注意：</strong> 通常会在私有变量前添加下划线（<code>_</code>）。 然而，这种做法本身并不是将变量变成私有的。</p>
<h3 id="20-创建一个模块脚本"><a href="#20-创建一个模块脚本" class="headerlink" title="20. 创建一个模块脚本"></a>20. 创建一个模块脚本</h3><p>起初，JavaScript 几乎只在 HTML web 扮演一个很小的角色。 今天，一切不同了，很多网站几乎全是用 JavaScript 所写。 为了让 JavaScript 更模块化、更整洁以及更易于维护，ES6 引入了在多个 JavaScript 文件之间共享代码的机制。 它可以导出文件的一部分供其它文件使用，然后在需要它的地方按需导入。 为了使用这一功能， 需要在 HTML 文档里创建一个 <code>type</code> 为 <code>module</code> 的脚本。 例子如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;filename.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用了 <code>module</code> 类型的脚本可以使用 <code>import</code> 和 <code>export</code> 特性</p>
<h3 id="21-用-export-来重用代码块"><a href="#21-用-export-来重用代码块" class="headerlink" title="21. 用 export 来重用代码块"></a>21. 用 export 来重用代码块</h3><p>假设有一个文件 <code>math_functions.js</code>，该文件包含了数学运算相关的一些函数。 其中一个存储在变量 <code>add</code> 里，该函数接受两个数字作为参数返回它们的和。 你想在几个不同的 JavaScript 文件中使用这个函数。 要实现这个目的，就需要 <code>export</code> 它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是导出单个函数常用方法，还可以这样导出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;;</span><br></pre></td></tr></table></figure>

<p>导出变量和函数后，就可以在其它文件里导入使用从而避免了代码冗余。 重复第一个例子的代码可以导出多个对象或函数，在第二个例子里面的导出语句中添加更多值也可以导出多项，例子如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; add, subtract &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="22-通过-import-复用-JavaScript-代码"><a href="#22-通过-import-复用-JavaScript-代码" class="headerlink" title="22. 通过 import 复用 JavaScript 代码"></a>22. 通过 import 复用 JavaScript 代码</h3><p><code>import</code> 可以导入文件或模块的一部分。 在之前的课程里，例子从 <code>math_functions.js</code> 文件里导出了 <code>add</code>。 下面看一下如何在其它文件导入它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./math_functions.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>在这里，<code>import</code> 会在 <code>math_functions.js</code> 里找到 <code>add</code>，只导入这个函数，忽略剩余的部分。 <code>./</code> 告诉程序在当前文件的相同目录寻找 <code>math_functions.js</code> 文件。 用这种方式导入时，相对路径（<code>./</code>）和文件扩展名（<code>.js</code>）都是必需的。</p>
<p>通过在 <code>import</code> 语句里添加项目，可以从文件里导入多个项目，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math_functions.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="23-用-从文件中导入所有内容"><a href="#23-用-从文件中导入所有内容" class="headerlink" title="23. 用 * 从文件中导入所有内容"></a>23. 用 * 从文件中导入所有内容</h3><p>假设你有一个文件，你希望将其所有内容导入到当前文件中。 可以用 <code>import * as</code> 语法来实现。 下面是一个从同目录下的 <code>math_functions.js</code> 文件中导入所有内容的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myMathModule <span class="keyword">from</span> <span class="string">&quot;./math_functions.js&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面的 <code>import</code> 语句会创建一个叫作 <code>myMathModule</code> 的对象。 这只是一个变量名，可以随便命名。 对象包含 <code>math_functions.js</code> 文件里的所有导出，可以像访问对象的属性那样访问里面的函数。 下面是使用导入的 <code>add</code> 和 <code>subtract</code> 函数的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myMathModule.<span class="title function_">add</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">myMathModule.<span class="title function_">subtract</span>(<span class="number">5</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="24-用-export-default-创建一个默认导出"><a href="#24-用-export-default-创建一个默认导出" class="headerlink" title="24. 用 export default 创建一个默认导出"></a>24. 用 export default 创建一个默认导出</h3><p>在 <code>export</code> 的课程中，你学习了命名导出语法， 这可以在其他文件中引用一些函数或者变量。</p>
<p>还需要了解另外一种被称为默认导出的 <code>export</code> 的语法。 在文件中只有一个值需要导出的时候，通常会使用这种语法。 它也常常用于给文件或者模块创建返回值。</p>
<p>下面是使用 <code>export default</code> 的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个是命名函数，第二个是匿名函数。</p>
<p><code>export default</code> 用于为模块或文件声明一个返回值，在每个文件或者模块中应当只默认导出一个值。 此外，你不能将 <code>export default</code> 与 <code>var</code>、<code>let</code> 或 <code>const</code> 同时使用。</p>
<h3 id="25-导入一个默认的导出"><a href="#25-导入一个默认的导出" class="headerlink" title="25. 导入一个默认的导出"></a>25. 导入一个默认的导出</h3><p>需要一种 <code>import</code> 的语法来导入默认的导出。 在下面的例子里，<code>add</code> 是 <code>math_functions.js</code> 文件的默认导出。 以下是如何导入它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&quot;./math_functions.js&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这个语法有一处特别的地方， 被导入的 <code>add</code> 值没有被花括号（<code>&#123;&#125;</code>）所包围。 <code>add</code> 只是一个变量的名字，对应 <code>math_functions.js</code> 文件的任何默认导出值。 在导入默认导出时，可以使用任何名字。</p>
<h3 id="26-创建一个-JavaScript-Promise"><a href="#26-创建一个-JavaScript-Promise" class="headerlink" title="26. 创建一个 JavaScript Promise"></a>26. 创建一个 JavaScript Promise</h3><p>Promise 是异步编程的一种解决方案 - 它在未来的某时会生成一个值。 任务完成，分执行成功和执行失败两种情况。 <code>Promise</code> 是构造器函数，需要通过 <code>new</code> 关键字来创建。 构造器参数是一个函数，该函数有两个参数 - <code>resolve</code> 和 <code>reject</code>。 通过它们来判断 promise 的执行结果。 用法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="27-通过-resolve-和-reject-完成-Promise"><a href="#27-通过-resolve-和-reject-完成-Promise" class="headerlink" title="27. 通过 resolve 和 reject 完成 Promise"></a>27. 通过 resolve 和 reject 完成 Promise</h3><p>Promise 有三个状态：<code>pending</code>、<code>fulfilled</code> 和 <code>rejected</code>。 上一个挑战里创建的 promise 一直阻塞在 <code>pending</code> 状态里，因为没有调用 promise 的完成方法。 Promise 提供的 <code>resolve</code> 和 <code>reject</code> 参数就是用来结束 promise 的。 Promise 成功时调用 <code>resolve</code>，promise 执行失败时调用 <code>reject</code>， 如下文所述，这些方法需要有一个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(condition here) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;Promise was fulfilled&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;Promise was rejected&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的示例使用字符串作为这些函数的参数，但参数实际上可以是任何格式。 通常，它可能是一个包含数据的对象，你可以将它放在网站或其他地方。</p>
<h3 id="28-用-then-处理-Promise-完成的情况"><a href="#28-用-then-处理-Promise-完成的情况" class="headerlink" title="28. 用 then 处理 Promise 完成的情况"></a>28. 用 then 处理 Promise 完成的情况</h3><p>当程序需要花费未知的时间才能完成时（比如一些异步操作），一般是服务器请求，promise 很有用。 服务器请求会花费一些时间，当结束时，需要根据服务器的响应执行一些操作。 这可以用 <code>then</code> 方法来实现， 当 promise 完成 <code>resolve</code> 时会触发 <code>then</code> 方法。 例子如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>result</code> 即传入 <code>resolve</code> 方法的参数。</p>
<h3 id="29-使用-catch-处理-Promise-失败的情况"><a href="#29-使用-catch-处理-Promise-失败的情况" class="headerlink" title="29. 使用 catch 处理 Promise 失败的情况"></a>29. 使用 catch 处理 Promise 失败的情况</h3><p>当 promise 失败时会调用 <code>catch</code> 方法。 当 promise 的 <code>reject</code> 方法执行时会直接调用。 用法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>error</code> 是传入 <code>reject</code> 方法的参数。</p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(三)</title>
    <url>/javascript-algorithms-and-data-structures-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="1-使用测试方法"><a href="#1-使用测试方法" class="headerlink" title="1. 使用测试方法"></a>1. 使用测试方法</h3><p>在编程语言中，正则表达式用于匹配指定的字符串。 通过正则表达式创建匹配模式（规则）可以帮你完成指定匹配。</p>
<span id="more"></span>

<p>如果想要在字符串 <code>The dog chased the cat</code> 中匹配到 <code>the</code> 这个单词，可以使用如下正则表达式：<code>/the/</code>。 注意，正则表达式中不需要引号。</p>
<p>JavaScript 中有多种使用正则表达式的方法。 测试正则表达式的一种方法是使用 <code>.test()</code> 方法。 <code>.test()</code> 方法会把编写的正则表达式和字符串（即括号内的内容）匹配，如果成功匹配到字符，则返回 <code>true</code>，反之，返回 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testStr = <span class="string">&quot;freeCodeCamp&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> testRegex = <span class="regexp">/Code/</span>;</span><br><span class="line">testRegex.<span class="title function_">test</span>(testStr);</span><br></pre></td></tr></table></figure>

<p><code>test</code> 方法会返回 <code>true</code>。</p>
<h3 id="2-匹配文字字符串"><a href="#2-匹配文字字符串" class="headerlink" title="2. 匹配文字字符串"></a>2. 匹配文字字符串</h3><p>在字符串中搜寻 <code>Kevin</code> 的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testStr = <span class="string">&quot;Hello, my name is Kevin.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> testRegex = <span class="regexp">/Kevin/</span>;</span><br><span class="line">testRegex.<span class="title function_">test</span>(testStr);</span><br></pre></td></tr></table></figure>

<p><code>test</code> 方法会返回 <code>true</code>。</p>
<p>任何其他形式的 <code>Kevin</code> 都不会被匹配。 例如，正则表达式 <code>/Kevin/</code> 不会匹配 <code>kevin</code> 或者<code>KEVIN</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wrongRegex = <span class="regexp">/kevin/</span>;</span><br><span class="line">wrongRegex.<span class="title function_">test</span>(testStr);</span><br></pre></td></tr></table></figure>

<p>此 <code>test</code> 调用将返回 <code>false</code>。</p>
<h3 id="3-同时用多种模式匹配文字字符串"><a href="#3-同时用多种模式匹配文字字符串" class="headerlink" title="3. 同时用多种模式匹配文字字符串"></a>3. 同时用多种模式匹配文字字符串</h3><p>使用正则表达式<code>/coding/</code>，你可以在其他字符串中查找<code>coding</code>。</p>
<p>这对于搜寻单个字符串非常有用，但仅限于一种匹配模式。 你可以使用 <code>alternation</code> 或 <code>OR</code> 操作符搜索多个模式： <code>|</code></p>
<p>此操作符匹配操作符前面或后面的字符。 例如，如果你想匹配 <code>yes</code> 或 <code>no</code>，你需要的正则表达式是 <code>/yes|no/</code>。</p>
<p>你还可以匹配多个规则，这可以通过添加更多的匹配模式来实现。 这些匹配模式将包含更多的 <code>OR</code> 操作符来分隔它们，比如<code>/yes|no|maybe/</code>。</p>
<h3 id="4-匹配时忽略大小写-i"><a href="#4-匹配时忽略大小写-i" class="headerlink" title="4. 匹配时忽略大小写 i"></a>4. 匹配时忽略大小写 <code>i</code></h3><p>到目前为止，已经了解了如何用正则表达式来执行字符串的匹配。 但有时候，并不关注匹配字母的大小写。</p>
<p>大小写即大写字母和小写字母。 大写字母如 <code>A</code>、<code>B</code> 和 <code>C</code>。 小写字母如 <code>a</code>、<code>b</code> 和 <code>c</code>。</p>
<p>可以使用标志（flag）来匹配这两种情况。 标志有很多，不过这里我们只关注忽略大小写的标志——<code>i</code>。 可以通过将它附加到正则表达式之后来使用它。 这里给出使用该标志的一个实例 <code>/ignorecase/i</code>。 这个字符串可以匹配字符串 <code>ignorecase</code>、<code>igNoreCase</code> 和 <code>IgnoreCase</code>。</p>
<h3 id="5-提取匹配项-match"><a href="#5-提取匹配项-match" class="headerlink" title="5. 提取匹配项 .match()"></a>5. 提取匹配项 <code>.match()</code></h3><p>可以使用 <code>.match()</code> 方法来提取找到的实际匹配项。</p>
<p>可以使用字符串来调用 <code>.match()</code> 方法，并在括号内传入正则表达式。</p>
<p>请看下面的举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello, World!&quot;</span>.<span class="title function_">match</span>(<span class="regexp">/Hello/</span>);</span><br><span class="line"><span class="keyword">let</span> ourStr = <span class="string">&quot;Regular expressions&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ourRegex = <span class="regexp">/expressions/</span>;</span><br><span class="line">ourStr.<span class="title function_">match</span>(ourRegex);</span><br></pre></td></tr></table></figure>

<p>这里第一个 <code>match</code> 将返回 <code>[&quot;Hello&quot;]</code> 第二个将返回 <code>[&quot;expressions&quot;]</code>。</p>
<p>请注意， <code>.match</code> 语法是目前为止一直使用的 <code>.test</code> 方法中的“反向”：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;string&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/regex/</span>);</span><br><span class="line"><span class="regexp">/regex/</span>.<span class="title function_">test</span>(<span class="string">&#x27;string&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="6-全局匹配-g"><a href="#6-全局匹配-g" class="headerlink" title="6. 全局匹配 g"></a>6. 全局匹配 <code>g</code></h3><p>到目前为止，只能提取或搜寻一次模式匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testStr = <span class="string">&quot;Repeat, Repeat, Repeat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ourRegex = <span class="regexp">/Repeat/</span>;</span><br><span class="line">testStr.<span class="title function_">match</span>(ourRegex);</span><br></pre></td></tr></table></figure>

<p>在这里 <code>match</code> 将返回 <code>[&quot;Repeat&quot;]</code>。</p>
<p>要多次搜索或提取模型，你可以使用全局搜索标志： <code>g</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> repeatRegex = <span class="regexp">/Repeat/g</span>;</span><br><span class="line">testStr.<span class="title function_">match</span>(repeatRegex);</span><br></pre></td></tr></table></figure>

<p>这里 <code>match</code> 返回值 <code>[&quot;Repeat&quot;, &quot;Repeat&quot;, &quot;Repeat&quot;]</code></p>
<h3 id="7-用通配符匹配任何内容"><a href="#7-用通配符匹配任何内容" class="headerlink" title="7. 用通配符匹配任何内容 ."></a>7. 用通配符匹配任何内容 <code>.</code></h3><p>有时不（或不需要）知道匹配模式中的确切字符。 如果要精确匹配到完整的单词，那出现一个拼写错误就会匹配不到。 幸运的是，可以使用通配符 <code>.</code> 来处理这种情况。</p>
<p>通配符 <code>.</code> 将匹配任何一个字符。 通配符也叫 <code>dot</code> 或 <code>period</code>。 可以像使用正则表达式中任何其他字符一样使用通配符。 例如，如果想匹配 <code>hug</code>、<code>huh</code>、<code>hut</code> 和 <code>hum</code>，可以使用正则表达式 <code>/hu./</code> 匹配以上四个单词。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> humStr = <span class="string">&quot;I&#x27;ll hum a song&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> hugStr = <span class="string">&quot;Bear hug&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> huRegex = <span class="regexp">/hu./</span>;</span><br><span class="line">huRegex.<span class="title function_">test</span>(humStr);</span><br><span class="line">huRegex.<span class="title function_">test</span>(hugStr);</span><br></pre></td></tr></table></figure>

<p>上面的 <code>test</code> 都会返回 <code>true</code>。</p>
<h3 id="8-将单个字符与多种可能性匹配"><a href="#8-将单个字符与多种可能性匹配" class="headerlink" title="8. 将单个字符与多种可能性匹配 []"></a>8. 将单个字符与多种可能性匹配 <code>[]</code></h3><p>已经了解了文字匹配模式（<code>/literal/</code>）和通配符（<code>/./</code>）。 这是正则表达式的两种极端情况，一种是精确匹配，而另一种则是匹配所有。 在这两种极端情况之间有一个平衡选项。</p>
<p>可以使用字符集 （character classes）更灵活的匹配字符。 可以把字符集放在方括号（<code>[</code> 和 <code>]</code>）之间来定义一组需要匹配的字符串。</p>
<p>例如，如果想要匹配 <code>bag</code>、<code>big</code> 和 <code>bug</code>，但是不想匹配 <code>bog</code>。 可以创建正则表达式 <code>/b[aiu]g/</code> 来执行此操作。 <code>[aiu]</code> 是只匹配字符 <code>a</code>、<code>i</code> 或者 <code>u</code> 的字符集。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bigStr = <span class="string">&quot;big&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> bagStr = <span class="string">&quot;bag&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> bugStr = <span class="string">&quot;bug&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> bogStr = <span class="string">&quot;bog&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> bgRegex = <span class="regexp">/b[aiu]g/</span>;</span><br><span class="line">bigStr.<span class="title function_">match</span>(bgRegex);</span><br><span class="line">bagStr.<span class="title function_">match</span>(bgRegex);</span><br><span class="line">bugStr.<span class="title function_">match</span>(bgRegex);</span><br><span class="line">bogStr.<span class="title function_">match</span>(bgRegex);</span><br></pre></td></tr></table></figure>

<p>按顺序排列，四次 <code>match</code> 调用将返回值 <code>[&quot;big&quot;]</code>、<code>[&quot;bag&quot;]</code>、<code>[&quot;bug&quot;]</code> 和 <code>null</code>。</p>
<h3 id="9-匹配字母表中的字母"><a href="#9-匹配字母表中的字母" class="headerlink" title="9. 匹配字母表中的字母 -"></a>9. 匹配字母表中的字母 <code>-</code></h3><p>了解了如何使用字符集（character sets）来指定要匹配的一组字符串，但是有时需要匹配大量字符（例如，字母表中的每个字母）。 有一种写法可以让实现这个功能变得简短。</p>
<p>在字符集中，可以使用连字符（<code>-</code>）来定义要匹配的字符范围。</p>
<p>例如，要匹配小写字母 <code>a</code> 到 <code>e</code>，你可以使用 <code>[a-e]</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> catStr = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> batStr = <span class="string">&quot;bat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> matStr = <span class="string">&quot;mat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> bgRegex = <span class="regexp">/[a-e]at/</span>;</span><br><span class="line">catStr.<span class="title function_">match</span>(bgRegex);</span><br><span class="line">batStr.<span class="title function_">match</span>(bgRegex);</span><br><span class="line">matStr.<span class="title function_">match</span>(bgRegex);</span><br></pre></td></tr></table></figure>

<p>按顺序排列，三次 <code>match</code> 调用将返回值 <code>[&quot;cat&quot;]</code>，<code>[&quot;bat&quot;]</code> 和 <code>null</code>。</p>
<h3 id="10-匹配字母表中的数字和字母"><a href="#10-匹配字母表中的数字和字母" class="headerlink" title="10. 匹配字母表中的数字和字母"></a>10. 匹配字母表中的数字和字母</h3><p>使用连字符（<code>-</code>）匹配字符范围并不仅限于字母。 它还可以匹配一系列数字。</p>
<p>例如，<code>/[0-5]/</code> 匹配 <code>0</code> 和 <code>5</code> 之间的任意数字，包含 <code>0</code> 和 <code>5</code>。</p>
<p>此外，还可以在单个字符集中组合一系列字母和数字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jennyStr = <span class="string">&quot;Jenny8675309&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myRegex = <span class="regexp">/[a-z0-9]/ig</span>;</span><br><span class="line">jennyStr.<span class="title function_">match</span>(myRegex);</span><br></pre></td></tr></table></figure>

<h3 id="11-匹配单个未指定的字符"><a href="#11-匹配单个未指定的字符" class="headerlink" title="11. 匹配单个未指定的字符 ^"></a>11. 匹配单个未指定的字符 <code>^</code></h3><p>可以创建一个不想匹配的字符集合。 这些类型的字符集称为否定字符集（ negated character sets）。</p>
<p>要创建否定字符集，需要在开始括号后面和不想匹配的字符前面放置脱字符（即<code>^</code>）。</p>
<p>例如，<code>/[^aeiou]/gi</code> 匹配所有非元音字符。 注意，字符 <code>.</code>、<code>!</code>、<code>[</code>、<code>@</code>、<code>/</code> 和空白字符等也会被匹配，该否定字符集仅排除元音字符。</p>
<h3 id="12-匹配出现一次或多次的字符"><a href="#12-匹配出现一次或多次的字符" class="headerlink" title="12. 匹配出现一次或多次的字符 +"></a>12. 匹配出现一次或多次的字符 <code>+</code></h3><p>有时，需要匹配出现一次或者连续多次的的字符（或字符组）。 这意味着它至少出现一次，并且可能重复出现。</p>
<p>可以使用 <code>+</code> 符号来检查情况是否如此。 记住，字符或匹配模式必须一个接一个地连续出现。 这就是说，字符必须一个接一个地重复。</p>
<p>例如，<code>/a+/g</code> 会在 <code>abc</code> 中匹配到一个匹配项，并且返回 <code>[&quot;a&quot;]</code>。 因为 <code>+</code> 的存在，它也会在 <code>aabc</code> 中匹配到一个匹配项，然后返回 <code>[&quot;aa&quot;]</code>。</p>
<p>如果它是检查字符串 <code>abab</code>，它将匹配到两个匹配项并且返回<code>[&quot;a&quot;, &quot;a&quot;]</code>，因为<code>a</code>字符不连续，在它们之间有一个<code>b</code>字符。 最后，因为在字符串 <code>bcd</code> 中没有 <code>a</code>，因此找不到匹配项。</p>
<h3 id="13-匹配出现零次或多次的字符"><a href="#13-匹配出现零次或多次的字符" class="headerlink" title="13. 匹配出现零次或多次的字符 *"></a>13. 匹配出现零次或多次的字符 <code>*</code></h3><p>匹配出现零次或多次的字符。</p>
<p>执行该操作的字符叫做星号，即<code>*</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> soccerWord = <span class="string">&quot;gooooooooal!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> gPhrase = <span class="string">&quot;gut feeling&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> oPhrase = <span class="string">&quot;over the moon&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> goRegex = <span class="regexp">/go*/</span>;</span><br><span class="line">soccerWord.<span class="title function_">match</span>(goRegex);</span><br><span class="line">gPhrase.<span class="title function_">match</span>(goRegex);</span><br><span class="line">oPhrase.<span class="title function_">match</span>(goRegex);</span><br></pre></td></tr></table></figure>

<p>按顺序排列，三次 <code>match</code> 调用将返回值 <code>[&quot;goooooooo&quot;]</code>，<code>[&quot;g&quot;]</code> 和 <code>null</code>。</p>
<h3 id="14-用惰性匹配来查找字符"><a href="#14-用惰性匹配来查找字符" class="headerlink" title="14. 用惰性匹配来查找字符"></a>14. 用惰性匹配来查找字符</h3><p>在正则表达式中，贪婪（greedy）匹配会匹配到符合正则表达式匹配模式的字符串的最长可能部分，并将其作为匹配项返回。 另一种方案称为懒惰（lazy）匹配，它会匹配到满足正则表达式的字符串的最小可能部分。</p>
<p>可以将正则表达式 <code>/t[a-z]*i/</code> 应用于字符串 <code>&quot;titanic&quot;</code>。 这个正则表达式是一个以 <code>t</code> 开始，以 <code>i</code> 结束，并且中间有一些字母的匹配模式。</p>
<p>正则表达式默认是贪婪匹配，因此匹配返回为 <code>[&quot;titani&quot;]</code>。 它会匹配到适合该匹配模式的最大子字符串。</p>
<p>但是，你可以使用 <code>?</code> 字符来将其变成懒惰匹配。 调整后的正则表达式 <code>/t[a-z]*?i/</code> 匹配字符串 <code>&quot;titanic&quot;</code> 返回 <code>[&quot;ti&quot;]</code>。</p>
<p><strong>注意</strong>：应该避免使用正则表达式解析 HTML，但是可以用正则表达式匹配 HTML 字符串。</p>
<h3 id="15-在狩猎中找到一个或多个罪犯"><a href="#15-在狩猎中找到一个或多个罪犯" class="headerlink" title="15. 在狩猎中找到一个或多个罪犯"></a>15. 在狩猎中找到一个或多个罪犯</h3><p>是时候停一停来测试你的正则表达式使用能力了。 一群罪犯越狱逃跑了，但你不知道有多少人。 然而，你知道他们不在一起时会保持紧密联系。 你有责任立刻找到所有的罪犯。</p>
<p>这里有一个示例来提示如何做到这一点：</p>
<p>当字母<code>z</code>在一行中出现一次或连续多次时，正则表达式<code>/z+/</code>会匹配到它。 它会在以下所有字符串中找到匹配项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;z&quot;</span></span><br><span class="line"><span class="string">&quot;zzzzzz&quot;</span></span><br><span class="line"><span class="string">&quot;ABCzzzz&quot;</span></span><br><span class="line"><span class="string">&quot;zzzzABC&quot;</span></span><br><span class="line"><span class="string">&quot;abczzzzzzzzzzzzzzzzzzzzzabc&quot;</span></span><br></pre></td></tr></table></figure>

<p>但是它不会在以下字符串中找到匹配项，因为它们中没有字母<code>z</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;ABC&quot;</span></span><br><span class="line"><span class="string">&quot;abcabc&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="16-匹配字符串的开头"><a href="#16-匹配字符串的开头" class="headerlink" title="16. 匹配字符串的开头 ^"></a>16. 匹配字符串的开头 <code>^</code></h3><p>正则表达式可以用于查找多项匹配。 还可以查询字符串中符合指定匹配模式的字符。</p>
<p>使用字符集中前插入符号（<code>^</code>）来创建一个否定字符集，形如 <code>[^thingsThatWillNotBeMatched]</code>。 除了在字符集中使用之外，插入符号（^）用于匹配文本是否在字符串的开始位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> firstString = <span class="string">&quot;Ricky is first and can be found.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> firstRegex = <span class="regexp">/^Ricky/</span>;</span><br><span class="line">firstRegex.<span class="title function_">test</span>(firstString);</span><br><span class="line"><span class="keyword">let</span> notFirst = <span class="string">&quot;You can&#x27;t find Ricky now.&quot;</span>;</span><br><span class="line">firstRegex.<span class="title function_">test</span>(notFirst);</span><br></pre></td></tr></table></figure>

<p>第一次 <code>test</code> 调用将返回 <code>true</code>，而第二次调用将返回 <code>false</code>。</p>
<h3 id="17-匹配字符串的末尾"><a href="#17-匹配字符串的末尾" class="headerlink" title="17. 匹配字符串的末尾 $"></a>17. 匹配字符串的末尾 <code>$</code></h3><p>可以搜寻字符串末尾的匹配模式。</p>
<p>可以使用正则表达式的美元符号 <code>$</code> 来搜寻字符串的结尾。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> theEnding = <span class="string">&quot;This is a never ending story&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> storyRegex = <span class="regexp">/story$/</span>;</span><br><span class="line">storyRegex.<span class="title function_">test</span>(theEnding);</span><br><span class="line"><span class="keyword">let</span> noEnding = <span class="string">&quot;Sometimes a story will have to end&quot;</span>;</span><br><span class="line">storyRegex.<span class="title function_">test</span>(noEnding);</span><br></pre></td></tr></table></figure>

<p>第一次 <code>test</code> 调用将返回 <code>true</code>, 而第二次调用将返回 <code>false</code>。</p>
<h3 id="18-匹配所有的字母和数字-w"><a href="#18-匹配所有的字母和数字-w" class="headerlink" title="18. 匹配所有的字母和数字 \w"></a>18. 匹配所有的字母和数字 <code>\w</code></h3><p>使用元字符，可以使用 <code>[a-z]</code> 搜寻字母表中的所有字母。 这种元字符是很常见的，它有一个缩写，但这个缩写也包含额外的字符。</p>
<p>JavaScript 中与字母表匹配的最接近的元字符是<code>\w</code>。 这个缩写等同于<code>[A-Za-z0-9_]</code>。 此字符类匹配大写字母和小写字母以及数字。 注意，这个字符类也包含下划线字符 (<code>_</code>)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> longHand = <span class="regexp">/[A-Za-z0-9_]+/</span>;</span><br><span class="line"><span class="keyword">let</span> shortHand = <span class="regexp">/\w+/</span>;</span><br><span class="line"><span class="keyword">let</span> numbers = <span class="string">&quot;42&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> varNames = <span class="string">&quot;important_var&quot;</span>;</span><br><span class="line">longHand.<span class="title function_">test</span>(numbers);</span><br><span class="line">shortHand.<span class="title function_">test</span>(numbers);</span><br><span class="line">longHand.<span class="title function_">test</span>(varNames);</span><br><span class="line">shortHand.<span class="title function_">test</span>(varNames);</span><br></pre></td></tr></table></figure>

<p>上面的 <code>test</code> 都会返回 <code>true</code>。</p>
<p>这些元字符缩写也被称为短语元字符 shorthand character classes。</p>
<h3 id="19-匹配除了字母和数字的所有符号-W"><a href="#19-匹配除了字母和数字的所有符号-W" class="headerlink" title="19. 匹配除了字母和数字的所有符号 \W"></a>19. 匹配除了字母和数字的所有符号 <code>\W</code></h3><p>已经了解到可以使用缩写 <code>\w</code> 来匹配字母和数字 <code>[A-Za-z0-9_]</code>。 不过，有可能想要搜寻的匹配模式是非字母数字字符。</p>
<p>可以使用 <code>\W</code> 搜寻和 <code>\w</code> 相反的匹配模式。 注意，相反匹配模式使用大写字母。 此缩写与 <code>[^A-Za-z0-9_]</code> 是一样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> shortHand = <span class="regexp">/\W/</span>;</span><br><span class="line"><span class="keyword">let</span> numbers = <span class="string">&quot;42%&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">&quot;Coding!&quot;</span>;</span><br><span class="line">numbers.<span class="title function_">match</span>(shortHand);</span><br><span class="line">sentence.<span class="title function_">match</span>(shortHand);</span><br></pre></td></tr></table></figure>

<p>第一次 <code>match</code> 调用将返回值 <code>[&quot;%&quot;]</code> 而第二次调用将返回 <code>[&quot;!&quot;]</code>。</p>
<h3 id="20-匹配所有数字-d"><a href="#20-匹配所有数字-d" class="headerlink" title="20. 匹配所有数字 \d"></a>20. 匹配所有数字 <code>\d</code></h3><p>已经了解了常见字符串匹配模式的元字符，如字母数字。 另一个常见的匹配模式是只寻找数字。</p>
<p>查找数字字符的缩写是 <code>\d</code>，注意是小写的 <code>d</code>。 这等同于元字符 <code>[0-9]</code>，它查找 0 到 9 之间任意数字的单个字符。</p>
<h3 id="21-匹配所有非数字-D"><a href="#21-匹配所有非数字-D" class="headerlink" title="21. 匹配所有非数字 \D"></a>21. 匹配所有非数字 <code>\D</code></h3><p>可以使用类似的缩写来搜寻非数字，该缩写使用大写的 <code>D</code>。</p>
<p>查找非数字字符的缩写是 <code>\D</code>。 这等同于字符串 <code>[^0-9]</code>，它查找不是 0 - 9 之间数字的单个字符。</p>
<h3 id="22-限制可能的用户名"><a href="#22-限制可能的用户名" class="headerlink" title="22. 限制可能的用户名"></a>22. 限制可能的用户名</h3><p>用户名在互联网上随处可见。 它们是用户在自己喜欢的网站上的唯一身份。</p>
<p>需要检索数据库中的所有用户名。 以下是用户在创建用户名时必须遵守的一些简单规则。</p>
<ol>
<li><p>用户名只能是数字字母字符。</p>
</li>
<li><p>用户名中的数字必须在最后。 数字可以有零个或多个。 用户名不能以数字开头。</p>
</li>
<li><p>用户名字母可以是小写字母和大写字母。</p>
</li>
<li><p>用户名长度必须至少为两个字符。 两位用户名只能使用字母。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> username = <span class="string">&quot;JackOfAllTrades&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> userCheck = <span class="regexp">/^[a-z][a-z]+\d*$|^[a-z]\d\d+$/i</span>; <span class="comment">// 修改这一行</span></span><br><span class="line"><span class="keyword">let</span> result = userCheck.<span class="title function_">test</span>(username);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<h3 id="23-匹配空白字符-s"><a href="#23-匹配空白字符-s" class="headerlink" title="23. 匹配空白字符 \s"></a>23. 匹配空白字符 <code>\s</code></h3><p>还可以匹配字符之间的空格。</p>
<p>可以使用 <code>\s</code> 搜寻空格，其中 <code>s</code> 是小写。 此匹配模式将匹配空格、回车符、制表符、换页符和换行符。 可以认为这类似于元字符 <code>[ \r\t\f\n\v]</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> whiteSpace = <span class="string">&quot;Whitespace. Whitespace everywhere!&quot;</span></span><br><span class="line"><span class="keyword">let</span> spaceRegex = <span class="regexp">/\s/g</span>;</span><br><span class="line">whiteSpace.<span class="title function_">match</span>(spaceRegex);</span><br></pre></td></tr></table></figure>

<p>这个 <code>match</code> 调用将返回 <code>[&quot; &quot;, &quot; &quot;]</code>。</p>
<h3 id="24-匹配非空白字符-S"><a href="#24-匹配非空白字符-S" class="headerlink" title="24. 匹配非空白字符  \S"></a>24. 匹配非空白字符  <code>\S</code></h3><p>可以搜寻除了空格之外的所有内容。</p>
<p>使用 <code>\S</code> 搜寻非空白字符，其中 <code>s</code> 是大写。 此匹配模式将不匹配空格、回车符、制表符、换页符和换行符。 可以认为这类似于元字符 <code>[^ \r\t\f\n\v]</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> whiteSpace = <span class="string">&quot;Whitespace. Whitespace everywhere!&quot;</span></span><br><span class="line"><span class="keyword">let</span> nonSpaceRegex = <span class="regexp">/\S/g</span>;</span><br><span class="line">whiteSpace.<span class="title function_">match</span>(nonSpaceRegex).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<p>返回值的 <code>.length</code> 应该是 <code>32</code>。</p>
<h3 id="25-指定匹配的上限和下限"><a href="#25-指定匹配的上限和下限" class="headerlink" title="25. 指定匹配的上限和下限"></a>25. 指定匹配的上限和下限</h3><p>回想一下，使用加号 <code>+</code> 查找一个或多个字符，使用星号 <code>*</code> 查找零个或多个字符。 这些都很方便，但有时需要匹配一定范围的匹配模式。</p>
<p>可以使用数量说明符（quantity specifiers）指定匹配模式的上下限。 数量说明符与花括号（<code>&#123;</code> 和 <code>&#125;</code>）一起使用。 可以在花括号之间放两个数字，这两个数字代表匹配模式的上限和下限。</p>
<p>例如，要匹配出现 <code>3</code> 到 <code>5</code> 次字母 <code>a</code> 的在字符串 <code>ah</code>，正则表达式应为<code>/a&#123;3,5&#125;h/</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">A4</span> = <span class="string">&quot;aaaah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A2</span> = <span class="string">&quot;aah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> multipleA = <span class="regexp">/a&#123;3,5&#125;h/</span>;</span><br><span class="line">multipleA.<span class="title function_">test</span>(<span class="variable constant_">A4</span>);</span><br><span class="line">multipleA.<span class="title function_">test</span>(<span class="variable constant_">A2</span>);</span><br></pre></td></tr></table></figure>

<p>第一次 <code>test</code> 调用将返回 <code>true</code>，而第二次调用将返回 <code>false</code>。</p>
<h3 id="26-只指定匹配的下限"><a href="#26-只指定匹配的下限" class="headerlink" title="26. 只指定匹配的下限"></a>26. 只指定匹配的下限</h3><p>可以使用带有花括号的数量说明符来指定匹配模式的上下限。 但有时候只想指定匹配模式的下限而不需要指定上限。</p>
<p>为此，在第一个数字后面跟一个逗号即可。</p>
<p>例如，要匹配至少出现 <code>3</code> 次字母 <code>a</code> 的字符串 <code>hah</code>，正则表达式应该是 <code>/ha&#123;3,&#125;h/</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">A4</span> = <span class="string">&quot;haaaah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A2</span> = <span class="string">&quot;haah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A100</span> = <span class="string">&quot;h&quot;</span> + <span class="string">&quot;a&quot;</span>.<span class="title function_">repeat</span>(<span class="number">100</span>) + <span class="string">&quot;h&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> multipleA = <span class="regexp">/ha&#123;3,&#125;h/</span>;</span><br><span class="line">multipleA.<span class="title function_">test</span>(<span class="variable constant_">A4</span>);</span><br><span class="line">multipleA.<span class="title function_">test</span>(<span class="variable constant_">A2</span>);</span><br><span class="line">multipleA.<span class="title function_">test</span>(<span class="variable constant_">A100</span>);</span><br></pre></td></tr></table></figure>

<p>按顺序排列，三次 <code>test</code> 调用将返回值 <code>true</code>，<code>false</code> 和 <code>true</code>。</p>
<h3 id="27-指定匹配的确切数量"><a href="#27-指定匹配的确切数量" class="headerlink" title="27. 指定匹配的确切数量"></a>27. 指定匹配的确切数量</h3><p>可以使用带有花括号的数量说明符来指定匹配模式的上下限。 但有时只需要特定数量的匹配。</p>
<p>要指定一定数量的匹配模式，只需在大括号之间放置一个数字。</p>
<p>例如，要只匹配字母 <code>a</code> 出现 <code>3</code> 次的单词<code>hah</code>，正则表达式应为<code>/ha&#123;3&#125;h/</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable constant_">A4</span> = <span class="string">&quot;haaaah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A3</span> = <span class="string">&quot;haaah&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">A100</span> = <span class="string">&quot;h&quot;</span> + <span class="string">&quot;a&quot;</span>.<span class="title function_">repeat</span>(<span class="number">100</span>) + <span class="string">&quot;h&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> multipleHA = <span class="regexp">/ha&#123;3&#125;h/</span>;</span><br><span class="line">multipleHA.<span class="title function_">test</span>(<span class="variable constant_">A4</span>);</span><br><span class="line">multipleHA.<span class="title function_">test</span>(<span class="variable constant_">A3</span>);</span><br><span class="line">multipleHA.<span class="title function_">test</span>(<span class="variable constant_">A100</span>);</span><br></pre></td></tr></table></figure>

<p>按顺序排列，三次 <code>test</code> 调用将返回值 <code>false</code>，<code>true</code> 和 <code>false</code>。</p>
<h3 id="28-检查全部或无"><a href="#28-检查全部或无" class="headerlink" title="28. 检查全部或无 ?"></a>28. 检查全部或无 <code>?</code></h3><p>有时，想要搜寻的匹配模式可能有不确定是否存在的部分。 尽管如此，还是想检查它们。</p>
<p>为此，可以使用问号 <code>?</code> 指定可能存在的元素。 这将检查前面的零个或一个元素。 可以将此符号视为前面的元素是可选的。</p>
<p>例如，美式英语和英式英语略有不同，可以使用问号来匹配两种拼写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> american = <span class="string">&quot;color&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> british = <span class="string">&quot;colour&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> rainbowRegex= <span class="regexp">/colou?r/</span>;</span><br><span class="line">rainbowRegex.<span class="title function_">test</span>(american);</span><br><span class="line">rainbowRegex.<span class="title function_">test</span>(british);</span><br></pre></td></tr></table></figure>

<p>上面的 <code>test</code> 都会返回 <code>true</code>。</p>
<h3 id="29-正向先行断言和负向先行断言"><a href="#29-正向先行断言和负向先行断言" class="headerlink" title="29. 正向先行断言和负向先行断言"></a>29. 正向先行断言和负向先行断言</h3><p>先行断言 （Lookaheads）是告诉 JavaScript 在字符串中向前查找的匹配模式。 当想要在同一个字符串上搜寻多个匹配模式时，这可能非常有用。</p>
<p>有两种先行断言：正向先行断言（positive lookahead）和负向先行断言（negative lookahead）。</p>
<p>正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。 正向先行断言的用法是 <code>(?=...)</code>，其中 <code>...</code> 就是需要存在但不会被匹配的部分。</p>
<p>另一方面，负向先行断言会查看并确保搜索匹配模式中的元素不存在。 负向先行断言的用法是 <code>(?!...)</code>，其中 <code>...</code> 是希望不存在的匹配模式。 如果负向先行断言部分不存在，将返回匹配模式的其余部分。</p>
<p>尽管先行断言有点儿令人困惑，但是这些示例会有所帮助。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> quit = <span class="string">&quot;qu&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> noquit = <span class="string">&quot;qt&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> quRegex= <span class="regexp">/q(?=u)/</span>;</span><br><span class="line"><span class="keyword">let</span> qRegex = <span class="regexp">/q(?!u)/</span>;</span><br><span class="line">quit.<span class="title function_">match</span>(quRegex);</span><br><span class="line">noquit.<span class="title function_">match</span>(qRegex);</span><br></pre></td></tr></table></figure>

<p>这两次 <code>match</code> 调用都将返回 <code>[&quot;q&quot;]</code>。</p>
<p>先行断言的更实际用途是检查一个字符串中的两个或更多匹配模式。 这里有一个简单的密码检查器，密码规则是 3 到 6 个字符且至少包含一个数字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> checkPass = <span class="regexp">/(?=\w&#123;3,6&#125;)(?=\D*\d)/</span>;</span><br><span class="line">checkPass.<span class="title function_">test</span>(password);</span><br></pre></td></tr></table></figure>

<h3 id="30-检查混合字符组"><a href="#30-检查混合字符组" class="headerlink" title="30. 检查混合字符组"></a>30. 检查混合字符组</h3><p>有时候我们想使用正则表达式里的括号 <code>()</code> 来检查字符组。</p>
<p>如果想在字符串找到 <code>Penguin</code> 或 <code>Pumpkin</code>，可以用这个正则表达式：<code>/P(engu|umpk)in/g</code>。</p>
<p>然后使用 <code>test()</code> 方法检查 test 字符串里面是否包含字符组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testStr = <span class="string">&quot;Pumpkin&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> testRegex = <span class="regexp">/P(engu|umpk)in/</span>;</span><br><span class="line">testRegex.<span class="title function_">test</span>(testStr);</span><br></pre></td></tr></table></figure>

<p><code>test</code> 方法会返回 <code>true</code>。</p>
<h3 id="31-使用捕获组重用模式"><a href="#31-使用捕获组重用模式" class="headerlink" title="31. 使用捕获组重用模式"></a>31. 使用捕获组重用模式</h3><p>当你想要匹配一个像下面这样多次出现的单词，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> repeatStr = <span class="string">&quot;row row row your boat&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>你可以使用 <code>/row row row/</code>。但如果你不知道重复的特定单词，怎么办？ 捕获组 可以用于找到重复的子字符串。</p>
<p>捕获组是通过把要捕获的正则表达式放在括号中来构建的。 在这个例子里， 目标是捕获一个包含字母数字字符的词，所以捕获组是将 <code>\w+</code> 放在括号中：<code>/(\w+)/</code>。</p>
<p>分组匹配的子字符串被保存到一个临时的“变量”， 可以使用同一正则表达式和反斜线及捕获组的编号来访问它（例如：<code>\1</code>）。 捕获组按其开头括号的位置自动编号（从左到右），从 1 开始。</p>
<p>下面的示例是匹配被空格隔开的两个相同单词：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> repeatRegex = <span class="regexp">/(\w+) \1 \1/</span>;</span><br><span class="line">repeatRegex.<span class="title function_">test</span>(repeatStr); <span class="comment">// Returns true</span></span><br><span class="line">repeatStr.<span class="title function_">match</span>(repeatRegex); <span class="comment">// Returns [&quot;row row row&quot;, &quot;row&quot;]</span></span><br></pre></td></tr></table></figure>

<p>在字符串上调用 <code>.match()</code> 方法将返回一个数组，其中包含它最终匹配到的子字符串及其捕获组。</p>
<h3 id="32-使用捕获组搜索和替换"><a href="#32-使用捕获组搜索和替换" class="headerlink" title="32. 使用捕获组搜索和替换"></a>32. 使用捕获组搜索和替换</h3><p>搜索功能是很有用的。 但是，当搜索同时也执行更改（或替换）匹配文本的操作时，搜索功能就会显得更加强大。</p>
<p>可以在字符串上使用 <code>.replace()</code> 方法来搜索并替换字符串中的文本。 <code>.replace()</code> 的输入首先是想要搜索的正则表达式匹配模式。 第二个参数是用于替换匹配的字符串或用于执行某些操作的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wrongText = <span class="string">&quot;The sky is silver.&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> silverRegex = <span class="regexp">/silver/</span>;</span><br><span class="line">wrongText.<span class="title function_">replace</span>(silverRegex, <span class="string">&quot;blue&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>replace</code> 调用将返回字符串 <code>The sky is blue.</code>。</p>
<p>你还可以使用美元符号（<code>$</code>）访问替换字符串中的捕获组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Code Camp&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/(\w+)\s(\w+)/</span>, <span class="string">&#x27;$2 $1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>调用 <code>replace</code> 将返回字符串 <code>Camp Code</code>。</p>
<h3 id="33-删除开头和结尾的空白"><a href="#33-删除开头和结尾的空白" class="headerlink" title="33. 删除开头和结尾的空白"></a>33. 删除开头和结尾的空白</h3><p>有时字符串周围存在的空白字符并不是必需的。 字符串的典型处理是删除字符串开头和结尾处的空格。</p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(四)</title>
    <url>/javascript-algorithms-and-data-structures-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="1-使用控制台检查变量值"><a href="#1-使用控制台检查变量值" class="headerlink" title="1. 使用控制台检查变量值"></a>1. 使用控制台检查变量值</h3><p>Chrome 和 Firefox 都有出色的 JavaScript 控制台（也称为 DevTools），可以用来调试 JavaScript 代码</p>
<span id="more"></span>

<p>可以在 Chrome 的菜单中找到“开发者工具”或 FireFox 的菜单中的 “Web 控制台”。 如果你使用其他浏览器或手机，我们强烈建议你切换到桌面版 Firefox 或 Chrome。</p>
<p><code>console.log()</code> 方法可能是最有用的调试工具，它可以将括号中的内容输出到控制台。 将它放在代码中的关键点可以显示变量在当时的值。 在查看输出之前，最好先想清楚输出应该是什么。 在整个代码中使用检查点来查看计算状态将有助于缩小问题的范围。</p>
<p>下面是输出 <code>Hello world!</code> 字符串到控制台的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello world!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-了解-freeCodeCamp-和浏览器控制台之间的差异"><a href="#2-了解-freeCodeCamp-和浏览器控制台之间的差异" class="headerlink" title="2. 了解 freeCodeCamp 和浏览器控制台之间的差异"></a>2. 了解 freeCodeCamp 和浏览器控制台之间的差异</h3><p>你可能已经注意到一些 freeCodeCamp 的挑战有自己的控制台。 这个控制台的行为与浏览器控制台有些不同。</p>
<p>有许多方法可以与 <code>console</code> 一起使用来输出消息。 <code>log</code>、<code>warn</code> 和 <code>clear</code> 就是几个例子。 freeCodeCamp 控制台只会输出 <code>log</code> 消息，而浏览器控制台会输出所有消息。 当你对你的代码进行修改时，它将自动运行并显示日志。 每次代码运行时，freeCodeCamp 控制台都会被清除。</p>
<h3 id="3-使用-type-of-检查变量的类型"><a href="#3-使用-type-of-检查变量的类型" class="headerlink" title="3. 使用 type of 检查变量的类型"></a>3. 使用 type of 检查变量的类型</h3><p>可以使用 <code>typeof</code> 检查变量的数据结构或类型。 在处理多种数据类型时，这会对调试很有帮助。 如果想计算两数之和，但实际传入了一个字符串参数，则结果可能是错误的。 类型错误可能隐藏在计算或函数调用中。 当你以 JavaScript 对象（JSON）的形式访问和使用外部数据时尤其要小心。</p>
<p>下面是使用 <code>typeof</code> 的一些示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>控制台将按顺序显示字符串 <code>string</code>、<code>number</code>、<code>object</code> 和 <code>object</code>。</p>
<p>JavaScript 有七种原始（不可变）数据类型： <code>Boolean</code>，<code>Null</code>，<code>Undefined</code>，<code>Number</code>，<code>String</code>，<code>Symbol</code> （new with ES6），<code>BigInt</code> （new with ES2020）和一种可变数据类型：<code>Object</code>。 注意：在 JavaScript 中，数组在本质上是一种对象。</p>
<h3 id="4-捕获拼错的变量名和函数名"><a href="#4-捕获拼错的变量名和函数名" class="headerlink" title="4. 捕获拼错的变量名和函数名"></a>4. 捕获拼错的变量名和函数名</h3><p><code>console.log()</code> 和 <code>typeof</code> 方法是检查中间值和程序输出类型的两种主要方法。 现在是时候了解一下 bug 出现的常见的情形。 一个语法级别的问题是打字太快带来的低级拼写错误。</p>
<p>变量或函数名的错写、漏写或大小写弄混都会让浏览器尝试查找并不存在的东西，并报出“引用错误”。 JavaScript 变量和函数名称区分大小写。</p>
<h3 id="5-捕获未闭合的括号、方括号、大括号和引号"><a href="#5-捕获未闭合的括号、方括号、大括号和引号" class="headerlink" title="5. 捕获未闭合的括号、方括号、大括号和引号"></a>5. 捕获未闭合的括号、方括号、大括号和引号</h3><p>要注意的另一个语法错误是所有的小括号、方括号、花括号和引号都必须配对。 当你编辑代码并插入新代码其中带有括号时，很容易忘记括号闭合。 此外，在将代码块嵌套到其他代码块时要小心，例如将回调函数作为参数添加到方法中。</p>
<p>避免这种错误的一种方法是，一次性输入完这些符号，然后将光标移回它们之间继续编写。 好在现在大部分编辑器都会帮你自动补全。</p>
<ol>
<li><a href="https://www.freecodecamp.org/chinese/learn/javascript-algorithms-and-data-structures">JavaScript 算法和数据结构</a></li>
<li><a href="https://www.freecodecamp.org/chinese/learn/javascript-algorithms-and-data-structures/#debugging">调试</a></li>
</ol>
<h3 id="6-捕捉单引号和双引号的混合用法"><a href="#6-捕捉单引号和双引号的混合用法" class="headerlink" title="6. 捕捉单引号和双引号的混合用法"></a>6. 捕捉单引号和双引号的混合用法</h3><p>JavaScript 允许使用单引号（<code>&#39;</code>）和双引号（<code>&quot;</code>）声明字符串。 决定使用哪一个通常看个人偏好，但有一些例外。</p>
<p>如果字符串中有缩写或存在一段带引号的文本，你就会明白为什么 JavaScript 允许两种引号了。 请注意，不要提前用引号结束字符串，这会导致语法错误。</p>
<p>下面是混合使用引号的一些示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> grouchoContraction = <span class="string">&quot;I&#x27;ve had a perfectly wonderful evening, but this wasn&#x27;t it.&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> quoteInString = <span class="string">&quot;Groucho Marx once said &#x27;Quote me as saying I was mis-quoted.&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> uhOhGroucho = <span class="string">&#x27;I&#x27;</span>ve had a perfectly wonderful evening, but <span class="variable language_">this</span> wasn<span class="string">&#x27;t it.&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>前两项是正确的，但第三项是不正确的。</p>
<p>当然，只使用一种引号也是可以的。 可以使用反斜杠（<code>\</code>）来转义字符串内的引号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allSameQuotes = <span class="string">&#x27;I\&#x27;ve had a perfectly wonderful evening, but this wasn\&#x27;t it.&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-捕获使用赋值运算符而不是相等运算符"><a href="#7-捕获使用赋值运算符而不是相等运算符" class="headerlink" title="7. 捕获使用赋值运算符而不是相等运算符"></a>7. 捕获使用赋值运算符而不是相等运算符</h3><p>分支程序，即在满足某些条件时执行不同操作的程序，依赖于 JavaScript 中的<code>if</code>，<code>else if</code>、<code>else</code>语句。 条件有时采取测试一个结果是否等于一个值的形式。</p>
<p>这种逻辑可以表述为“如果 x 等于 y ，则……”，听起来像是可以使用 <code>=</code>（即赋值运算符）。 然而，这会导致程序中流程出问题。</p>
<p>如前面的挑战所述，JavaScript 中的赋值运算符 (<code>=</code>) 是用来为变量名赋值的。 并且 <code>==</code> 和 <code>===</code> 运算符检查相等性（三等号 <code>===</code> 是用来测试是否严格相等的，严格相等的意思是值和类型都必须相同）。</p>
<p>下面的代码将 <code>x</code> 赋值为 2，表达式会在执行后得到 <code>true</code>。 JavaScript 会把大部分的值都视为 <code>true</code>，除了所谓的 “falsy”值，即：<code>false</code>、<code>0</code>、<code>&quot;&quot;</code>（空字符串）、<code>NaN</code>、<code>undefined</code> 和 <code>null</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x = y) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，除非 <code>y</code> 值是假值，否则当 <code>y</code> 为任何值时，<code>if</code> 语句中的代码块都会运行。 我们期望运行的 <code>else</code> 代码块实际上将不会运行。</p>
<h3 id="8-捕捉函数调用后缺少的左括号和右括号"><a href="#8-捕捉函数调用后缺少的左括号和右括号" class="headerlink" title="8. 捕捉函数调用后缺少的左括号和右括号"></a>8. 捕捉函数调用后缺少的左括号和右括号</h3><p>当函数或方法不接受任何参数时，你可能忘记在调用它时加上空的左括号和右括号。 通常，函数调用的结果会保存在变量中，供其他代码使用。 可以通过将变量值（或其类型）打印到控制台，查看输出究竟是一个函数引用还是函数调用的返回值来检测这类错误。</p>
<p>下面示例中的两个变量是不同的:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;You rock!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> varOne = myFunction;</span><br><span class="line"><span class="keyword">let</span> varTwo = <span class="title function_">myFunction</span>();</span><br></pre></td></tr></table></figure>

<p>这里 <code>varOne</code> 是函数 <code>myFunction</code> ，<code>varTwo</code> 是字符串 <code>You rock!</code></p>
<h3 id="9-调用函数时，捕获以错误顺序传递的参数"><a href="#9-调用函数时，捕获以错误顺序传递的参数" class="headerlink" title="9. 调用函数时，捕获以错误顺序传递的参数"></a>9. 调用函数时，捕获以错误顺序传递的参数</h3><p>继续讨论调用函数，需要注意的下一个 bug 是函数的参数传递顺序错误。 如果参数分别是不同的类型，例如接受数组和整数两个参数的函数，参数顺序传错就可能会引发运行时错误。 对于接受相同类型参数的函数，传错参数也会导致逻辑错误或运行结果错误。 确保以正确的顺序提供所有必需的参数以避免这些问题。</p>
<h3 id="10-捕获使用索引的时候出现的错误"><a href="#10-捕获使用索引的时候出现的错误" class="headerlink" title="10. 捕获使用索引的时候出现的错误"></a>10. 捕获使用索引的时候出现的错误</h3><p>当试图访问字符串或数组的特定索引（分割或访问一个片段）或循环索引时，有时会出现 Off by one errors 错误（有时称为 OBOE）。 JavaScript 索引从 0 开始，而不是 1，这意味着最后一个索引总会比字符串或数组的长度少 1。 如果尝试访问等于长度的索引，程序可能会抛出“索引超出范围”引用错误或打印出 <code>undefined</code>。</p>
<p>当使用将索引范围作为参数的字符串或数组方法时，阅读相关的文档并了解参数中的索引的包含性（即是否考虑进返回值中）很重要。 以下是一些错误的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> len = alphabet.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= len; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; len; k++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(alphabet[k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个例子多了一次循环，第二个例子少了一次循环（漏掉了索引 0 处的字符）， 第三个例子是正确的。</p>
<h3 id="11-重新初始化循环中的变量时要小心"><a href="#11-重新初始化循环中的变量时要小心" class="headerlink" title="11. 重新初始化循环中的变量时要小心"></a>11. 重新初始化循环中的变量时要小心</h3><p>有时需要在循环中保存信息以增加计数器或重置变量。 一个潜在的问题是变量什么时候该重新初始化，什么时候不该重新初始化，反之亦然。 如果你不小心重置了用于终止条件的变量，导致无限循环，这将特别危险。</p>
<p>使用<code>console.log()</code>在每个循环中打印变量值可以发现与重置相关的错误或者重置变量失败。</p>
<h3 id="12-使用有效的终止条件防止无限循环"><a href="#12-使用有效的终止条件防止无限循环" class="headerlink" title="12. 使用有效的终止条件防止无限循环"></a>12. 使用有效的终止条件防止无限循环</h3><p>最后一个话题是可怕的无限循环。 当需要程序运行代码块一定次数或满足条件时，循环是很好的工具，但是它们需要终止条件来结束循环。 无限循环可能会使浏览器冻结或崩溃，并导致程序执行混乱，没有人想要这样的结果。</p>
<p>在本节的介绍中有一个无限循环的例子——它没有终止条件来摆脱<code>loopy()</code>内的<code>while</code>循环。 不要调用这个函数！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loopy</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序员的工作是确保最终达到终止条件，该条件告诉程序何时跳出循环。 有一种错误是从终端条件向错误方向递增或递减计数器变量。 另一种是在循环代码中意外重置计数器或索引变量，而不是递增或递减它。</p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(六)</title>
    <url>/javascript-algorithms-and-data-structures-%E5%85%AD/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="1-将摄氏度转换为华氏度"><a href="#1-将摄氏度转换为华氏度" class="headerlink" title="1. 将摄氏度转换为华氏度"></a>1. 将摄氏度转换为华氏度</h3><p>从摄氏转换为华氏的公式是，摄氏温度乘以 <code>9/5</code>，再加上 <code>32</code>。</p>
<p>输入参数 <code>celsius</code> 代表一个摄氏度的温度。 使用已定义的变量 <code>fahrenheit</code>，并赋值为相应的华氏度的温度值。 使用上面提到的公式来帮助将摄氏温度转换为华氏温度。</p>
<span id="more"></span>

<h3 id="2-反转字符串"><a href="#2-反转字符串" class="headerlink" title="2. 反转字符串"></a>2. 反转字符串</h3><p>反转提供的字符串并返回反转后的字符串。</p>
<p>例如， <code>&quot;hello&quot;</code> 应该变成 <code>&quot;olleh&quot;</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseString</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reversedStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = str.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    reversedStr += str[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> reversedStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reverseString</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-计算整数的阶乘"><a href="#3-计算整数的阶乘" class="headerlink" title="3. 计算整数的阶乘"></a>3. 计算整数的阶乘</h3><p>返回一个给定整数的阶乘计算结果。</p>
<p>对于整数 <code>n</code>，n 的阶乘就是所有小于等于 <code>n</code> 的正整数的乘积。</p>
<p>阶乘通常用符号 <code>n!</code> 来表示。</p>
<p>例如：<code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>
<p>只有非负整数会作为参数传入函数。</p>
<h3 id="4-找出字符串中的最长单词"><a href="#4-找出字符串中的最长单词" class="headerlink" title="4. 找出字符串中的最长单词"></a>4. 找出字符串中的最长单词</h3><p>返回给出的句子中，最长单词的长度。</p>
<p>函数的返回值应是一个数字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findLongestWordLength</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> maxleng = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">  maxleng = maxleng &lt; arr[i].<span class="property">length</span> ? arr[i].<span class="property">length</span> : maxleng</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(maxleng);</span><br><span class="line"> <span class="keyword">return</span> maxleng;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">findLongestWordLength</span>(<span class="string">&quot;The quick brown fox jumped over the lazy dog&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="5-找出多个数组中的最大数字"><a href="#5-找出多个数组中的最大数字" class="headerlink" title="5. 找出多个数组中的最大数字"></a>5. 找出多个数组中的最大数字</h3><p>请返回一个数组，该数组由参数中每个子数组中的最大数字组成。 为简单起见，给出的数组总会包含 4 个子数组。</p>
<p>别忘了，你可以通过 for 循环遍历一个数组，并用 <code>arr[i]</code> 的写法来访问数组中的元素。</p>
<h3 id="6-确认结尾"><a href="#6-确认结尾" class="headerlink" title="6. 确认结尾"></a>6. 确认结尾</h3><p>检查字符串（第一个参数 <code>str</code>）是否以给定的目标字符串（第二个参数 <code>target</code>）结束。</p>
<h3 id="7-重复输出字符串"><a href="#7-重复输出字符串" class="headerlink" title="7. 重复输出字符串"></a>7. 重复输出字符串</h3><p>将一个给定的字符串 <code>str</code>（第一个参数）重复输出 <code>num</code>（第二个参数）次。 如果 <code>num</code> 不是正数，返回空字符串。 在这个挑战中，请<em>不要</em>使用 JavaScript 内置的 <code>.repeat()</code> 方法。</p>
<h3 id="8-截断字符串"><a href="#8-截断字符串" class="headerlink" title="8. 截断字符串"></a>8. 截断字符串</h3><p>如果传入的字符串（第一个参数）的长度大于传入的值（第二个参数），请在这个位置截断它， 并在后面加上 <code>...</code>，然后返回结果。</p>
<h3 id="9-按参数过滤数组"><a href="#9-按参数过滤数组" class="headerlink" title="9. 按参数过滤数组"></a>9. 按参数过滤数组</h3><p>请写一个函数来检查数组（第一个参数 <code>arr</code>）中的元素，并返回数组中第一个通过校验测试的元素。 其中，“通过校验测试”指的是对于数组中的一个元素 <code>x</code>，若 <code>func(x)</code> 返回的结果为 <code>true</code>，则校验测试通过。 如果没有元素通过测试，请返回 <code>undefined</code></p>
<h3 id="10-基本类型布尔值的检查"><a href="#10-基本类型布尔值的检查" class="headerlink" title="10. 基本类型布尔值的检查"></a>10. 基本类型布尔值的检查</h3><p>检查一个值是否是基本类型中的布尔值（boolean）类型。 函数应返回 <code>true</code> 或者 <code>false</code>。</p>
<p>基本类型中的布尔值为 <code>true</code> 或者 <code>false</code>。</p>
<h3 id="11-句中单词首字母大写"><a href="#11-句中单词首字母大写" class="headerlink" title="11. 句中单词首字母大写"></a>11. 句中单词首字母大写</h3><p>请将传入的字符串中，每个单词的第一个字母变成大写并返回。 注意除首字母外，其余的字符都应是小写的。</p>
<p>在这个挑战中，我们还需要将诸如 <code>the</code> 和 <code>of</code> 之类的连接词大写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">titleCase</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newTitle = str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> updatedTitle = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> st <span class="keyword">in</span> newTitle) &#123;</span><br><span class="line">    updatedTitle[st] = newTitle[st][<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + newTitle[st].<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(updatedTitle.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>))</span><br><span class="line">  <span class="keyword">return</span> updatedTitle.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">titleCase</span>(<span class="string">&quot;I&#x27;m a little tea pot&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="12-Slice-与-Splice"><a href="#12-Slice-与-Splice" class="headerlink" title="12. Slice 与 Splice"></a>12. Slice 与 Splice</h3><p>本挑战的输入参数为两个数组和一个索引值。</p>
<p>将第一个数组中的所有元素依次复制到第二个数组中。</p>
<p>请注意，你需要从第二个数组索引值为 <code>n</code> 的地方开始插入。</p>
<p>最后，请返回插入元素后的数组。 作为输入参数的两个数组在函数执行前后应保持不变。</p>
<h3 id="13-过滤数组中的假值"><a href="#13-过滤数组中的假值" class="headerlink" title="13. 过滤数组中的假值"></a>13. 过滤数组中的假值</h3><p>从数组中移除所有假值（falsy values）。 返回一个新数组；不要改变原始数组。</p>
<p>JavaScript 中的假值有 <code>false</code>、<code>null</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>undefined</code>、<code>NaN</code>。</p>
<p>提示：可以考虑将每个值都转换为布尔值（boolean）。</p>
<h3 id="14-找出元素在排序后数组中的索引"><a href="#14-找出元素在排序后数组中的索引" class="headerlink" title="14. 找出元素在排序后数组中的索引"></a>14. 找出元素在排序后数组中的索引</h3><p>数组（第一个参数）在排序后，将一个值（第二个参数）插入该数组，并使数组保持有序。返回这个新插入元素的最小索引值。 返回值应为一个数字。</p>
<p>例如，<code>getIndexToIns([1,2,3,4], 1.5)</code> 应该返回 <code>1</code> 因为1.5 大于 <code>1</code>（索引为 0）且小于 <code>2</code>（索引为 1）。</p>
<p>同样地，<code>getIndexToIns([20,3,5], 19)</code> 应该返回 <code>2</code>。 因为数组排序后会变成 <code>[3,5,20]</code>，而 <code>19</code> 小于 <code>20</code>（索引为 2）且大于 <code>5</code>（索引为 1）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getIndexToIns</span>(<span class="params">arr, num</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span>(arr.<span class="property">length</span> ===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line"> <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">const</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;= num) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getIndexToIns</span>([<span class="number">40</span>, <span class="number">60</span>], <span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<h3 id="15-比较字符串"><a href="#15-比较字符串" class="headerlink" title="15. 比较字符串"></a>15. 比较字符串</h3><p>如果数组里的第一个字符串包含了第二个字符串中的所有字母，则返回 <code>true</code>。</p>
<p>例如，<code>[&quot;hello&quot;, &quot;Hello&quot;]</code> 应该返回 <code>true</code>。因为在忽略大小写的情况下，第一个字符串包含了第二个字符串里出现的所有字母。</p>
<p><code>[&quot;hello&quot;, &quot;hey&quot;]</code> 应该返回 <code>false</code>。因为 <code>hello</code> 并不包含字符 <code>y</code>。</p>
<p>最后，<code>[&quot;Alien&quot;, &quot;line&quot;]</code> 应该返回 <code>true</code>。因为 <code>line</code> 中的所有字母都出现在了 <code>Alien</code> 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mutation</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> test = arr[<span class="number">1</span>].<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">const</span> target = arr[<span class="number">0</span>].<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; test.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target.<span class="title function_">indexOf</span>(test[i]) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mutation</span>([<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hey&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="16-分割数组"><a href="#16-分割数组" class="headerlink" title="16. 分割数组"></a>16. 分割数组</h3><p>请编写一个函数，该函数将一个数组（第一个参数）拆分成若干长度为 <code>size</code>（第二个参数）的子数组，并将它们作为二维数组返回。</p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(五)</title>
    <url>/javascript-algorithms-and-data-structures-%E4%BA%94/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h2><h3 id="1-使用数组存储不同类型的数据"><a href="#1-使用数组存储不同类型的数据" class="headerlink" title="1.使用数组存储不同类型的数据"></a>1.使用数组存储不同类型的数据</h3><p>以下是最简单的数组（Array）示例： 这是一个一维数组（one-dimensional array），它只有一层，或者说它里面没有包含其它数组。 可以观察到，这个数组中只包含了布尔值（booleans）、字符串（strings）、数字（numbers）以及 JavaScript 中的其他数据类型</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> simpleArray = [<span class="string">&#x27;one&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(simpleArray.<span class="property">length</span>);</span><br></pre></td></tr></table></figure>

<p>调用 <code>console.log</code> 显示 <code>7</code>。</p>
<p>所有数组都有一个表示长度的属性，我们可以通过 <code>Array.length</code> 来访问它。 下面是一个关于数组的更复杂的例子。 这是一个多维数组 （multi-dimensional Array），或者说是一个包含了其他数组的数组。 可以注意到，在它的内部还包含了 JavaScript 中的对象（objects）结构。 我们会在后面的小节中讨论该数据结构，但现在你只需要知道数组能够存储复杂的对象类型数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> complexArray = [</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">one</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">two</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">three</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">four</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">      <span class="attr">b</span>: <span class="string">&quot;b&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">c</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">      <span class="attr">d</span>: <span class="string">&quot;d&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="2-使用方括号访问数组的元素"><a href="#2-使用方括号访问数组的元素" class="headerlink" title="2. 使用方括号访问数组的元素"></a>2. 使用方括号访问数组的元素</h3><p>所有数据结构的基本特性是，它们不仅可以存储数据，还可以让我们按需访问存放在其中的数据。 我们已经学习了如何创建数组，现在让我们来学习如何访问数组中的数据。</p>
<p>我们先定义一个包含 3 个元素的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ourArray = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br></pre></td></tr></table></figure>

<p>在数组中，内部的每个元素都有一个与之对应的索引（index）。 索引既是该元素在数组中的位置，也是我们访问该元素的引用。 需要注意的是，JavaScript 数组的索引是从 0 开始的（这种从 0 开始的规则叫做 zero-indexed），即数组的第一个元素是在数组中的<em><strong>第 0 个</strong></em>位置，而不是第 1 个位置。 要从数组中获取一个元素，我们可以在数组字面量后面加一个用方括号括起来的索引。不过习惯上，我们会通过表示数组的变量名来访问，而不是直接通过字面量。 这种从数组中读取元素的方式叫做方括号表示法（bracket notation）。 如果我们要从数组 <code>ourArray</code> 中取出数据 <code>a</code> 并将其赋值给另一个变量，可以这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ourVariable = ourArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>现在，变量 <code>ourVariable</code> 的值也为 <code>a</code>。</p>
<p>通过索引，我们不仅可以获取某个元素值，还可以用类似的写法来<em>设置</em>一个索引位置的元素值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ourArray[<span class="number">1</span>] = <span class="string">&quot;not b anymore&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们用方括号表示法把索引为 1 的元素从 <code>b</code> 改成了 <code>not b anymore</code>。 现在 <code>ourArray</code> 的值是 <code>[&quot;a&quot;, &quot;not b anymore&quot;, &quot;c&quot;]</code>。</p>
<h3 id="3-使用-push-和-unshift-为数组添加元素"><a href="#3-使用-push-和-unshift-为数组添加元素" class="headerlink" title="3. 使用 push() 和 unshift() 为数组添加元素"></a>3. 使用 push() 和 unshift() 为数组添加元素</h3><p>数组的长度与数组能包含的数据类型一样，都是不固定的。 数组可以包含任意数量的元素，可以不限次数地往数组中添加元素或者从中移除元素。 总之，数组是可变的（mutable）。 在本挑战中，我们要学习两种修改数组的方法：<code>Array.push()</code> 和 <code>Array.unshift()</code>。</p>
<p>这两个方法都接收一个或多个元素作为参数，并会将参数中的元素添加到该数组中。 <code>push()</code> 方法会将元素插入到数组的末尾，而 <code>unshift()</code> 方法会将元素插入到数组的开头。 请看以下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> twentyThree = <span class="string">&#x27;XXIII&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> romanNumerals = [<span class="string">&#x27;XXI&#x27;</span>, <span class="string">&#x27;XXII&#x27;</span>];</span><br><span class="line"></span><br><span class="line">romanNumerals.<span class="title function_">unshift</span>(<span class="string">&#x27;XIX&#x27;</span>, <span class="string">&#x27;XX&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>romanNumerals</code> 的值就变成了 <code>[&#39;XIX&#39;, &#39;XX&#39;, &#39;XXI&#39;, &#39;XXII&#39;]</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">romanNumerals.<span class="title function_">push</span>(twentyThree);</span><br></pre></td></tr></table></figure>

<p><code>romanNumerals</code> 的值现在就变成了 <code>[&#39;XIX&#39;, &#39;XX&#39;, &#39;XXI&#39;, &#39;XXII&#39;, &#39;XXIII&#39;]</code>。 请注意这里，我们也可以使用变量作为参数，这让我们在动态修改数组数据时更加灵活。</p>
<h3 id="4-使用-pop-和-shift-从数组中删除元素"><a href="#4-使用-pop-和-shift-从数组中删除元素" class="headerlink" title="4.使用 pop() 和 shift() 从数组中删除元素"></a>4.使用 pop() 和 shift() 从数组中删除元素</h3><p><code>push()</code> 和 <code>unshift()</code> 都有一个与它们作用相反的函数：<code>pop()</code> 和 <code>shift()</code>。 与插入元素相反，<code>pop()</code> 会从数组的末尾<em>移除</em>一个元素，而 <code>shift()</code> 会从数组的开头移除一个元素。 <code>pop()</code> 和 <code>shift()</code> 与 <code>push()</code> 和 <code>unshift()</code> 的关键区别在于，用于删除元素的方法不接收参数，而且每次只能删除数组中的一个元素。</p>
<p>让我们来看以下的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> greetings = [<span class="string">&#x27;whats up?&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;see ya!&#x27;</span>];</span><br><span class="line"></span><br><span class="line">greetings.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>

<p><code>greetings</code> 值为 <code>[&#39;whats up?&#39;, &#39;hello&#39;]</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">greetings.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure>

<p><code>greetings</code> 值为 <code>[&#39;hello&#39;]</code>。</p>
<p>这些用于删除数组元素的方法会返回被删除的元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> popped = greetings.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure>

<p><code>greetings</code> 值为 <code>[]</code>，<code>popped</code> 值为 <code>hello</code>。</p>
<h3 id="5-使用-splice-删除元素"><a href="#5-使用-splice-删除元素" class="headerlink" title="5.使用 splice() 删除元素"></a>5.使用 splice() 删除元素</h3><p>使用 <code>splice()</code> 方法， <code>splice()</code> 可以让我们从数组中的任意位置<strong>连续删除任意数量的元素</strong>。</p>
<p><code>splice()</code> 最多可以接受 3 个参数，但现在我们先关注前两个。 <code>splice()</code> 的前两个参数是整数，表示数组中调用 <code>splice()</code> 的项的索引或位置。 别忘了，数组的索引是<em>从 0 开始的</em>，所以我们要用 <code>0</code> 来表示数组中的第一个元素。 <code>splice()</code> 的第一个参数代表从数组中的哪个索引开始移除元素，而第二个参数表示要从数组中的这个位置开始删除多少个元素。 例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;today&#x27;</span>, <span class="string">&#x27;was&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;so&#x27;</span>, <span class="string">&#x27;great&#x27;</span>];</span><br><span class="line"></span><br><span class="line">array.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>这里我们移除 2 个元素，首先是第三个元素（索引为 2）。 <code>array</code> 会有值 <code>[&#39;today&#39;, &#39;was&#39;, &#39;great&#39;]</code>。</p>
<p><code>splice()</code> 不仅会修改调用该方法的数组，还会返回一个包含被移除元素的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;feeling&#x27;</span>, <span class="string">&#x27;really&#x27;</span>, <span class="string">&#x27;happy&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><code>newArray</code> 值为 <code>[&#39;really&#39;, &#39;happy&#39;]</code>。</p>
<h3 id="6-使用-splice-添加元素"><a href="#6-使用-splice-添加元素" class="headerlink" title="6. 使用 splice() 添加元素"></a>6. 使用 splice() 添加元素</h3><p> <code>splice()</code> 方法最多可以接收 3 个参数, 第三个参数可以是一个或多个元素，这些元素会被添加到数组中。 这样，我们能够便捷地将数组中的一个或多个连续元素换成其他的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">const</span> startIndex = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> amountToDelete = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">splice</span>(startIndex, amountToDelete, <span class="number">13</span>, <span class="number">14</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br></pre></td></tr></table></figure>

<p>第二个 <code>12</code> 已被删除，我们在同一索引处添加 <code>13</code> 和 <code>14</code>。 <code>numbers</code> 数组现在将会是 <code>[ 10, 11, 12, 13, 14, 15 ]</code>。</p>
<p>在上面的代码中，数组一开始包含了若干数字。 接着，我们调用 <code>splice()</code> 方法，索引为 (3) 的地方开始删除元素，删除的元素数量是 (1)。然后，(13, 14) 是在删除位置插入的元素。 可以在 <code>amountToDelete</code> 后面传入任意数量的元素（以逗号分隔），每个都会被插入到数组中。</p>
<h3 id="7-使用-slice-复制数组元素"><a href="#7-使用-slice-复制数组元素" class="headerlink" title="7. 使用 slice() 复制数组元素"></a>7. 使用 slice() 复制数组元素</h3><p>接下来我们要介绍 <code>slice()</code> 方法。 <code>slice()</code> 不会修改数组，而是会复制，或者说<em>提取（extract）</em>给定数量的元素到一个新数组。 <code>slice()</code> 只接收 2 个输入参数：第一个是开始提取元素的位置（索引），第二个是提取元素的结束位置（索引）。 提取的元素中不包括第二个参数所对应的元素。 如下示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> weatherConditions = [<span class="string">&#x27;rain&#x27;</span>, <span class="string">&#x27;snow&#x27;</span>, <span class="string">&#x27;sleet&#x27;</span>, <span class="string">&#x27;hail&#x27;</span>, <span class="string">&#x27;clear&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> todaysWeather = weatherConditions.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><code>todaysWeather</code> 值为 <code>[&#39;snow&#39;, &#39;sleet&#39;]</code>，<code>weatherConditions</code> 值仍然为 <code>[&#39;rain&#39;, &#39;snow&#39;, &#39;sleet&#39;, &#39;hail&#39;, &#39;clear&#39;]</code>。</p>
<p>在上面的代码中，我们从一个数组中提取了一些元素，并用这些元素创建了一个新数组。</p>
<h3 id="8-使用展开运算符复制数组"><a href="#8-使用展开运算符复制数组" class="headerlink" title="8. 使用展开运算符复制数组"></a>8. 使用展开运算符复制数组</h3><p><code>slice()</code> 可以让我们从一个数组中选择一些元素来复制到新数组中，而 ES6 中又引入了一个简洁且可读性强的语法：展开运算符（spread operator），它能让我们方便地复制数组中的<em>所有</em>元素。 展开语法写出来是这样：<code>...</code></p>
<p>我们可以用展开运算符来复制数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> thisArray = [<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">false</span>, <span class="literal">null</span>];</span><br><span class="line"><span class="keyword">let</span> thatArray = [...thisArray];</span><br></pre></td></tr></table></figure>

<p><code>thatArray</code> 等于 <code>[true, true, undefined, false, null]</code>。 <code>thisArray</code> 保持不变， <code>thatArray</code> 包含与 <code>thisArray</code> 相同的元素。</p>
<h3 id="9-使用展开运算符合并数组"><a href="#9-使用展开运算符合并数组" class="headerlink" title="9. 使用展开运算符合并数组"></a>9. 使用展开运算符合并数组</h3><p>展开语法（spread）的另一个重要用途是合并数组，或者将某个数组的所有元素插入到另一个数组的任意位置。 我们也可以使用 ES5 的语法连接两个数组，但只能让它们首尾相接。 而展开语法可以让这样的操作变得极其简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> thisArray = [<span class="string">&#x27;sage&#x27;</span>, <span class="string">&#x27;rosemary&#x27;</span>, <span class="string">&#x27;parsley&#x27;</span>, <span class="string">&#x27;thyme&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> thatArray = [<span class="string">&#x27;basil&#x27;</span>, <span class="string">&#x27;cilantro&#x27;</span>, ...thisArray, <span class="string">&#x27;coriander&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p><code>thatArray</code> 会有值 <code>[&#39;basil&#39;, &#39;cilantro&#39;, &#39;sage&#39;, &#39;rosemary&#39;, &#39;parsley&#39;, &#39;thyme&#39;, &#39;coriander&#39;]</code></p>
<p>使用展开语法，我们就可以很方便的实现一个用传统方法会写得很复杂且冗长的操作。</p>
<h3 id="10-使用-indexOf-检查元素是否存在"><a href="#10-使用-indexOf-检查元素是否存在" class="headerlink" title="10.使用 indexOf() 检查元素是否存在"></a>10.使用 indexOf() 检查元素是否存在</h3><p>由于数组随时都可以修改或发生 <em>mutated</em>，我们很难保证某个数据始终处于数组中的特定位置，甚至不能保证该元素是否还存在于该数组中。 好消息是，JavaScript 为我们提供了内置方法 <code>indexOf()</code>。 这个方法让我们可以方便地检查某个元素是否存在于数组中。 <code>indexOf()</code> 方法接受一个元素作为输入参数，并返回该元素在数组中的位置（索引）；若该元素不存在于数组中则返回 <code>-1</code>。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;pears&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>, <span class="string">&#x27;peaches&#x27;</span>, <span class="string">&#x27;pears&#x27;</span>];</span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">indexOf</span>(<span class="string">&#x27;dates&#x27;</span>);</span><br><span class="line">fruits.<span class="title function_">indexOf</span>(<span class="string">&#x27;oranges&#x27;</span>);</span><br><span class="line">fruits.<span class="title function_">indexOf</span>(<span class="string">&#x27;pears&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>indexOf(&#39;dates&#39;)</code> 返回 <code>-1</code>，<code>indexOf(&#39;oranges&#39;)</code> 返回 <code>2</code>，<code>indexOf(&#39;pears&#39;)</code> 返回 <code>1</code> (每个元素存在的第一个索引)。</p>
<h3 id="11-使用-for-循环遍历数组中的全部元素"><a href="#11-使用-for-循环遍历数组中的全部元素" class="headerlink" title="11. 使用 for 循环遍历数组中的全部元素"></a>11. 使用 for 循环遍历数组中的全部元素</h3><p>使用数组时，我们经常需要遍历数组的所有元素来找出我们需要的一个或多个元素，抑或是对数组执行一些特定的操作。 JavaScript 为我们提供了几个内置的方法，它们以不同的方式遍历数组，以便我们可以用于不同的场景（如 <code>every()</code>、<code>forEach()</code>、<code>map()</code> 等等）。 然而，最简单的 <code>for</code> 循环不仅能实现上述这些方法的功能，而且相比之下也会更加灵活。</p>
<p>请看以下的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greaterThanTen</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greaterThanTen</span>([<span class="number">2</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>在这个函数中，我们用一个 <code>for</code> 循环来遍历数组，逐一对其中的元素进行判断。 通过上面的代码，我们可以找出数组中大于 <code>10</code> 的所有元素，并返回一个包含这些元素的新数组 <code>[12, 14, 80]</code>。</p>
<h3 id="12-创建复杂的多维数组"><a href="#12-创建复杂的多维数组" class="headerlink" title="12. 创建复杂的多维数组"></a>12. 创建复杂的多维数组</h3><p>数组的一个强大的特性是，它可以包含其他数组，甚至完全由其他数组组成。  数组中的数组还可以再包含其他数组，即可以嵌套任意多层数组。 通过这种方式，数组可以很快成为非常复杂的数据结构，称为多维（multi-dimensional）数组，或嵌套（nested）数组。 请看如下的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedArray = [</span><br><span class="line">  [<span class="string">&#x27;deep&#x27;</span>],</span><br><span class="line">  [</span><br><span class="line">    [<span class="string">&#x27;deeper&#x27;</span>], [<span class="string">&#x27;deeper&#x27;</span>] </span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    [</span><br><span class="line">      [<span class="string">&#x27;deepest&#x27;</span>], [<span class="string">&#x27;deepest&#x27;</span>]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [<span class="string">&#x27;deepest-est?&#x27;</span>]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p><code>deep</code> 数组已嵌套 2 层。 <code>deeper</code> 数组嵌套了 3 层。 <code>deepest</code> 数组嵌套了 3 层， <code>deepest-est?</code> 嵌套了 5 层。</p>
<p>虽然这个例子看起来错综复杂，不过，尤其是在处理大量数据的时候，这种数据结构还是会用到的。 尽管结构复杂，不过我们仍可以通过方括号表示法来访问嵌套得最深的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nestedArray[<span class="number">2</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>控制台打印的是字符串 <code>deepest-est?</code>。 既然我们知道数据的位置，当然，我们也可以修改它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nestedArray[<span class="number">2</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&#x27;deeper still&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nestedArray[<span class="number">2</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>现在控制台打印的是 <code>deeper still</code>。</p>
<h3 id="13-将键值对添加到对象中"><a href="#13-将键值对添加到对象中" class="headerlink" title="13. 将键值对添加到对象中"></a>13. 将键值对添加到对象中</h3><p>对象（object）本质上是键值对（key-value pair）的集合。 或者说，一系列被映射到唯一标识符的数据就是对象；习惯上，唯一标识符叫做属性（property）或者键（key）；数据叫做值（value）。 让我们来看一个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tekkenCharacter = &#123;</span><br><span class="line">  <span class="attr">player</span>: <span class="string">&#x27;Hwoarang&#x27;</span>,</span><br><span class="line">  <span class="attr">fightingStyle</span>: <span class="string">&#x27;Tae Kwon Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">human</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的代码定义了一个叫做 <code>tekkenCharacter</code> 的“铁拳”游戏人物对象。 它有三个属性，每个属性都对应一个特定的值。 如果我们想为它再添加一个叫做 <code>origin</code> 的属性，可以这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tekkenCharacter.<span class="property">origin</span> = <span class="string">&#x27;South Korea&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们使用了点号表示法。 如果我们现在输出 <code>tekkenCharacter</code> 对象，便可以看到它具有 <code>origin</code> 属性。 接下来，因为这个人物在游戏中有着与众不同的橘色头发， 我们可以通过方括号表示法来为它添加这个属性，像这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tekkenCharacter[<span class="string">&#x27;hair color&#x27;</span>] = <span class="string">&#x27;dyed orange&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如果要设置的属性中存在空格，或者要设置的属性是一个变量，那我们必须使用方括号表示法（bracket notation）来为对象添加属性。 在上面的代码中，我们把属性（hair color）放到引号里，以此来表示整个字符串都是需要设置的属性。 如果我们不加上引号，那么中括号里的内容会被当作一个变量来解析，这个变量对应的值就会作为要设置的属性， 请看这段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eyes = <span class="string">&#x27;eye color&#x27;</span>;</span><br><span class="line"></span><br><span class="line">tekkenCharacter[eyes] = <span class="string">&#x27;brown&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>执行以上所有示例代码后，对象会变成这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">player</span>: <span class="string">&#x27;Hwoarang&#x27;</span>,</span><br><span class="line">  <span class="attr">fightingStyle</span>: <span class="string">&#x27;Tae Kwon Doe&#x27;</span>,</span><br><span class="line">  <span class="attr">human</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">origin</span>: <span class="string">&#x27;South Korea&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;hair color&#x27;</span>: <span class="string">&#x27;dyed orange&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;eye color&#x27;</span>: <span class="string">&#x27;brown&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="14-改嵌套在对象中的对象"><a href="#14-改嵌套在对象中的对象" class="headerlink" title="14. 改嵌套在对象中的对象"></a>14. 改嵌套在对象中的对象</h3><p>在对象中，我们也可以嵌套任意层数的对象，对象的属性值可以是 JavaScript 支持的任意类型，包括数组和其他对象。 请看以下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedObject = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">28802695164</span>,</span><br><span class="line">  <span class="attr">date</span>: <span class="string">&#x27;December 31, 2016&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">totalUsers</span>: <span class="number">99</span>,</span><br><span class="line">    <span class="attr">online</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">onlineStatus</span>: &#123;</span><br><span class="line">      <span class="attr">active</span>: <span class="number">67</span>,</span><br><span class="line">      <span class="attr">away</span>: <span class="number">13</span>,</span><br><span class="line">      <span class="attr">busy</span>: <span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>nestedObject</code> 有 3 个属性：<code>id</code>（属性值为数字）、<code>date</code>（属性值为字符串）、<code>data</code>（属性值为嵌套的对象）。 虽然对象中的数据可能很复杂，我们仍能使用上一个挑战中讲到的写法来访问我们需要的信息。 如果我们想把嵌套在 <code>onlineStatus</code> 中 <code>busy</code> 的属性值改为 <code>10</code>，可以用点号表示法来这样实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nestedObject.<span class="property">data</span>.<span class="property">onlineStatus</span>.<span class="property">busy</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="15-使用方括号访问属性名称"><a href="#15-使用方括号访问属性名称" class="headerlink" title="15. 使用方括号访问属性名称"></a>15. 使用方括号访问属性名称</h3><p>可以在一对方括号中用一个变量作为属性名来访问属性的值。 假设一个超市收银台程序中有一个 <code>foods</code> 对象, 并且有一个函数会设置 <code>selectedFood</code>；如果我们需要查询 <code>foods</code> 对象中，某种食物是否存在， 可以这样实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> selectedFood = <span class="title function_">getCurrentFood</span>(scannedItem);</span><br><span class="line"><span class="keyword">let</span> inventory = foods[selectedFood];</span><br></pre></td></tr></table></figure>

<p>上述代码会先读取 <code>selectedFood</code> 变量的值，并返回 <code>foods</code> 对象中以该值命名的属性所对应的属性值。 若没有以该值命名的属性，则会返回 <code>undefined</code>。 有时候对象的属性名在运行之前是不确定的，或者我们需要动态地访问对象的属性值。在这些场景下，方括号表示法就变得十分有用。</p>
<h3 id="16-使用-delete-关键字删除对象属性"><a href="#16-使用-delete-关键字删除对象属性" class="headerlink" title="16. 使用 delete 关键字删除对象属性"></a>16. 使用 delete 关键字删除对象属性</h3><p>对象是以键值对的形式，灵活、直观地存储结构化数据的一种方式，<em><strong>而且</strong></em>，通过对象的属性查找属性值是速度很快的操作。</p>
<p>如何从一个对象中<em>移除</em>一个键值对。</p>
<p>回顾一下 <code>foods</code> 对象。 如果我们想移除 <code>apples</code> 属性，可以像这样使用 <code>delete</code> 关键字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> foods.<span class="property">apples</span>;</span><br></pre></td></tr></table></figure>

<h3 id="17-检查对象是否具有某个属性"><a href="#17-检查对象是否具有某个属性" class="headerlink" title="17. 检查对象是否具有某个属性"></a>17. 检查对象是否具有某个属性</h3><p> JavaScript 为我们提供了两种不同的方式来实现这个功能： 一个是通过 <code>hasOwnProperty()</code> 方法，另一个是使用 <code>in</code> 关键字。 假如我们有一个 <code>users</code> 对象，为检查它是否含有 <code>Alan</code> 属性，可以这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">users.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;Alan&#x27;</span>);</span><br><span class="line"><span class="string">&#x27;Alan&#x27;</span> <span class="keyword">in</span> users;</span><br></pre></td></tr></table></figure>

<p>这两者结果都应该为 <code>true</code>。</p>
<h3 id="18-使用-for…in-语句遍历对象"><a href="#18-使用-for…in-语句遍历对象" class="headerlink" title="18. 使用 for…in 语句遍历对象"></a>18. 使用 for…in 语句遍历对象</h3><p>Sometimes you need to iterate through all the keys within an object. You can use a for…in loop to do this. The for…in loop looks like:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> refrigerator = &#123;</span><br><span class="line">  <span class="string">&#x27;milk&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;eggs&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> food <span class="keyword">in</span> refrigerator) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(food, refrigerator[food]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This code logs <code>milk 1</code> and <code>eggs 12</code>, with each key-value pair on its own line.</p>
<p>We defined the variable <code>food</code> in the loop head and this variable was set to each of the object’s keys on each iteration, resulting in each food’s name being printed to the console.</p>
<p><strong>注意：</strong>对象中的键是无序的，这与数组不同。 因此，一个对象中某个属性的位置，或者说它出现的相对顺序，在引用或访问该属性时是不确定的。</p>
<h3 id="19-使用-Object-keys-生成由对象的所有属性组成的数组"><a href="#19-使用-Object-keys-生成由对象的所有属性组成的数组" class="headerlink" title="19. 使用 Object.keys() 生成由对象的所有属性组成的数组"></a>19. 使用 Object.keys() 生成由对象的所有属性组成的数组</h3><p>我们可以给 <code>Object.keys()</code> 方法传入一个对象作为参数，来生成包含对象所有键的数组。 这个方法将对象作为参数并返回代表对象中每个属性的字符串数组。 需要注意的是，数组中元素的顺序是不确定的。</p>
<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(八)</title>
    <url>/javascript-algorithms-and-data-structures-%E5%85%AB/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="1-学习函数式编程"><a href="#1-学习函数式编程" class="headerlink" title="1. 学习函数式编程"></a>1. 学习函数式编程</h3><p>函数式编程是一种方案简单、功能独立、对作用域外没有任何副作用的编程范式：<code>INPUT -&gt; PROCESS -&gt; OUTPUT</code>。</p>
<span id="more"></span>

<p>函数式编程：</p>
<p>1）功能独立——不依赖于程序的状态（比如可能发生变化的全局变量）；</p>
<p>2）纯函数——同一个输入永远能得到同一个输出；</p>
<p>3）有限的副作用——可以严格地限制函数外部对状态的更改。</p>
<h3 id="2-了解函数式编程术语"><a href="#2-了解函数式编程术语" class="headerlink" title="2. 了解函数式编程术语"></a>2. 了解函数式编程术语</h3><p>FCC 团队需求有变更，现在想要两种茶：绿茶（green tea）和红茶（black tea）。 事实证明，用户需求变更是很常见的。</p>
<p>基于以上信息，我们需要重构上一节挑战中的 <code>getTea</code> 函数来处理多种茶的请求。 我们可以修改 <code>getTea</code> 接受一个函数作为参数，使它能够修改茶的类型。 这让 <code>getTea</code> 更灵活，也使需求变更时为程序员提供更多控制权。</p>
<p>首先，我们将介绍一些术语：</p>
<p>Callbacks 是被传递到另一个函数中调用的函数。 你应该已经在其他函数中看过这个写法，例如在 <code>filter</code> 中，回调函数告诉 JavaScript 以什么规则过滤数组。</p>
<p>函数就像其他正常值一样，可以赋值给变量、传递给另一个函数，或从其它函数返回，这种函数叫做头等 first class 函数。 在 JavaScript 中，所有函数都是头等函数。</p>
<p>将函数作为参数或将函数作为返回值返回的函数叫作高阶函数。</p>
<p>当函数被传递给另一个函数或从另一个函数返回时，那些传入或返回的函数可以叫作 lambda。</p>
<h3 id="3-了解使用命令式编程的危害"><a href="#3-了解使用命令式编程的危害" class="headerlink" title="3. 了解使用命令式编程的危害"></a>3. 了解使用命令式编程的危害</h3><p>使用函数式编程是一个好的习惯。 它使你的代码易于管理，避免潜在的 bug。 但在开始之前，先看看命令式编程方法，以强调你可能有什么问题。</p>
<p>在英语 (以及许多其他语言) 中，命令式时态用来发出指令。 同样，命令式编程是向计算机提供一套执行任务的声明。</p>
<p>命令式编程常常改变程序状态，例如更新全局变量。 一个典型的例子是编写 <code>for</code> 循环，它为一个数组的索引提供了准确的迭代方向。</p>
<p>相反，函数式编程是声明式编程的一种形式。 通过调用方法或函数来告诉计算机要做什么。</p>
<p>JavaScript 提供了许多处理常见任务的方法，所以你无需写出计算机应如何执行它们。 例如，你可以用 <code>map</code> 函数替代上面提到的 <code>for</code> 循环来处理数组迭代。 这有助于避免语义错误，如调试章节介绍的 “Off By One Errors”。</p>
<p>考虑这样的场景：你正在浏览器中浏览网页，并想操作你打开的标签。 下面我们来试试用面向对象的思路来描述这种情景。</p>
<p>窗口对象由选项卡组成，通常会打开多个窗口。 窗口对象中每个打开网站的标题都保存在一个数组中。 在对浏览器进行了如打开新标签、合并窗口、关闭标签之类的操作后，你需要输出所有打开的标签。 关掉的标签将从数组中删除，新打开的标签（为简单起见）则添加到数组的末尾。</p>
<p>代码编辑器中显示了此功能的实现，其中包含 <code>tabOpen()</code>，<code>tabClose()</code>，和 <code>join()</code> 函数。 <code>tabs</code> 数组是窗口对象的一部分用于储存打开页面的名称。</p>
<h3 id="4-使用函数式编程避免变化和副作用"><a href="#4-使用函数式编程避免变化和副作用" class="headerlink" title="4. 使用函数式编程避免变化和副作用"></a>4. 使用函数式编程避免变化和副作用</h3><p>如果你还没想通，上一个挑战的问题出在 <code>tabClose()</code> 函数里的 <code>splice</code>。 不幸的是，<code>splice</code> 修改了调用它的原始数组，所以第二次调用它时是基于修改后的数组，才给出了意料之外的结果。</p>
<p>这是一个小例子，还有更广义的定义——在变量，数组或对象上调用一个函数，这个函数会改变对象中的变量或其他东西。</p>
<p>函数式编程的核心原则之一是不改变任何东西。 变化会导致错误。 如果一个函数不改变传入的参数、全局变量等数据，那么它造成问题的可能性就会小很多。</p>
<p>前面的例子没有任何复杂的操作，但是 <code>splice</code> 方法改变了原始数组，导致 bug 产生。</p>
<p>回想一下，在函数式编程中，改变或变更叫做 mutation，这种改变的结果叫做“副作用”（side effect）。 理想情况下，函数应该是不会产生任何副作用的 pure function。</p>
<p>让我们尝试掌握这个原则：不要改变代码中的任何变量或对象。</p>
<h3 id="5-传递参数以避免函数中的外部依赖"><a href="#5-传递参数以避免函数中的外部依赖" class="headerlink" title="5. 传递参数以避免函数中的外部依赖"></a>5. 传递参数以避免函数中的外部依赖</h3><p>上一个挑战是更接近函数式编程原则的挑战，但是仍然缺少一些东西。</p>
<p>虽然我们没有改变全局变量值，但在没有全局变量 <code>fixedValue</code> 的情况下，<code>incrementer</code> 函数将不起作用。</p>
<p>函数式编程的另一个原则是：总是显式声明依赖关系。 如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。</p>
<p>这样做会有很多好处。 其中一点是让函数更容易测试，因为你确切地知道参数是什么，并且这个参数也不依赖于程序中的任何其他内容。</p>
<p>其次，这样做可以让你更加自信地更改，删除或添加新代码。 因为你很清楚哪些是可以改的，哪些是不可以改的，这样你就知道哪里可能会有潜在的陷阱。</p>
<p>最后，无论代码的哪一部分执行它，函数总是会为同一组输入生成相同的输出。</p>
<h3 id="6-在函数中重构全局变量"><a href="#6-在函数中重构全局变量" class="headerlink" title="6. 在函数中重构全局变量"></a>6. 在函数中重构全局变量</h3><p>目前为止，我们已经看到了函数式编程的两个原则：</p>
<ol>
<li><p>不要更改变量或对象 - 创建新变量和对象，并在需要时从函数返回它们。 提示：使用类似 <code>const newArr = arrVar</code> 的东西，其中 <code>arrVar</code> 是一个数组，只会创建对现有变量的引用，而不是副本。 所以更改 <code>newArr</code> 中的值会同时更改 <code>arrVar</code> 中的值。</p>
</li>
<li><p>声明函数参数 - 函数内的任何计算仅取决于参数，而不取决于任何全局对象或变量。</p>
</li>
</ol>
<p>给数字增加 1 不够有意思，但是我们可以在处理数组或更复杂的对象时应用这些原则。</p>
<h3 id="7-使用-map-方法从数组中提取数据"><a href="#7-使用-map-方法从数组中提取数据" class="headerlink" title="7. 使用 map 方法从数组中提取数据"></a>7. 使用 map 方法从数组中提取数据</h3><p>目前为止，我们已经学会了使用纯函数来避免程序中的副作用。 此外，我们已经看到函数的值仅取决于其输入参数。</p>
<p>这仅仅是个开始。 顾名思义，函数式编程以函数理论为中心。</p>
<p>能够将它们作为参数传递给其他函数，从另一个函数返回一个函数是有意义的。 函数在 JavaScript 中被视为 First Class Objects，它们可以像任何其他对象一样使用。 它们可以保存在变量中，存储在对象中，也可以作为函数参数传递。</p>
<p>让我们从一些简单的数组函数开始，这些函数是数组对象原型上的方法。 在本练习中，我们来了解下数组的 <code>map</code> 方法（即 <code>Array.prototype.map()</code>）。</p>
<p>请记住，<code>map</code>方法是迭代数组中每一项的方式之一。 在对每个元素应用回调函数后，它会创建一个新数组(不改变原来的数组)。 它这样做时没有改变原始数组。</p>
<p>当调用回调函数时，传入了三个参数。 第一个参数是当前正在处理的数组项。 第二个参数是当前数组项的索引值，第三个参数是在其上调用 <code>map</code> 方法的数组。</p>
<p>看下在 <code>users</code> 上使用 <code>map</code> 方法的例子，返回了一个新数组只包含了用户的名字。 为了简化，例子里只使用了回调函数的第一个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;camperCat&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br></pre></td></tr></table></figure>

<p>控制台将显示值 <code>[ &#39;John&#39;, &#39;Amy&#39;, &#39;camperCat&#39; ]</code>。</p>
<h3 id="8-在原型上实现-map-方法"><a href="#8-在原型上实现-map-方法" class="headerlink" title="8. 在原型上实现 map 方法"></a>8. 在原型上实现 map 方法</h3><p>之前用到了 <code>Array.prototype.map()</code> 方法（即 <code>map()</code>），通过 <code>map</code> 返回一个与调用它的数组长度相同的数组。 只要它的回调函数不改变原始数组，它就不会改变原始数组。</p>
<p>换句话说，<code>map</code> 是一个纯函数，它的输出仅取决于输入的数组和作为参数传入的回调函数。 此外，它接收另一个函数作为它的参数。</p>
<p>实现一个 <code>map</code>，加深对它的了解。 你可以用 <code>for</code> 循环或者 <code>Array.prototype.forEach()</code> 方法。</p>
<h3 id="9-使用-filter-方法从数组中提取数据"><a href="#9-使用-filter-方法从数组中提取数据" class="headerlink" title="9. 使用 filter 方法从数组中提取数据"></a>9. 使用 filter 方法从数组中提取数据</h3><p>另一个有用的数组方法是 <code>filter()</code>（即 <code>Array.prototype.filter()</code>）。</p>
<p><code>filter</code> 在一个数组的每个元素上调用一个函数，并返回一个新的数组，其中只包含该函数返回一个真值的元素，也就是说，一个被传递给 <code>Boolean()</code> 构造函数后返回 <code>true</code> 的值。 换言之，它根据传递给它的函数过滤数组。 和 <code>map</code> 一样，filter 不会改变原始数组。</p>
<p>回调函数接收三个参数。 第一个参数是当前正在被处理的元素。 第二个参数是这个元素的索引，第三个参数是在其上调用 <code>filter</code> 方法的数组。</p>
<p>看下在 <code>users</code> 上使用 <code>filter</code> 方法的例子，返回了一个包含了 30 岁以下的用户新数组。 为了简化，例子里只使用了回调函数的第一个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;camperCat&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> usersUnder30 = users.<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">age</span> &lt; <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(usersUnder30); </span><br></pre></td></tr></table></figure>

<p>控制台将显示值 <code>[ &#123; name: &#39;Amy&#39;, age: 20 &#125;, &#123; name: &#39;camperCat&#39;, age: 10 &#125; ]</code></p>
<h3 id="10-在原型上实现-filter-方法"><a href="#10-在原型上实现-filter-方法" class="headerlink" title="10.在原型上实现 filter 方法"></a>10.在原型上实现 filter 方法</h3><p>为了加深对 <code>filter</code> 的理解，可以自己实现一个。 可以用 <code>for</code> 循环或 <code>Array.prototype.forEach()</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFilter</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArray = [];</span><br><span class="line">  <span class="comment">// Only change code below this line</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Boolean</span>(<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) === <span class="literal">true</span>) &#123;</span><br><span class="line">      newArray.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Only change code above this line</span></span><br><span class="line">  <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="11-使用-slice-方法返回数组的一部分"><a href="#11-使用-slice-方法返回数组的一部分" class="headerlink" title="11. 使用 slice 方法返回数组的一部分"></a>11. 使用 slice 方法返回数组的一部分</h3><p><code>slice</code> 方法可以从已有数组中返回指定元素。 它接受两个参数，第一个规定从何处开始选取，第二个规定从何处结束选取（不包括该元素）。 如果没有传参，则默认为从数组的开头开始到结尾结束，这是复制整个数组的简单方式。 <code>slice</code> 返回一个新数组，不会修改原始数组。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;Tiger&quot;</span>, <span class="string">&quot;Zebra&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><code>newArray</code> 值为 <code>[&quot;Dog&quot;, &quot;Tiger&quot;]</code></p>
<h3 id="12-使用-slice-而不是-splice-从数组中移除元素"><a href="#12-使用-slice-而不是-splice-从数组中移除元素" class="headerlink" title="12. 使用 slice 而不是 splice 从数组中移除元素"></a>12. 使用 slice 而不是 splice 从数组中移除元素</h3><p>使用数组时经常遇到要删除一些元素并保留数组剩余部分的情况。 为此，JavaScript 提供了 <code>splice</code> 方法，它接收两个参数：从哪里开始删除项目的索引，和要删除的项目数。 如果没有提供第二个参数，默认情况下是移除一直到结尾的所有元素。 但 <code>splice</code> 方法会改变调用它的原始数组。 举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cities = [<span class="string">&quot;Chicago&quot;</span>, <span class="string">&quot;Delhi&quot;</span>, <span class="string">&quot;Islamabad&quot;</span>, <span class="string">&quot;London&quot;</span>, <span class="string">&quot;Berlin&quot;</span>];</span><br><span class="line">cities.<span class="title function_">splice</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>在这里 <code>splice</code> 返回字符串 <code>London</code> 并从城市数组中删除它。 <code>cities</code> 将有值 <code>[&quot;Chicago&quot;, &quot;Delhi&quot;, &quot;Islamabad&quot;, &quot;Berlin&quot;]</code>。</p>
<p>正如我们在上一次挑战中看到的那样，<code>slice</code> 方法不会改变原始数组，而是返回一个可以保存到变量中的新数组。 回想一下，<code>slice</code> 方法接收两个参数，从开始索引开始选取到结束（不包括该元素），并在新数组中返回这些元素。 使用 <code>slice</code> 方法替代 <code>splice</code> 有助于避免数组变化产生的副作用。</p>
<h3 id="13-使用-concat-方法组合两个数组"><a href="#13-使用-concat-方法组合两个数组" class="headerlink" title="13. 使用 concat 方法组合两个数组"></a>13. 使用 concat 方法组合两个数组</h3><p>Concatenation 意思是将元素连接到尾部。 同理，JavaScript 为字符串和数组提供了<code>concat</code>方法。 对数组来说，在一个数组上调用 <code>concat</code> 方法，然后提供另一个数组作为参数添加到第一个数组末尾。 它返回一个新数组，不会改变任何一个原始数组。 举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">concat</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br></pre></td></tr></table></figure>

<p>返回的数组将是 <code>[1, 2, 3, 4, 5, 6]</code>。</p>
<h3 id="14-使用-concat-而不是-push-将元素添加到数组的末尾"><a href="#14-使用-concat-而不是-push-将元素添加到数组的末尾" class="headerlink" title="14. 使用 concat 而不是 push 将元素添加到数组的末尾"></a>14. 使用 concat 而不是 push 将元素添加到数组的末尾</h3><p>函数式编程就是创建和使用具有不变性的函数。</p>
<p>上一个挑战介绍了 <code>concat</code> 方法，这是一种在不改变原始数组的前提下，将数组组合成一个新数组的方法。 将 <code>concat</code> 方法与 <code>push</code> 方法做比较。 <code>push</code> 将一个元素添加到调用它的数组的末尾，这样会改变该数组。 举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p><code>arr</code> 的值被修改为 <code>[1, 2, 3, 4, 5, 6]</code>，这不是函数编程方式。</p>
<p><code>concat</code> 方法可以将新项目添加到数组末尾，而不附带改变数组。</p>
<h3 id="15-使用-reduce-方法分析数据"><a href="#15-使用-reduce-方法分析数据" class="headerlink" title="15. 使用 reduce 方法分析数据"></a>15. 使用 reduce 方法分析数据</h3><p><code>reduce()</code>（即<code>Array.prototype.reduce()</code>），是 JavaScript 所有数组操作中最常用的方法。 几乎可以用<code>reduce</code>方法解决所有数组处理问题。</p>
<p><code>reduce</code> 方法是处理数组更通用的方式，而且 <code>filter</code> 和 <code>map</code> 方法都可以当作是 <code>reduce</code> 的特殊实现。 <code>reduce</code> 方法遍历数组中的每个项目并返回单个值（即字符串、数字、对象、数组）。 这是通过在每次迭代中调用一个回调函数来实现的。</p>
<p>回调函数接受四个参数。 第一个参数称为叠加器，它是上一次迭代中回调函数的返回值，第二个参数是当前正在处理的数组元素，第三个参数是该参数的索引，第四个参数是在其上调用 <code>reduce</code> 方法的数组。</p>
<p>除了回调函数，<code>reduce</code> 还有一个额外的参数作为叠加器的初始值。 如果没有第二个参数，会跳过第一次迭代，第二次迭代给叠加器传入数组的第一个元素。</p>
<p>见下面的例子，给 <code>users</code> 数组使用 <code>reduce</code> 方法，返回所有用户数组的和。 为了简化，例子仅使用了回调函数的第一个参数和第二个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;camperCat&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumOfAges = users.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, user</span>) =&gt;</span> sum + user.<span class="property">age</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sumOfAges);</span><br></pre></td></tr></table></figure>

<p>这里控制台将显示值 <code>64</code>。</p>
<p>在另一个例子里，查看如何返回一个包含用户名称做为属性，其年龄做为值的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">34</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;camperCat&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> usersObj = users.<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, user</span>) =&gt;</span> &#123;</span><br><span class="line">  obj[user.<span class="property">name</span>] = user.<span class="property">age</span>;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(usersObj);</span><br></pre></td></tr></table></figure>

<p>控制台将显示值 <code>&#123; John: 34, Amy: 20, camperCat: 10 &#125;</code>。</p>
<h3 id="16-使用-sort-方法按字母顺序给数组排序"><a href="#16-使用-sort-方法按字母顺序给数组排序" class="headerlink" title="16. 使用 sort 方法按字母顺序给数组排序"></a>16. 使用 sort 方法按字母顺序给数组排序</h3><p><code>sort</code> 方法可以根据回调函数对数组元素进行排序。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ascendingOrder</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ascendingOrder</span>([<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure>

<p>这将返回值 <code>[1, 2, 3, 4, 5]</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseAlpha</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a === b ? <span class="number">0</span> : a &lt; b ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">reverseAlpha</span>([<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;s&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>这将返回值 <code>[&#39;z&#39;, &#39;s&#39;, &#39;l&#39;, &#39;h&#39;, &#39;b&#39;]</code>。</p>
<p>JavaScript 的默认排序方法是 Unicode 值顺序排序，有时可能会得到意想不到的结果。 因此，建议提供一个回调函数来指定如何对数组项目排序。 这个回调函数通常叫做 <code>compareFunction</code>，它根据 <code>compareFunction</code> 的返回值决定数组元素的排序方式： 如果两个元素 <code>a</code> 和 <code>b</code>，<code>compareFunction(a,b)</code> 返回一个比 0 小的值，那么 <code>a</code> 会在 <code>b</code> 的前面。 如果两个元素 <code>a</code> 和 <code>b</code>，<code>compareFunction(a,b)</code> 返回一个比 0 大的值，那么 <code>b</code> 会在 <code>a</code> 的前面。 如果两个元素 <code>a</code> 和 <code>b</code>，<code>compareFunction(a,b)</code> 返回等于 0 的值，那么 <code>a</code> 和 <code>b</code> 的位置保持不变。</p>
<h3 id="17-在不更改原始数组的前提下返回排序后的数组"><a href="#17-在不更改原始数组的前提下返回排序后的数组" class="headerlink" title="17. 在不更改原始数组的前提下返回排序后的数组"></a>17. 在不更改原始数组的前提下返回排序后的数组</h3><p><code>sort</code> 方法会产生改变原始数组中元素顺序的副作用。 换句话说，它会改变数组的位置。 避免这种情况的一种方法是先将空数组连接到正在排序的数组上（记住 <code>slice</code> 和 <code>concat</code> 返回一个新数组），再用<code>sort</code>方法。</p>
<h3 id="18-使用-split-方法将字符串拆分成数组"><a href="#18-使用-split-方法将字符串拆分成数组" class="headerlink" title="18. 使用 split 方法将字符串拆分成数组"></a>18. 使用 split 方法将字符串拆分成数组</h3><p><code>split</code> 方法将一个字符串分割成一个字符串数组。 它需要一个参数作为分隔符，它可以是用于拆分字符串或正则表达式的一个字符。 举个例子，如果分隔符是空格，你会得到一个单词数组；如果分隔符是空字符串，你会得到一个由字符串中每个字符组成的数组。</p>
<p>下面是两个用空格分隔一个字符串的例子，另一个是用数字的正则表达式分隔：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> bySpace = str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherString = <span class="string">&quot;How9are7you2today&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> byDigits = otherString.<span class="title function_">split</span>(<span class="regexp">/\d/</span>);</span><br></pre></td></tr></table></figure>

<p><code>bySpace</code> 将有值 <code>[&quot;Hello&quot;, &quot;World&quot;]</code>，<code>byDigits</code> 将有值 <code>[&quot;How&quot;, &quot;are&quot;, &quot;you&quot;, &quot;today&quot;]</code>。</p>
<p>因为字符串是不可变的，<code>split</code> 方法操作它们更方便。</p>
<h3 id="19-使用-join-方法将数组组合成字符串"><a href="#19-使用-join-方法将数组组合成字符串" class="headerlink" title="19. 使用 join 方法将数组组合成字符串"></a>19. 使用 join 方法将数组组合成字符串</h3><p><code>join</code> 方法用来把数组中的所有元素放入一个字符串。 并通过指定的分隔符参数进行分隔。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> str = arr.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>str</code> 的值应该是字符串 <code>Hello World</code>。</p>
<h3 id="20-应用函数式编程将字符串转换为URL片段"><a href="#20-应用函数式编程将字符串转换为URL片段" class="headerlink" title="20. 应用函数式编程将字符串转换为URL片段"></a>20. 应用函数式编程将字符串转换为URL片段</h3><p>最后几个挑战中涵盖了许多符合函数式编程原则并在处理数组和字符串中非常有用的方法。 我们还学习了强大的、可以将问题简化为更简单形式的 <code>reduce</code> 方法。 从计算平均值到排序，任何数组操作都可以用它来实现。 回想一下，<code>map</code> 和 <code>filter</code> 方法都是 <code>reduce</code> 的特殊实现。</p>
<p>让我们把学到的知识结合起来解决一个实际问题。</p>
<p>许多内容管理站点（CMS）为了让添加书签更简单，会将帖子的标题添加到 URL 上。 举个例子，如果你写了一篇标题为 <code>Stop Using Reduce</code> 的帖子，URL很可能会包含标题字符串的某种形式 (如：<code>.../stop-using-reduce</code>)。 你可能已经在 freeCodeCamp 网站上注意到了这一点。</p>
<h3 id="21-使用-every-方法检查数组中的每个元素是否符合条件"><a href="#21-使用-every-方法检查数组中的每个元素是否符合条件" class="headerlink" title="21. 使用 every 方法检查数组中的每个元素是否符合条件"></a>21. 使用 every 方法检查数组中的每个元素是否符合条件</h3><p><code>every</code> 方法用于检测数组中<em>所有</em>元素是否都符合指定条件。 如果所有元素满足条件，返回布尔值 <code>true</code>，反之返回 <code>false</code>。</p>
<p>举个例子，下面的代码检测数组 <code>numbers</code> 的所有元素是否都小于 10：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>every</code> 方法在这里会返回 <code>false</code>。</p>
<h3 id="22-使用-some-方法检查数组中是否有元素是否符合条件"><a href="#22-使用-some-方法检查数组中是否有元素是否符合条件" class="headerlink" title="22. 使用 some 方法检查数组中是否有元素是否符合条件"></a>22. 使用 some 方法检查数组中是否有元素是否符合条件</h3><p><code>some</code> 方法用于检测数组中<em>任何</em>元素是否满足指定条件。 如果有一个元素满足条件，返回布尔值 <code>true</code>，反之返回 <code>false</code>。</p>
<p>举个例子，下面的代码检测数组<code>numbers</code>中是否有元素小于 10：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">10</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">220</span>, <span class="number">110</span>, <span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> currentValue &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>some</code> 方法将返回 <code>true</code>。</p>
<h3 id="23-函数柯里化和局部调用"><a href="#23-函数柯里化和局部调用" class="headerlink" title="23. 函数柯里化和局部调用"></a>23. 函数柯里化和局部调用</h3><p>arity（参数个数）是函数所需的形参的数量。 函数柯里化（Currying）意思是把接受多个 arity 的函数变换成接受单一 arity 的函数。</p>
<p>换句话说，就是重构函数让它接收一个参数，然后返回接收下一个参数的函数，依此类推。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unCurried</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">curried</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>)(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><code>curried(1)(2)</code> 会返回 <code>3</code>。</p>
<p>柯里化在不能一次为函数提供所有参数情况下很有用。 因为它可以将每个函数的调用保存到一个变量中，该变量将保存返回的函数引用，该引用在下一个参数可用时接受该参数。 下面是使用柯里化函数的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> funcForY = <span class="title function_">curried</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">funcForY</span>(<span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>类似地，局部调用（ partial application）的意思是一次对一个函数应用几个参数，然后返回另一个应用更多参数的函数。 这是一个示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">impartial</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> partialFn = impartial.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">partialFn</span>(<span class="number">10</span>); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(九)</title>
    <url>/javascript-algorithms-and-data-structures-%E4%B9%9D/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="中级算法"><a href="#中级算法" class="headerlink" title="中级算法"></a>中级算法</h2><h3 id="1-范围内的数字求和"><a href="#1-范围内的数字求和" class="headerlink" title="1. 范围内的数字求和"></a>1. 范围内的数字求和</h3><p>我们会传入一个由两个数字组成的数组。 给出一个含有两个数字的数组，我们需要写一个函数，让它返回这两个数字间所有数字（包含这两个数字）的总和。 最低的数字并不总是第一位。</p>
<p>例如，<code>sumAll([4,1])</code> 应返回 <code>10</code>，因为从 1 到 4（包含 1、4）的所有数字的和是 <code>10</code>。</p>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumAll</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a =<span class="title class_">Math</span>.<span class="title function_">max</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">const</span> b =<span class="title class_">Math</span>.<span class="title function_">min</span>(arr[<span class="number">0</span>],arr[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = b;i &lt;= a;i++)&#123;</span><br><span class="line">    sum +=i; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sumAll</span>([<span class="number">1</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sumAll</span>([<span class="number">1</span>, <span class="number">4</span>]))</span><br></pre></td></tr></table></figure>

<h3 id="2-数组的对称差"><a href="#2-数组的对称差" class="headerlink" title="2. 数组的对称差"></a>2. 数组的对称差</h3><p>比较两个数组并返回一个新数组，包含所有只在其中一个数组中出现的元素，排除两个数组都存在的元素。 换言之，我们需要返回两个数组的对称差。</p>
<p><strong>注意：</strong>返回数组中的元素顺序不会影响挑战的测试结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">diffArray</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr1</span><br><span class="line">    .<span class="title function_">concat</span>(arr2)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !arr1.<span class="title function_">includes</span>(item) || !arr2.<span class="title function_">includes</span>(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">diffArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="3-过滤数组元素"><a href="#3-过滤数组元素" class="headerlink" title="3. 过滤数组元素"></a>3. 过滤数组元素</h3><p>你将获得一个初始数组（<code>destroyer</code> 函数中的第一个参数），后跟一个或多个参数。 从初始数组中移除所有与后续参数相等的元素。</p>
<p><strong>注意：</strong> 你可以使用 <code>arguments</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">destroyer</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> valsToRemove = <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">arguments</span>).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> filteredArray = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> removeElement = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; valsToRemove.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === valsToRemove[j]) &#123;</span><br><span class="line">        removeElement = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!removeElement) &#123;</span><br><span class="line">      filteredArray.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> filteredArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">destroyer</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-找出包含特定键值对的对象"><a href="#4-找出包含特定键值对的对象" class="headerlink" title="4. 找出包含特定键值对的对象"></a>4. 找出包含特定键值对的对象</h3><p>创建一个查看对象数组（第一个参数）的函数，并返回具有匹配的名称和值对的所有对象的数组（第二个参数）。 如果要包含在返回的数组中，则源对象的每个名称和值对都必须存在于集合中的对象中。</p>
<p>比如，如果第一个参数是 <code>[&#123; first: &quot;Romeo&quot;, last: &quot;Montague&quot; &#125;, &#123; first: &quot;Mercutio&quot;, last: null &#125;, &#123; first: &quot;Tybalt&quot;, last: &quot;Capulet&quot; &#125;]</code>，第二个参数是 <code>&#123; last: &quot;Capulet&quot; &#125;</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">whatIsInAName</span>(<span class="params">collection, source</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> souceKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(source);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// filter the collection</span></span><br><span class="line">  <span class="keyword">return</span> collection.<span class="title function_">filter</span>(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; souceKeys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj[souceKeys[i]] !== source[souceKeys[i]]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-短线连接格式"><a href="#5-短线连接格式" class="headerlink" title="5. 短线连接格式"></a>5. 短线连接格式</h3><p>将字符串转换为短线连接格式。 短线连接格式是小写单词全部小写并以破折号分隔。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">spinalCase</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// Replace low-upper case to low-space-uppercase</span></span><br><span class="line">  str = str.<span class="title function_">replace</span>(<span class="regexp">/([a-z])([A-Z])/g</span>, <span class="string">&quot;$1 $2&quot;</span>);</span><br><span class="line">  <span class="comment">// Split on whitespace and underscores and join with dash</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .<span class="title function_">toLowerCase</span>()</span><br><span class="line">    .<span class="title function_">split</span>(<span class="regexp">/(?:_| )+/</span>)</span><br><span class="line">    .<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">spinalCase</span>(<span class="string">&quot;The_Andy_Griffith_Show&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-儿童黑话"><a href="#6-儿童黑话" class="headerlink" title="6. 儿童黑话"></a>6. 儿童黑话</h3><p>儿童黑话也叫 Pig Latin，是一种英语语言游戏。 规则如下：</p>
<ul>
<li><p>如果单词以辅音开头，就把第一个辅音字母或第一组辅音簇移到单词的结尾，并在后面加上 <code>ay</code>。</p>
</li>
<li><p>如果单词以元音开头，只需要在结尾加上 <code>way</code>。</p>
</li>
</ul>
<hr>
<p>请把传入的字符串根据上述规则翻译成儿童黑话并返回结果。 输入的字符串一定是一个小写的英文单词。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">translatePigLatin</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> consonantRegex = <span class="regexp">/^[^aeiou]+/</span>;</span><br><span class="line">  <span class="keyword">let</span> myConsonants = str.<span class="title function_">match</span>(consonantRegex);</span><br><span class="line">  <span class="keyword">return</span> myConsonants !== <span class="literal">null</span></span><br><span class="line">    ? str</span><br><span class="line">        .<span class="title function_">replace</span>(consonantRegex, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        .<span class="title function_">concat</span>(myConsonants)</span><br><span class="line">        .<span class="title function_">concat</span>(<span class="string">&quot;ay&quot;</span>)</span><br><span class="line">    : str.<span class="title function_">concat</span>(<span class="string">&quot;way&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">translatePigLatin</span>(<span class="string">&quot;consonant&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-搜索与替换"><a href="#7-搜索与替换" class="headerlink" title="7. 搜索与替换"></a>7. 搜索与替换</h3><p>要写一个字符串的搜索与替换函数，它的返回值为完成替换后的新字符串。</p>
<p>这个函数接收的第一个参数为待替换的句子。</p>
<p>第二个参数为句中需要被替换的单词。</p>
<p>第三个参数为替换后的单词。</p>
<p><strong>注意：</strong> 在更换原始单词时保留原始单词中第一个字符的大小写。 即如果传入的第二个参数为 <code>Book</code>，第三个参数为 <code>dog</code>，那么替换后的结果应为 <code>Dog</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myReplace</span>(<span class="params">str, before, after</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^[A-Z]/</span>.<span class="title function_">test</span>(before)) &#123;</span><br><span class="line">    after = after[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + after.<span class="title function_">substring</span>(<span class="number">1</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    after = after[<span class="number">0</span>].<span class="title function_">toLowerCase</span>() + after.<span class="title function_">substring</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">replace</span>(before, after);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">myReplace</span>(<span class="string">&quot;Let us go to the store&quot;</span>, <span class="string">&quot;store&quot;</span>, <span class="string">&quot;mall&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="8-DNA-配对"><a href="#8-DNA-配对" class="headerlink" title="8. DNA 配对"></a>8. DNA 配对</h3><p>脱氧核糖核酸组由核酸对组成。 基本配对的字符是 <em>AT</em> and <em>CG</em>，这些字符形成了 DNA 双螺旋的构件。</p>
<p>DNA 链缺少配对元素。 写一个函数来匹配缺失的 DNA 字符串。 对于提供的字符串中的每个字符，找出基本的配对字符。 返回二维数组的结果。</p>
<p>例如，传入 <code>GCG</code> 时，应返回 <code>[[&quot;G&quot;, &quot;C&quot;], [&quot;C&quot;,&quot;G&quot;], [&quot;G&quot;, &quot;C&quot;]]</code>。</p>
<p>字符和它的配对组成一个数组，所有配对数组放在一个数组里。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pairElement</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// create object for pair lookup</span></span><br><span class="line">  <span class="keyword">const</span> pairs = &#123;</span><br><span class="line">    <span class="attr">A</span>: <span class="string">&quot;T&quot;</span>,</span><br><span class="line">    <span class="attr">T</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    <span class="attr">C</span>: <span class="string">&quot;G&quot;</span>,</span><br><span class="line">    <span class="attr">G</span>: <span class="string">&quot;C&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// map character to array of character and matching pair</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x, pairs[x]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pairElement</span>(<span class="string">&quot;GCG&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="9-寻找缺失的字母"><a href="#9-寻找缺失的字母" class="headerlink" title="9. 寻找缺失的字母"></a>9. 寻找缺失的字母</h3><p>写一个函数，找出传入的字符串里缺失的字母并返回它。</p>
<p>如果所有字母都在传入的字符串范围内，返回 <code>undefined</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fearNotLetter</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> charCode = str.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (charCode !== str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) + i) &#123;</span><br><span class="line"><span class="comment">//  String.fromCharCode() 方法返回由指定的 UTF-16 代码单元序列创建的字符串。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(charCode - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fearNotLetter</span>(<span class="string">&quot;abce&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="10-集合排序"><a href="#10-集合排序" class="headerlink" title="10. 集合排序"></a>10. 集合排序</h3><p>编写一个带有两个或更多数组的函数，并按原始提供的数组的顺序返回一个新的唯一值数组。</p>
<p>换句话说，所有数组中出现的所有值都应按其原始顺序包括在内，但最终数组中不得重复。</p>
<p>去重后的数字应按其出现在参数中的原始顺序排序，最终数组不应按数字大小进行排序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniteUnique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="keyword">let</span> a = [];</span><br><span class="line">  <span class="keyword">let</span> b = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;i &lt;newArr.<span class="property">length</span>;i++ )&#123;</span><br><span class="line">    a = a.<span class="title function_">concat</span>(newArr[i]);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ;j &lt; a.<span class="property">length</span>;j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b.<span class="title function_">includes</span>(a[j]) )&#123;</span><br><span class="line">      b.<span class="title function_">push</span>(a[j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> b </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">uniteUnique</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="11-转换-HTML-字符实体"><a href="#11-转换-HTML-字符实体" class="headerlink" title="11. 转换 HTML 字符实体"></a>11. 转换 HTML 字符实体</h3><p>请将字符串中的 <code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&quot;</code>（双引号）和 <code>&#39;</code>（单引号）转换为相应的 HTML 字符实体。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertHTML</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// Split by character to avoid problems.</span></span><br><span class="line">  <span class="keyword">var</span> temp = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="comment">// Since we are only checking for a few HTML elements, use a switch</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (temp[i]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;&lt;&quot;</span>:</span><br><span class="line">        temp[i] = <span class="string">&quot;&amp;lt;&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;&amp;&quot;</span>:</span><br><span class="line">        temp[i] = <span class="string">&quot;&amp;amp;&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;&gt;&quot;</span>:</span><br><span class="line">        temp[i] = <span class="string">&quot;&amp;gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">        temp[i] = <span class="string">&quot;&amp;quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;&#x27;&quot;</span>:</span><br><span class="line">        temp[i] = <span class="string">&quot;&amp;apos;&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  temp = temp.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test here</span></span><br><span class="line"><span class="title function_">convertHTML</span>(<span class="string">&quot;Dolce &amp; Gabbana&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="12-求斐波那契数列中的奇数之和"><a href="#12-求斐波那契数列中的奇数之和" class="headerlink" title="12. 求斐波那契数列中的奇数之和"></a>12. 求斐波那契数列中的奇数之和</h3><p>写一个函数，参数为一个正整数 <code>num</code>，返回值为斐波那契数列中，小于或等于 <code>num</code> 的奇数之和。</p>
<p>斐波那契数列的前两个数字是 0 和 1。 后面的每个数字由之前两数相加得出。 斐波那契数列的前七个数字分别为：0、1、1、2、3、5、8。</p>
<p>比如，<code>sumFibs(10)</code> 应该返回 <code>10</code>。 因为斐波那契数列中，比 <code>10</code> 小的数字只有 1、1、3、5。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumFibs</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> prevNumber = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> currNumber = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (currNumber &lt;= num) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currNumber % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      result += currNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    currNumber += prevNumber;</span><br><span class="line">    prevNumber = currNumber - prevNumber;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test here</span></span><br><span class="line"><span class="title function_">sumFibs</span>(<span class="number">75024</span>);</span><br></pre></td></tr></table></figure>

<h3 id="13-质数求和"><a href="#13-质数求和" class="headerlink" title="13. 质数求和"></a>13. 质数求和</h3><p>质数（prime number）是大于 1 且仅可以被 1 和自己整除的数。 比如，2 就是一个质数，因为它只可以被 1 和 2（它本身）整除。 相反，4 不是质数，因为它可以被 1, 2 和 4 整除。</p>
<p>请完成 <code>sumPrimes</code> 方法，使其返回小于等于传入参数数字的所有质数之和。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumPrimes</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="comment">// Helper function to check primality</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sqrt = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= sqrt; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num % i === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check all numbers for primality</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i))</span><br><span class="line">      sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14-找出数字范围内的最小公倍数"><a href="#14-找出数字范围内的最小公倍数" class="headerlink" title="14. 找出数字范围内的最小公倍数"></a>14. 找出数字范围内的最小公倍数</h3><p>找到给定参数的最小公倍数，可以被这两个参数整除，也可以被指定范围内的所有整数整除。</p>
<p>注意，较小数不一定总是出现在数组的第一个元素。</p>
<p>例如，如果给定 1 和 3，找到 1 和 3 的最小公倍数，也可以被 1 到 3 <em>之间</em>的所有数字整除。 这里的答案将是 6。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">smallestCommons</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [min, max] = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="keyword">const</span> numberDivisors = max - min + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// Largest possible value for SCM</span></span><br><span class="line">  <span class="keyword">let</span> upperBound = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = min; i &lt;= max; i++) &#123;</span><br><span class="line">    upperBound *= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Test all multiples of &#x27;max&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> multiple = max; multiple &lt;= upperBound; multiple += max) &#123;</span><br><span class="line">    <span class="comment">// Check if every value in range divides &#x27;multiple&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> divisorCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = min; i &lt;= max; i++) &#123;</span><br><span class="line">      <span class="comment">// Count divisors</span></span><br><span class="line">      <span class="keyword">if</span> (multiple % i === <span class="number">0</span>) &#123;</span><br><span class="line">        divisorCount += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (divisorCount === numberDivisors) &#123;</span><br><span class="line">      <span class="keyword">return</span> multiple;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">smallestCommons</span>([<span class="number">1</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="15-根据参数删除数组元素"><a href="#15-根据参数删除数组元素" class="headerlink" title="15. 根据参数删除数组元素"></a>15. 根据参数删除数组元素</h3><p>给定数组 <code>arr</code>，从数组的第一个元素开始，用函数 <code>func</code> 来检查数组的每个元素是否返回 <code>true</code>。 如果返回 false，就把这个元素删除。 持续执行删除操作，直到某个元素传入 func 时返回 true 为止。</p>
<p>然后在条件满足后返回数组的其余部分，否则， <code>arr</code> 应作为空数组返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dropElements</span>(<span class="params">arr, func</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; !<span class="title function_">func</span>(arr[<span class="number">0</span>])) &#123;</span><br><span class="line">    arr.<span class="title function_">shift</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test here</span></span><br><span class="line"><span class="title function_">dropElements</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="16-数组扁平化"><a href="#16-数组扁平化" class="headerlink" title="16. 数组扁平化"></a>16. 数组扁平化</h3><p>嵌套数组扁平化成一维数组。 必须考虑到各种深度的嵌套层级。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">steamrollArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> flattenedArray = [];</span><br><span class="line">  <span class="comment">// Loop over array contents</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">      <span class="comment">// Recursively flatten entries that are arrays</span></span><br><span class="line">      <span class="comment">//  and push into the flattenedArray</span></span><br><span class="line">      flattenedArray.<span class="title function_">push</span>(...<span class="title function_">steamrollArray</span>(arr[i]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Copy contents that are not arrays</span></span><br><span class="line">      flattenedArray.<span class="title function_">push</span>(arr[i]);     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flattenedArray;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test here</span></span><br><span class="line"><span class="title function_">steamrollArray</span>([<span class="number">1</span>, [<span class="number">2</span>], [<span class="number">3</span>, [[<span class="number">4</span>]]]]);</span><br></pre></td></tr></table></figure>

<h3 id="17-翻译二进制字符串"><a href="#17-翻译二进制字符串" class="headerlink" title="17. 翻译二进制字符串"></a>17. 翻译二进制字符串</h3><p>请实现一个函数，把传入的二进制字符串转换成英文句子。</p>
<p>二进制字符串会以空格分隔。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binaryAgent</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> biString = str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> uniString = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; biString.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    uniString.<span class="title function_">push</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="built_in">parseInt</span>(biString[i], <span class="number">2</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uniString.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test here</span></span><br><span class="line"><span class="title function_">binaryAgent</span>(</span><br><span class="line">  <span class="string">&quot;01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="18-一切都是True"><a href="#18-一切都是True" class="headerlink" title="18. 一切都是True"></a>18. 一切都是True</h3><p>检查谓词（第二个参数）在集合（第一个参数）的所有元素是否为 truthy。</p>
<p>换句话说，你将获得一个对象的数组集合。 如果数组中的每个对象里，<code>pre</code> 对应属性值均为 <code>truthy</code>，则返回 <code>true</code>。 否则，返回 <code>false</code> 。</p>
<p>JavaScript 中，如果一个值在 Boolean 的上下文中的执行结果为 <code>true</code>，那么我们称这个值是 <code>truthy</code> 的。</p>
<p>别忘了，你可以使用点号表示法或方括号表示法（<code>[]</code>）来访问对象的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">truthCheck</span>(<span class="params">collection, pre</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">in</span> collection) &#123;</span><br><span class="line">    <span class="keyword">if</span> (collection[c].<span class="title function_">hasOwnProperty</span>(pre) &amp;&amp; <span class="title class_">Boolean</span>(collection[c][pre])) &#123;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counter == collection.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">truthCheck</span>([&#123; <span class="attr">name</span>: <span class="string">&quot;Quincy&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;Founder&quot;</span>, <span class="attr">isBot</span>: <span class="literal">false</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;Naomi&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;&quot;</span>, <span class="attr">isBot</span>: <span class="literal">false</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;Camperbot&quot;</span>, <span class="attr">role</span>: <span class="string">&quot;Bot&quot;</span>, <span class="attr">isBot</span>: <span class="literal">true</span> &#125;], <span class="string">&quot;isBot&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="19-可选参数"><a href="#19-可选参数" class="headerlink" title="19. 可选参数"></a>19. 可选参数</h3><p>创建一个将两个参数相加的函数。 如果只提供了一个参数，则返回一个需要一个参数并返回总和的函数。</p>
<p>比如，<code>addTogether(2, 3)</code> 应该返回 <code>5</code>。 而 <code>addTogether(2)</code> 应该返回一个函数。</p>
<p>调用这个返回的函数，为它传入一个值，会返回两个值的总和：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sumTwoAnd = <span class="title function_">addTogether</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><code>sumTwoAnd(3)</code> 应返回 <code>5</code>。</p>
<p>如果任一参数不是有效数字，则返回 undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addTogether</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [first, second] = <span class="variable language_">arguments</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([first, second])</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (first) === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (second) === <span class="string">&quot;number&quot;</span>) <span class="keyword">return</span> first + second;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="function">(<span class="params">second</span>) =&gt;</span> <span class="title function_">addTogether</span>(first, second);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="20-创建一个人员对象"><a href="#20-创建一个人员对象" class="headerlink" title="20. 创建一个人员对象"></a>20. 创建一个人员对象</h3><p>用以下方法填充对象构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getFirstName</span>()</span><br><span class="line"><span class="title function_">getLastName</span>()</span><br><span class="line"><span class="title function_">getFullName</span>()</span><br><span class="line"><span class="title function_">setFirstName</span>(first)</span><br><span class="line"><span class="title function_">setLastName</span>(last)</span><br><span class="line"><span class="title function_">setFullName</span>(firstAndLast)</span><br></pre></td></tr></table></figure>

<p>运行测试以查看每个方法的预期输出。 方法接收一个参数，因此必须要有一个参数，并且其类型应该为字符串。 这些方法必须是与对象交互的唯一可用方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">firstAndLast</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> fullName = firstAndLast;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getFirstName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fullName.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getLastName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fullName.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getFullName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fullName;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">setFirstName</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    fullName = name + <span class="string">&quot; &quot;</span> + fullName.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">setLastName</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    fullName = fullName.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">setFullName</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    fullName = name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bob = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob Ross&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bob.<span class="title function_">getFullName</span>());</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Exercise — Product Landing Page</title>
    <url>/project-exercise-%E2%80%94-product-landing-page/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h5 id="Product-Landing-Page-——-Test"><a href="#Product-Landing-Page-——-Test" class="headerlink" title="Product Landing Page —— Test"></a>Product Landing Page —— Test</h5><h5 id="Objective"><a href="#Objective" class="headerlink" title="Objective:"></a><strong>Objective:</strong></h5><blockquote>
<p>Build an app that is functionally similar to <a href="https://product-landing-page.freecodecamp.rocks/">https://product-landing-page.freecodecamp.rocks</a></p>
</blockquote>
<span id="more"></span>

<p><strong>User Stories:</strong></p>
<ol>
<li>Your product landing page should have a <code>header</code> element with a corresponding <code>id=&quot;header&quot;</code></li>
<li>You can see an image within the <code>header</code> element with a corresponding <code>id=&quot;header-img&quot;</code> (A logo would make a good image here)</li>
<li>Within the <code>#header</code> element, you can see a <code>nav</code> element with a corresponding <code>id=&quot;nav-bar&quot;</code></li>
<li>You can see at least three clickable elements inside the <code>nav</code> element, each with the class <code>nav-link</code></li>
<li>When you click a <code>.nav-link</code> button in the <code>nav</code> element, you are taken to the corresponding section of the landing page</li>
<li>You can watch an embedded product video with <code>id=&quot;video&quot;</code></li>
<li>Your landing page has a <code>form</code> element with a corresponding <code>id=&quot;form&quot;</code></li>
<li>Within the form, there is an <code>input</code> field with <code>id=&quot;email&quot;</code> where you can enter an email address</li>
<li>The <code>#email</code> input field should have placeholder text to let users know what the field is for</li>
<li>The <code>#email</code> input field uses HTML5 validation to confirm that the entered text is an email address</li>
<li>Within the form, there is a submit <code>input</code> with a corresponding <code>id=&quot;submit&quot;</code></li>
<li>When you click the <code>#submit</code> element, the email is submitted to a static page (use this mock URL: <code>https://www.freecodecamp.com/email-submit</code>)</li>
<li>The navbar should always be at the top of the viewport</li>
<li>Your product landing page should have at least one media query</li>
<li>Your product landing page should utilize CSS flexbox at least once</li>
</ol>
<p>Fulfill the user stories and pass all the tests below to complete this project. Give it your own personal style. Happy Coding!</p>
<p><strong>Note:</strong> Be sure to add <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code> in your HTML to link your stylesheet and apply your CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;header-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/testable-projects-fcc/images/product-landing-page-logo.png&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;nav-bar&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#feature&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>特征<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#work&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>工作原理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#feature&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span>&gt;</span>定价<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span>&gt;</span>          </span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Handcrafted, home-made masterpieces<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;https://www.freecodecamp.com/email-submit&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的邮箱&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;feature&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>bb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>cc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;work&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;https://fonts.googleapis.com/css?family=Lato:400,700&#x27;</span>;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Lato&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">650px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">650px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.logo</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">650px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">35vw</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">650px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">nav</span> &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Project Exercise</category>
        <category>Primary Program</category>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>Project Exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>Project Exercise — Survey Form</title>
    <url>/project-exercise-%E2%80%94-survey-form/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Survey-Form-——-Test"><a href="#Survey-Form-——-Test" class="headerlink" title="Survey Form —— Test"></a>Survey Form —— Test</h4><h5 id="Objective"><a href="#Objective" class="headerlink" title="Objective:"></a><strong>Objective:</strong></h5><blockquote>
<p>Build an app that is functionally similar to <a href="https://survey-form.freecodecamp.rocks/">https://survey-form.freecodecamp.rocks</a></p>
</blockquote>
<span id="more"></span>

<h5 id="User-Stories-【The-requirements-are-as-follows】"><a href="#User-Stories-【The-requirements-are-as-follows】" class="headerlink" title="**User Stories:**【The requirements are as follows】"></a>**User Stories:**【The requirements are as follows】</h5><ol>
<li><p>You should have a page title in an <code>h1</code> element with an <code>id</code> of <code>title</code></p>
</li>
<li><p>You should have a short explanation in a <code>p</code> element with an <code>id</code> of <code>description</code></p>
</li>
<li><p>You should have a <code>form</code> element with an <code>id</code> of <code>survey-form</code></p>
</li>
<li><p>Inside the form element, you are <strong>required</strong> to enter your name in an <code>input</code> field that has an <code>id</code> of <code>name</code> and a <code>type</code> of <code>text</code></p>
</li>
<li><p>Inside the form element, you are <strong>required</strong> to enter your email in an <code>input</code> field that has an <code>id</code> of <code>email</code></p>
</li>
<li><p>If you enter an email that is not formatted correctly, you will see an HTML5 validation error</p>
</li>
<li><p>Inside the form, you can enter a number in an <code>input</code> field that has an <code>id</code> of <code>number</code></p>
</li>
<li><p>The number input should not accept non-numbers, either by preventing you from typing them or by showing an HTML5 validation error (depending on your browser).</p>
</li>
<li><p>If you enter numbers outside the range of the number input, which are defined by the <code>min</code> and <code>max</code> attributes, you will see an HTML5 validation error</p>
</li>
<li><p>For the name, email, and number input fields, you can see corresponding <code>label</code> elements in the form, that describe the purpose of each field with the following ids: <code>id=&quot;name-label&quot;</code>, <code>id=&quot;email-label&quot;</code>, and <code>id=&quot;number-label&quot;</code></p>
</li>
<li><p>For the name, email, and number input fields, you can see placeholder text that gives a description or instructions for each field</p>
</li>
<li><p>Inside the form element, you should have a <code>select</code> dropdown element with an <code>id</code> of <code>dropdown</code> and at least two options to choose from</p>
</li>
<li><p>Inside the form element, you can select an option from a group of at least two radio buttons that are grouped using the <code>name</code> attribute</p>
</li>
<li><p>Inside the form element, you can select several fields from a series of checkboxes, each of which must have a <code>value</code> attribute</p>
</li>
<li><p>Inside the form element, you are presented with a <code>textarea</code> for additional comments</p>
</li>
<li><p>Inside the form element, you are presented with a button with <code>id</code> of <code>submit</code> to submit all the inputs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>免费代码营调查表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span>&gt;</span>感谢您抽出宝贵时间帮助我们改进平台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;survey-form&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name-label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name-label&quot;</span>&gt;</span>名字： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的名字&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email-label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email-label&quot;</span>&gt;</span>电子邮箱： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的电子邮箱&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;number-label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;number-label&quot;</span>&gt;</span>年龄： </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">min</span>=<span class="string">&quot;14&quot;</span> <span class="attr">max</span>=<span class="string">&quot;120&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span> 哪个角色更适合你？</span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;input&gt;哪个角色最适合你？&lt;/input&gt; --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span>&gt;</span>选择你当前角色<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span>社畜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;3&#x27;</span>&gt;</span>保密<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>你觉得怎么样？</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;evaluate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>很好<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;evaluate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;evaluate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>不咋样<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>你希望看到什么？</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>前端项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>后端项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>游戏项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>sex项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>有什么意见或建议吗？</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;bio&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请写出你的想法&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="修改版"><a href="#修改版" class="headerlink" title="修改版"></a>修改版</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>免费代码营调查表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span>&gt;</span>感谢您抽出宝贵时间帮助我们改进平台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;survey-form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name-label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name-label&quot;</span>&gt;</span>名字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的名字&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email-label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email-label&quot;</span>&gt;</span>电子邮箱：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的电子邮箱&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;number-label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;number-label&quot;</span> &gt;</span>年龄:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">min</span>=<span class="string">&quot;14&quot;</span> <span class="attr">max</span>=<span class="string">&quot;120&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span> 哪个角色更适合你？ <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;input&gt;哪个角色最适合你？&lt;/input&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span>&gt;</span>选择你当前角色<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span>社畜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;3&#x27;</span>&gt;</span>保密<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>你觉得怎么样？<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;evaluate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-radio&quot;</span>&gt;</span>很好<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;evaluate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-radio&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;evaluate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-radio&quot;</span>&gt;</span>不咋样<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>你希望看到什么？<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-checkbox&quot;</span>&gt;</span>前端项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-checkbox&quot;</span>&gt;</span>后端项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-checkbox&quot;</span>&gt;</span>游戏项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-checkbox&quot;</span>&gt;</span>**项目<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>有什么意见或建议吗？<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;bio&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请写出你的想法&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Project Exercise</category>
        <category>Primary Program</category>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>Project Exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Algorithms and Data Structures(七)</title>
    <url>/javascript-algorithms-and-data-structures-%E4%B8%83/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures"><a href="#freeCodeCamp-—-JavaScript-Algorithms-and-Data-Structures" class="headerlink" title="freeCodeCamp —- JavaScript Algorithms and Data Structures"></a>freeCodeCamp —- JavaScript Algorithms and Data Structures</h1><hr>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="1-创建一个基本的-JavaScript-对象"><a href="#1-创建一个基本的-JavaScript-对象" class="headerlink" title="1. 创建一个基本的 JavaScript 对象"></a>1. 创建一个基本的 JavaScript 对象</h3><span id="more"></span>

<p>想想我们在生活中每天都可见到的事物：比如汽车、商店以及小鸟等。 它们都是对象：即人们可以观察和与之互动的实体事物。</p>
<p>这些物体的性质是什么？ 汽车有轮子， 商店销售物品， 鸟儿有翅膀。</p>
<p>这些特征，或者说是属性，定义了一个对象由什么构成的。 需要注意的是：那些相似的对象可以拥有相同的属性，但是这些属性可能会有不同的值。 举个例子：所有的汽车都有轮子，但并不是所有汽车的轮子个数都是一样的。</p>
<p>JavaScript 中的对象可以用来描述现实世界中的物体，并赋予它们属性和行为，就像它们在现实世界中的对应物一样。 下面是使用这些概念来创建一个 <code>duck</code> 对象的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Aflac&quot;</span>,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个 <code>duck</code> 对象有两组键值对：一个是 <code>name</code> 属性，它的值是 <code>Aflac</code>；另一个是 <code>numLegs</code> 属性，它的值是 2。</p>
<h3 id="2-使用点符号来访问对象的属性"><a href="#2-使用点符号来访问对象的属性" class="headerlink" title="2. 使用点符号来访问对象的属性"></a>2. 使用点符号来访问对象的属性</h3><p>访问这些属性的值。 下面是一个示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Aflac&quot;</span>,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(duck.<span class="property">name</span>);</span><br></pre></td></tr></table></figure>

<p>我们可以用“点号表示法”来访问对象的属性，<code>duck</code> 后面加上点号以及属性名 <code>name</code>，来访问到 <code>Aflac</code>。</p>
<h3 id="3-在对象上创建方法"><a href="#3-在对象上创建方法" class="headerlink" title="3. 在对象上创建方法"></a>3. 在对象上创建方法</h3><p>对象可以有一个叫做 method 的特殊属性。</p>
<p>方法属性也就是函数。 这给对象添加了不同的行为。 以下就是一个带有方法属性的 <code>duck</code> 示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Aflac&quot;</span>,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="string">&quot;The name of this duck is &quot;</span> + duck.<span class="property">name</span> + <span class="string">&quot;.&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">duck.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>

<p>示例添加了 <code>sayName</code> 方法，函数返回包含 <code>duck</code> 名字的一个句子。 注意：这个方法在返回语句中使用 <code>duck.name</code> 的方式来获取 <code>name</code> 的属性值。</p>
<h3 id="4-使用-this-关键字提高代码重用性"><a href="#4-使用-this-关键字提高代码重用性" class="headerlink" title="4. 使用 this 关键字提高代码重用性"></a>4. 使用 this 关键字提高代码重用性</h3><p>通过使用 “点号表示法” <code>duck.name</code> 来获取 <code>name</code> 的属性值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="string">&quot;The name of this duck is &quot;</span> + duck.<span class="property">name</span> + <span class="string">&quot;.&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>虽然这是访问对象属性的有效方法，但是这里有一个陷阱。 如果变量名发生了改变，那么引用了原始名称的任何代码都需要更新。 在一个简短的对象定义中，这并不是问题，但是如果对象有很多对其属性的引用，那么发生错误的可能性就更大了。</p>
<p>我们可以使用 <code>this</code> 关键字来避免这一问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Aflac&quot;</span>,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="string">&quot;The name of this duck is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;.&quot;</span>;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>this</code> 是一个很复杂的知识点，而上面那个例子也只是使用它的一种方法而已。 在当前的上下文环境中，<code>this</code> 指向的就是与这个方法有关联的 <code>duck</code> 对象。 如果把对象的变量名改为 <code>mallard</code>，那使用 this 后就没有必要在代码中找到所有指向 <code>duck</code> 的部分。 这样可以使得代码更具有可读性和复用性。</p>
<h3 id="5-定义构造函数"><a href="#5-定义构造函数" class="headerlink" title="5. 定义构造函数"></a>5. 定义构造函数</h3><p>构造函数是创建对象的函数。 函数给这个新对象定义属性和行为。 可将它们视为创建的新对象的蓝图。</p>
<p>以下就是一个构造函数的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Albert&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个构造函数定义了一个 <code>Bird</code> 对象，其属性 <code>name</code>、<code>color</code> 和 <code>numLegs</code> 的值分别被设置为 Albert、blue 和 2。 构造函数遵循一些惯例规则：</p>
<ul>
<li>构造函数函数名的首字母大写，这是为了方便我们区分构造函数（ <code>constructors</code>）和其他非构造函数。</li>
<li>构造函数使用 <code>this</code> 关键字来给它将创建的这个对象设置新的属性。 在构造函数里面，<code>this</code> 指向的就是它新创建的这个对象。</li>
<li>构造函数定义了属性和行为就可创建对象，而不是像其他函数一样需要设置返回值。</li>
</ul>
<h3 id="6-使用构造函数创建对象"><a href="#6-使用构造函数创建对象" class="headerlink" title="6. 使用构造函数创建对象"></a>6. 使用构造函数创建对象</h3><p>创建一个 <code>Bird</code> 构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;Albert&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span>  = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blueBird = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 构造函数内的 <code>this</code> 总是指被创建的对象。</p>
<p>注意：通过构造函数创建对象的时候要使用 <code>new</code> 操作符。 因为只有这样，JavaScript 才知道要给 <code>Bird</code> 这个构造函数创建一个新的实例：<code>blueBird</code>。 如果不使用 <code>new</code> 操作符来新建对象，那么构造函数里面的 <code>this</code> 就无法指向新创建的这个对象实例，从而产生不可预见的错误。 现在 <code>blueBird</code> 这个实例就继承了<code>Bird</code> 构造函数的所有属性，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">blueBird.<span class="property">name</span>;</span><br><span class="line">blueBird.<span class="property">color</span>;</span><br><span class="line">blueBird.<span class="property">numLegs</span>;</span><br></pre></td></tr></table></figure>

<p>由构造函数创建的实例也和其他对象一样，它的属性可以被访问和修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">blueBird.<span class="property">name</span> = <span class="string">&#x27;Elvira&#x27;</span>;</span><br><span class="line">blueBird.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-扩展构造函数以接收参数"><a href="#7-扩展构造函数以接收参数" class="headerlink" title="7. 扩展构造函数以接收参数"></a>7. 扩展构造函数以接收参数</h3><p>所有通过<code>Bird</code> 构造函数创建出来的实例 <code>Birds</code> 都自动的取名为 Albert，颜色都是蓝色，还都有两条腿。 如果你想要新创建出来的小鸟们拥有不同的名字和颜色要怎么办呢？ 当然，手动的去修改每一个小鸟实例自己的属性也是可以实现的，只是会增加很多无谓的工作量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> swan = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">swan.<span class="property">name</span> = <span class="string">&quot;Carlos&quot;</span>;</span><br><span class="line">swan.<span class="property">color</span> = <span class="string">&quot;white&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>假如你写了一个程序来追踪一个鸟舍里面的几百只甚至几千只不同的小鸟。 你将会花费很多时间去创建所有的小鸟实例并给它们的属性一一修改为不同的值。 为了减轻创建不同 <code>Bird</code> 对象的工作量，你可以给你的 Bird 设置为可以接收参数的构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params">name, color</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将值通过参数的方式传递给 <code>Bird</code> 构造函数来定义每一个唯一的小鸟实例： <code>let cardinal = new Bird(&quot;Bruce&quot;, &quot;red&quot;);</code> 这给 <code>Bird</code> 的 <code>name</code> 和 <code>color</code> 属性分别赋值为 <code>Bruce</code> 和 <code>red</code> 色。 但 <code>numLegs</code> 属性仍然设置为 2。 <code>cardinal</code> 有以下这些属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cardinal.<span class="property">name</span></span><br><span class="line">cardinal.<span class="property">color</span></span><br><span class="line">cardinal.<span class="property">numLegs</span></span><br></pre></td></tr></table></figure>

<p>这样一来构造函数就变得很灵活了。 现在可以在创建每个<code>Bird</code>实例时直接定义属性，这是 JavaScript 构造函数非常实用的用法之一。 它们根据共同或相似的属性和行为将对象归纳为一组，并能够自动的创建各自实例。</p>
<h3 id="8-使用-instanceof-验证对象的构造函数"><a href="#8-使用-instanceof-验证对象的构造函数" class="headerlink" title="8. 使用 instanceof 验证对象的构造函数"></a>8. 使用 instanceof 验证对象的构造函数</h3><p>凡是通过构造函数创建出的新对象，这个对象都叫做这个构造函数的实例。 JavaScript 提供了一种很简便的方法来验证这个事实，那就是通过 <code>instanceof</code> 操作符。 <code>instanceof</code> 允许你将对象与构造函数之间进行比较，根据对象是否由这个构造函数创建的返回 <code>true</code> 或者 <code>false</code>。 以下是一个示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Bird</span> = <span class="keyword">function</span>(<span class="params">name, color</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> crow = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Alexis&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line"></span><br><span class="line">crow <span class="keyword">instanceof</span> <span class="title class_">Bird</span>;</span><br></pre></td></tr></table></figure>

<p><code>instanceof</code> 方法会返回 <code>true</code>。</p>
<p>如果一个对象不是使用构造函数创建的，那么 <code>instanceof</code> 将会验证这个对象不是构造函数的实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canary = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Mildred&quot;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;Yellow&quot;</span>,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">canary <span class="keyword">instanceof</span> <span class="title class_">Bird</span>;</span><br></pre></td></tr></table></figure>

<p><code>instanceof</code> 方法会返回 <code>false</code>。</p>
<h3 id="9-了解自有属性"><a href="#9-了解自有属性" class="headerlink" title="9. 了解自有属性"></a>9. 了解自有属性</h3><p>请看下面的实例，<code>Bird</code> 构造函数定义了两个属性：<code>name</code> 和 <code>numLegs</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Donald&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> canary = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Tweety&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>name</code> 和 <code>numLegs</code> 被叫作自身属性，因为它们是直接在实例对象上定义的。 这就意味着 <code>duck</code> 和 <code>canary</code> 这两个对象分别拥有这些属性的独立副本。 事实上，<code>Bird</code> 的所有实例都将拥有这些属性的独立副本。 下面的代码将 <code>duck</code> 的所有自身属性都存到一个叫作 <code>ownProps</code> 的数组里面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ownProps = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> property <span class="keyword">in</span> duck) &#123;</span><br><span class="line">  <span class="keyword">if</span>(duck.<span class="title function_">hasOwnProperty</span>(property)) &#123;</span><br><span class="line">    ownProps.<span class="title function_">push</span>(property);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ownProps);</span><br></pre></td></tr></table></figure>

<p>控制台将显示值 <code>[&quot;name&quot;, &quot;numLegs&quot;]</code>。</p>
<h3 id="10-使用原型属性来减少重复代码"><a href="#10-使用原型属性来减少重复代码" class="headerlink" title="10. 使用原型属性来减少重复代码"></a>10. 使用原型属性来减少重复代码</h3><p>所有 <code>Bird</code> 实例可能会有相同的 <code>numLegs</code> 值，所以在每一个 <code>Bird</code> 的实例中本质上都有一个重复的变量 <code>numLegs</code>。</p>
<p>当只有两个实例时可能并不是什么问题，但想象一下如果有数百万个实例。 这将会产生许许多多重复的变量。</p>
<p>更好的方法是使用 <code>Bird</code> 的 <code>prototype</code>。 <code>prototype</code> 是一个可以在所有 <code>Bird</code> 实例之间共享的对象。 以下是一个在 <code>Bird prototype</code> 中添加 <code>numLegs</code> 属性的示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>现在所有的 <code>Bird</code> 实例都拥有了共同的 <code>numLegs</code> 属性值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(duck.<span class="property">numLegs</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(canary.<span class="property">numLegs</span>);</span><br></pre></td></tr></table></figure>

<p>由于所有的实例都可以继承 <code>prototype</code> 上的属性，所以可以把 <code>prototype</code> 看作是创建对象的 “配方”。 请注意：<code>duck</code> 和 <code>canary</code> 的 <code>prototype</code> 属于 <code>Bird</code> 的构造函数，即 Bird 的原型 <code>Bird.prototype</code>。</p>
<h3 id="11-迭代所有属性"><a href="#11-迭代所有属性" class="headerlink" title="11. 迭代所有属性"></a>11. 迭代所有属性</h3><p>现在你已经了解了两种属性: 自身属性和 <code>prototype</code> 属性。 自身属性是直接在对象上定义的。 而原型属性在 <code>prototype</code> 上定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;  <span class="comment">//own property</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">numLegs</span> = <span class="number">2</span>; <span class="comment">// prototype property</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Donald&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这个示例会告诉你如何将 <code>duck</code> 的自身属性和 <code>prototype</code> 属性分别添加到 <code>ownProps</code> 数组和 <code>prototypeProps</code> 数组里面：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ownProps = [];</span><br><span class="line"><span class="keyword">let</span> prototypeProps = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> property <span class="keyword">in</span> duck) &#123;</span><br><span class="line">  <span class="keyword">if</span>(duck.<span class="title function_">hasOwnProperty</span>(property)) &#123;</span><br><span class="line">    ownProps.<span class="title function_">push</span>(property);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    prototypeProps.<span class="title function_">push</span>(property);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ownProps);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prototypeProps);</span><br></pre></td></tr></table></figure>

<p><code>console.log(ownProps)</code> 将在控制台中显示 <code>[&quot;name&quot;]</code> ，<code>console.log(prototypeProps)</code> 将显示 <code>[&quot;numLegs&quot;]</code>。</p>
<h3 id="12-了解构造函数属性"><a href="#12-了解构造函数属性" class="headerlink" title="12. 了解构造函数属性"></a>12. 了解构造函数属性</h3><p>创建的实例对象 <code>duck</code> 和 <code>beagle</code> 都有一个特殊的 <code>constructor</code> 属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line"><span class="keyword">let</span> beagle = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(duck.<span class="property">constructor</span> === <span class="title class_">Bird</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beagle.<span class="property">constructor</span> === <span class="title class_">Dog</span>);</span><br></pre></td></tr></table></figure>

<p>这两次 <code>console.log</code> 调用都将在控制台中显示 <code>true</code>。</p>
<p>需要注意到的是这个 <code>constructor</code> 属性是对创建这个实例的构造函数的一个引用。 <code>constructor</code> 属性的一个好处是可以通过检查这个属性来找出它是一个什么对象。 下面是一个例子，来看看是怎么使用的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">joinBirdFraternity</span>(<span class="params">candidate</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (candidate.<span class="property">constructor</span> === <span class="title class_">Bird</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 由于 <code>constructor</code> 属性可以被重写，所以最好使用<code>instanceof</code> 方法来检查对象的类型。</p>
<h3 id="13-将原型更改为新对象"><a href="#13-将原型更改为新对象" class="headerlink" title="13. 将原型更改为新对象"></a>13. 将原型更改为新对象</h3><p>可以单独给 <code>prototype</code> 添加属性了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>需要添加多个属性的，这未免会显得拖沓。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nom nom nom&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">describe</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一种更有效的方法就是给对象的 <code>prototype</code> 设置为一个已经包含了属性的新对象。 这样一来，所有属性都可以一次性添加进来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span>, </span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nom nom nom&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="14-更改原型时，记得设置构造函数属性"><a href="#14-更改原型时，记得设置构造函数属性" class="headerlink" title="14. 更改原型时，记得设置构造函数属性"></a>14. 更改原型时，记得设置构造函数属性</h3><p>手动设置一个新对象的原型有一个重要的副作用。 它清除了 <code>constructor</code> 属性！ 此属性可以用来检查是哪个构造函数创建了实例，但由于该属性已被覆盖，它现在给出了错误的结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">duck.<span class="property">constructor</span> === <span class="title class_">Bird</span>;</span><br><span class="line">duck.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line">duck <span class="keyword">instanceof</span> <span class="title class_">Bird</span>;</span><br></pre></td></tr></table></figure>

<p>按顺序，这些表达式会返回 <code>false</code>、<code>true</code> 和 <code>true</code>。</p>
<p>为了解决这个问题，凡是手动给新对象重新设置过原型对象的，都别忘记在原型对象中定义一个 <code>constructor</code> 属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Bird</span>,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nom nom nom&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="15-了解对象的原型来自哪里"><a href="#15-了解对象的原型来自哪里" class="headerlink" title="15. 了解对象的原型来自哪里"></a>15. 了解对象的原型来自哪里</h3><p>就像人们从父母那里继承基因一样，对象也可直接从创建它的构造函数那里继承其 <code>prototype</code>。 请看下面的例子：<code>Bird</code> 构造函数创建了一个 <code>duck</code> 对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Donald&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>duck</code> 从 <code>Bird</code> 构造函数那里继承了它的 <code>prototype</code>。 你可以使用 <code>isPrototypeOf</code> 方法来验证他们之间的关系：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(duck);</span><br></pre></td></tr></table></figure>

<p>这将返回 <code>true</code>。</p>
<h3 id="16-了解原型链"><a href="#16-了解原型链" class="headerlink" title="16. 了解原型链"></a>16. 了解原型链</h3><p>JavaScript 中所有的对象（除了少数例外）都有自己的 <code>prototype</code>。 而且，对象的 <code>prototype</code> 本身也是一个对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure>

<p>正因为 <code>prototype</code> 是一个对象，所以 <code>prototype</code> 对象也有它自己的 <code>prototype</code>！ 这样看来的话，<code>Bird.prototype</code> 的 <code>prototype</code> 就是 <code>Object.prototype</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(<span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<p>这有什么作用呢？ 你可能还记得我们在上一个挑战中学到的 <code>hasOwnProperty</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Donald&quot;</span>);</span><br><span class="line">duck.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>hasOwnProperty</code> 是定义在 <code>Object.prototype</code> 上的一个方法，尽管在 <code>Bird.prototype</code> 和 <code>duck</code>上并没有定义该方法，但是我们依然可以在这两个对象上访问到。 这就是 <code>prototype</code> 链的一个例子。 在这个<code>prototype</code> 链中，<code>Bird</code> 是 <code>duck</code> 的 <code>supertype</code>，而 <code>duck</code> 是 <code>subtype</code>。 <code>Object</code> 则是 <code>Bird</code> 和 <code>duck</code> 实例共同的 <code>supertype</code>。 <code>Object</code> 是 JavaScript 中所有对象的 <code>supertype</code>，也就是原型链的最顶层。 因此，所有对象都可以访问 <code>hasOwnProperty</code> 方法。</p>
<h3 id="17-使用继承避免重复"><a href="#17-使用继承避免重复" class="headerlink" title="17. 使用继承避免重复"></a>17. 使用继承避免重复</h3><p>有一条原则叫做：Don’t Repeat Yourself。常以缩写形式 DRY 出现，意思是“不要自己重复”。 编写重复代码会产生的问题是：任何改变都需要去多个地方修复所有重复的代码。 这通常意味着我们需要做更多的工作，会产生更高的出错率。</p>
<p>请观察下面的示例，<code>Bird</code> 和 <code>Dog</code> 共享 <code>describe</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Bird</span>,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Dog</span>,</span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们可以看到 <code>describe</code> 方法在两个地方重复定义了。 根据以上所说的 DRY 原则，我们可以通过创建一个 <code>Animal</code> <code>supertype</code>（或者父类）来重写这段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Animal</span>, </span><br><span class="line">  <span class="attr">describe</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>Animal</code> 构造函数中定义了 <code>describe</code> 方法，可将 <code>Bird</code> 和 <code>Dog</code> 这两个构造函数的方法删除掉：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Bird</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Dog</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="18-从超类继承行为"><a href="#18-从超类继承行为" class="headerlink" title="18. 从超类继承行为"></a>18. 从超类继承行为</h3><p>创建了一个<code>Animal</code> 超类（<code>supertype</code>），用来定义所有动物共有的行为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nom nom nom&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将在 <code>Bird</code> 和 <code>Dog</code> 中重用 <code>Animal</code> 中的方法，而无需重新定义它们。 这里我们会用到构造函数的继承特性。 创建一个超类 <code>supertype</code>（或者叫父类）的实例。 你已经学会了一种创建 <code>Animal</code> 实例的方法，即使用 <code>new</code> 操作符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br></pre></td></tr></table></figure>

<p>此语法用于继承时会存在一些缺点</p>
<p>相反，学习另外一种没有这些缺点的方法来替代 new 操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<p><code>Object.create(obj)</code> 创建了一个新对象，并指定了 <code>obj</code> 作为新对象的 <code>prototype</code>。 回忆一下，我们之前说过 <code>prototype</code> 就像是创建对象的“配方”。 如果我们把 <code>animal</code> 的 <code>prototype</code> 设置为与 <code>Animal</code> 构造函数的 <code>prototype</code> 一样，那么就相当于让 <code>animal</code> 这个实例具有与 <code>Animal</code> 的其他实例相同的“配方”了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">animal.<span class="title function_">eat</span>();</span><br><span class="line">animal <span class="keyword">instanceof</span> <span class="title class_">Animal</span>;</span><br></pre></td></tr></table></figure>

<p><code>instanceof</code> 方法会返回 <code>true</code>.</p>
<h3 id="19-将子辈的原型设置为父辈的实例"><a href="#19-将子辈的原型设置为父辈的实例" class="headerlink" title="19. 将子辈的原型设置为父辈的实例"></a>19. 将子辈的原型设置为父辈的实例</h3><p>在上一个挑战中，我们学习了从超类（或者叫父类） <code>Animal</code> 继承其行为的第一个步骤：创建一个 <code>Animal</code> 的新实例。</p>
<p>这一节挑战我们将学习第二个步骤：给子类型（或者子类）设置 <code>prototype</code>。 这样一来，<code>Bird</code> 就是 <code>Animal</code> 的一个实例了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<p>请记住，<code>prototype</code> 类似于创建对象的“配方”。 从某种意义上来说，<code>Bird</code> 对象的配方包含了 <code>Animal</code> 的所有关键“成分”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Donald&quot;</span>);</span><br><span class="line">duck.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure>

<p><code>duck</code> 继承了<code>Animal</code> 的所有属性，其中包括了 <code>eat</code> 方法。</p>
<h3 id="20-重置一个继承的构造函数属性"><a href="#20-重置一个继承的构造函数属性" class="headerlink" title="20. 重置一个继承的构造函数属性"></a>20. 重置一个继承的构造函数属性</h3><p>当一个对象从另一个对象那里继承了其 <code>prototype</code> 时，那它也继承了父类的 constructor 属性。</p>
<p>请看下面的举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">duck.<span class="property">constructor</span></span><br></pre></td></tr></table></figure>

<p>但是 <code>duck</code> 和其他所有 <code>Bird</code> 的实例都应该表明它们是由 <code>Bird</code> 创建的，而不是由 <code>Animal</code> 创建的。 为此，你可以手动将 <code>Bird</code> 的构造函数属性设置为 <code>Bird</code> 对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Bird</span>;</span><br><span class="line">duck.<span class="property">constructor</span></span><br></pre></td></tr></table></figure>

<h3 id="21-继承后添加方法"><a href="#21-继承后添加方法" class="headerlink" title="21. 继承后添加方法"></a>21. 继承后添加方法</h3><p>从超类构造函数继承其 <code>prototype</code> 对象的构造函数，除了继承的方法外，还可以拥有自己的方法。</p>
<p>请看举例：<code>Bird</code> 是一个构造函数，它继承了 <code>Animal</code> 的 <code>prototype</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nom nom nom&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Bird</span>;</span><br></pre></td></tr></table></figure>

<p>除了从 <code>Animal</code> 构造函数继承的行为之外，还需要给 <code>Bird</code> 对象添加它独有的行为。 这里，我们给 <code>Bird</code> 对象添加一个 <code>fly()</code> 函数。 函数会以一种与其他构造函数相同的方式添加到 <code>Bird&#39;s</code> 的 <code>prototype</code> 中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fly</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;I&#x27;m flying!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>现在 <code>Bird</code> 的实例中就有了 <code>eat()</code> 和 <code>fly()</code> 这两个方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">duck.<span class="title function_">eat</span>();</span><br><span class="line">duck.<span class="title function_">fly</span>();</span><br></pre></td></tr></table></figure>

<p><code>duck.eat()</code> 将在控制台中显示字符串 <code>nom nom nom</code>， <code>duck.fly()</code> 将显示字符串 <code>I&#39;m flying!</code>。</p>
<h3 id="22-重写继承的方法"><a href="#22-重写继承的方法" class="headerlink" title="22. 重写继承的方法"></a>22. 重写继承的方法</h3><p>在上一个挑战中，我们学习了一个对象可以通过引用另一个对象的 <code>prototype</code> 来继承其属性和行为（或方法）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ChildObject</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">ParentObject</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure>

<p>然后，<code>ChildObject</code> 将自己的方法链接到它的 <code>prototype</code>中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ChildObject</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">methodName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;...&#125;;</span><br></pre></td></tr></table></figure>

<p>我们还可以重写继承的方法。 以同样的方式 - 通过使用一个与需要重写的方法相同的方法名，向<code>ChildObject.prototype</code> 中添加方法。 请看下面的举例：<code>Bird</code> 重写了从 <code>Animal</code> 继承来的 <code>eat()</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;nom nom nom&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;peck peck peck&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果你有一个实例：<code>let duck = new Bird();</code>，然后你调用了 <code>duck.eat()</code>，以下就是 JavaScript 在 <code>duck</code> 的 <code>prototype</code> 链上寻找方法的过程：</p>
<ol>
<li><code>duck</code> =&gt; <code>eat()</code> 是定义在这里吗？ 不是。</li>
<li><code>Bird</code> =&gt; <code>eat()</code> 是定义在这里吗？ =&gt; 是的。 执行它并停止往上搜索。</li>
<li><code>Animal</code> =&gt; 这里也定义了 <code>eat()</code> 方法，但是 JavaScript 在到达这层原型链之前已停止了搜索。</li>
<li>Object =&gt; JavaScript 在到达这层原型链之前也已经停止了搜索。</li>
</ol>
<h3 id="23-使用-Mixin-在不相关对象之间添加共同行为"><a href="#23-使用-Mixin-在不相关对象之间添加共同行为" class="headerlink" title="23. 使用 Mixin 在不相关对象之间添加共同行为"></a>23. 使用 Mixin 在不相关对象之间添加共同行为</h3><p>正如你所见，行为是可以通过继承来共享的。 然而，在有些情况下，继承不是最好的解决方案。 继承不适用于不相关的对象，比如 <code>Bird</code> 和 <code>Airplane</code>。 虽然它们都可以飞行，但是 <code>Bird</code> 并不是一种 <code>Airplane</code>，反之亦然。</p>
<p>对于不相关的对象，更好的方法是使用 mixins。 mixin 允许其他对象使用函数集合。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flyMixin = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">fly</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Flying, wooosh!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>flyMixin</code> 能接受任何对象，并为其提供 <code>fly</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bird = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Donald&quot;</span>,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> plane = &#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;777&quot;</span>,</span><br><span class="line">  <span class="attr">numPassengers</span>: <span class="number">524</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">flyMixin</span>(bird);</span><br><span class="line"><span class="title function_">flyMixin</span>(plane);</span><br></pre></td></tr></table></figure>

<p>这里的 <code>flyMixin</code> 接收了<code>bird</code> 和 <code>plane</code> 对象，然后将 <code>fly</code> 方法分配给了每一个对象。 现在 <code>bird</code> 和 <code>plane</code> 都可以飞行了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bird.<span class="title function_">fly</span>();</span><br><span class="line">plane.<span class="title function_">fly</span>();</span><br></pre></td></tr></table></figure>

<p>控制台将显示字符串 <code>Flying, wooosh!</code> 两次，每次 <code>.fly()</code> 调用都会显示。</p>
<p>注意观察 mixin 是如何允许相同的 <code>fly</code> 方法被不相关的对象 <code>bird</code> 和 <code>plane</code> 重用的。</p>
<h3 id="24-使用闭包保护对象内的属性不被外部修改"><a href="#24-使用闭包保护对象内的属性不被外部修改" class="headerlink" title="24. 使用闭包保护对象内的属性不被外部修改"></a>24. 使用闭包保护对象内的属性不被外部修改</h3><p><code>bird</code> 有一个公共属性 <code>name</code>。 公共属性的定义就是：它可以在 <code>bird</code> 的定义范围之外被访问和更改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bird.<span class="property">name</span> = <span class="string">&quot;Duffy&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>因此，代码的任何地方都可以轻松地将 <code>bird</code> 的 name 属性更改为任意值。 想想密码和银行账户之类的东西，如果代码库的任何部分都可以轻易改变它们， 那将会引起很多问题。</p>
<p>使属性私有化最简单的方法就是在构造函数中创建变量。 可以将该变量范围限定在构造函数中，而不是全局可用。 这样，属性只能由构造函数中的方法访问和更改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> hatchedEgg = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getHatchedEggCount</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> hatchedEgg;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ducky = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">ducky.<span class="title function_">getHatchedEggCount</span>();</span><br></pre></td></tr></table></figure>

<p>这里的 <code>getHatchedEggCount</code> 是一种特权方法，因为它可以访问私有属性 <code>hatchedEgg</code>。 这是因为 <code>hatchedEgg</code> 是在与 <code>getHatchedEggCount</code> 相同的上下文中声明的。 在 JavaScript 中，函数总是可以访问创建它的上下文。 这就叫做 <code>closure</code>。</p>
<h3 id="25-了解立即调用函数表达（IIFE）"><a href="#25-了解立即调用函数表达（IIFE）" class="headerlink" title="25. 了解立即调用函数表达（IIFE）"></a>25. 了解立即调用函数表达（IIFE）</h3><p>JavaScript 中的一个常见模式就是，函数在声明后立刻执行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Chirp, chirp!&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>这是一个匿名函数表达式，立即执行并输出 <code>Chirp, chirp!</code>。</p>
<p>请注意，函数没有名称，也不存储在变量中。 函数表达式末尾的两个括号（）会让它被立即执行或调用。 这种模式被叫做立即调用函数表达式（immediately invoked function expression) 或者IIFE。</p>
<h3 id="26-使用-IIFE-创建一个模块"><a href="#26-使用-IIFE-创建一个模块" class="headerlink" title="26. 使用 IIFE 创建一个模块"></a>26. 使用 IIFE 创建一个模块</h3><p>一个立即调用函数表达式（IIFE）通常用于将相关功能分组到单个对象或者是 module 中。 例如，先前的挑战中定义了两个 mixins：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">glideMixin</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">glide</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Gliding on the water&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flyMixin</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">fly</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Flying, wooosh!&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以将这些 mixins 分成以下模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> motionModule = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">glideMixin</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      obj.<span class="property">glide</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Gliding on the water&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">flyMixin</span>: <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      obj.<span class="property">fly</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Flying, wooosh!&quot;</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>注意：一个立即调用函数表达式（IIFE）返回了一个 <code>motionModule</code> 对象。 返回的这个对象包含了作为对象属性的所有 mixin 行为。 module 模式的优点是，所有的运动相关的行为都可以打包成一个对象，然后由代码的其他部分使用。 下面是一个使用它的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">motionModule.<span class="title function_">glideMixin</span>(duck);</span><br><span class="line">duck.<span class="title function_">glide</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>JavaScript Algorithms and Data Structures</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(一)</title>
    <url>/responsive-web-dedign-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-HTML-by-Building-a-Cat-Photo-App"><a href="#Learn-HTML-by-Building-a-Cat-Photo-App" class="headerlink" title="Learn HTML by Building a Cat Photo App"></a>Learn HTML by Building a Cat Photo App</h4><span id="more"></span>

<ol>
<li><p>The <code>h1</code> through <code>h6</code> heading elements are used to signify the importance of content below them. The lower the number, the higher the importance, so <code>h2</code> elements have less importance than <code>h1</code> elements. Only use one <code>h1</code> element per page and place lower importance headings below higher importance headings.</p>
</li>
<li><p>The <code>p</code> element is used to create a paragraph of text on websites. Create a <code>p</code> element below your <code>h2</code> element and give it the following text:<code>See more cat photos in our gallery</code></p>
</li>
<li><p>Commenting allows you to leave messages without affecting the browser display. It also allows you to make code inactive. A comment in HTML starts with <code>&lt;!--</code>, contains any number of lines of text, and ends with <code>--&gt;</code>. For example, the comment <code>&lt;!-- TODO: Remove h1 --&gt;</code> contains the text <code>TODO: Remove h1</code>.</p>
</li>
<li><p>HTML5 has some elements that identify different content areas. These elements make your HTML easier to read and help with Search Engine Optimization (SEO) and accessibility.</p>
<p>Identify the main section of this page by adding a <code>&lt;main&gt;</code> opening tag before the <code>h1</code> element, and a <code>&lt;/main&gt;</code> closing tag after the <code>p</code> element.</p>
</li>
<li><p>In the previous step, you put the <code>h1</code>, <code>h2</code>, comment, and <code>p</code> elements inside the <code>main</code> element. This is called <em>nesting</em>. Nested elements should be placed two spaces further to the right of the element they are nested in. This spacing is called indentation and it is used to make HTML easier to read.</p>
</li>
<li><p>You can add images to your website by using the <code>img</code> element. <code>img</code> elements have an opening tag without a closing tag. A tag for an element without a closing tag is known as a self-closing tag.</p>
</li>
<li><p>HTML attributes are special words used inside the opening tag of an element to control the element’s behavior. The <code>src</code> attribute in an <code>img</code> element specifies the image’s URL (where the image is located).</p>
<p>Here is an example of an <code>img</code> element with a <code>src</code> attribute pointing to the freeCodeCamp logo:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/platform/universal/fcc_secondary.svg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>All <code>img</code> elements should have an <code>alt</code> attribute. The <code>alt</code> attribute’s text is used for screen readers to improve accessibility and is displayed if the image fails to load. For example, <code>&lt;img src=&quot;cat.jpg&quot; alt=&quot;A cat&quot;&gt;</code> has an <code>alt</code> attribute with the text <code>A cat</code>.</p>
</li>
<li><p>You can link to another page with the anchor (<code>a</code>) element. For example, <code>&lt;a href=&#39;https://freecodecamp.org&#39;&gt;&lt;/a&gt;</code> would link to <code>freecodecamp.org</code>.</p>
</li>
<li><p>A link’s text must be placed between the opening and closing tags of an anchor (<code>a</code>) element. For example, <code>&lt;a href=&quot;https://www.freecodecamp.org&quot;&gt;click here to go to freeCodeCamp.org&lt;/a&gt;</code> is a link with the text <code>click here to go to freeCodeCamp.org</code>.</p>
</li>
<li><p>In the previous step you turned the words <code>link to cat pictures</code> into a link by placing them between opening and closing anchor (<code>a</code>) tags. You can do the same to words inside of an element, such as a <code>p</code> element.</p>
</li>
<li><p>In the previous step you turned the words <code>link to cat pictures</code> into a link by placing them between opening and closing anchor (<code>a</code>) tags. You can do the same to words inside of an element, such as a <code>p</code> element.</p>
</li>
<li><p>Add a <code>target</code> attribute with the value <code>_blank</code> to the anchor (<code>a</code>) element’s opening tag, so that the link opens in a new tab.</p>
</li>
<li><p>In previous steps you used an anchor element to turn text into a link. Other types of content can also be turned into a link by wrapping it in anchor tags.</p>
<p>Turn the image into a link by surrounding it with necessary element tags. Use <code>https://freecatphotoapp.com</code> as the anchor’s <code>href</code> attribute value.</p>
</li>
<li><p>Before adding any new content, you should make use of a <code>section</code> element to separate the cat photos content from the future content.</p>
<p>Take your <code>h2</code>, comment, <code>p</code>, and anchor (<code>a</code>) elements and nest them in a <code>section</code> element.</p>
</li>
<li><p>It is time to add a new section. Add a second <code>section</code> element below the existing <code>section</code> element.</p>
</li>
<li><p>Within the second <code>section</code> element, add a new <code>h2</code> element with the text <code>Cat Lists</code>.</p>
</li>
<li><p>When you add a lower rank heading element to the page, it’s implied that you’re starting a new subsection.</p>
<p>After the last <code>h2</code> element of the second <code>section</code> element, add an <code>h3</code> element with this text:<code>Things cats love:</code></p>
</li>
<li><p>After the <code>h3</code> element with the <code>Things cats love:</code> text, add an unordered list (<code>ul</code>) element. Note that nothing will be displayed at this point.</p>
</li>
<li><p>Use list item (<code>li</code>) elements to create items in a list. Here is an example of list items in an unordered list:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>cheese<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>After the unordered list, add a new image with an <code>src</code> attribute value set to:</p>
<p><code>https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg</code></p>
<p>And its <code>alt</code> attribute value to:<code>A slice of lasagna on a plate.</code></p>
</li>
<li><p>The <code>figure</code> element represents self-contained content and will allow you to associate an image with a caption.Nest the image you just added within a <code>figure</code> element.</p>
</li>
<li><p>A figure caption (<code>figcaption</code>) element is used to add a caption to describe the image contained within the <code>figure</code> element. For example, <code>&lt;figcaption&gt;A cute cat&lt;/figcaption&gt;</code> adds the caption <code>A cute cat</code>.</p>
<p>After the image nested in the <code>figure</code> element, add a <code>figcaption</code> element with text set to:<code>Cats love lasagna.</code></p>
</li>
<li><p>Emphasize the word <code>love</code> in the <code>figcaption</code> element by wrapping it in an emphasis <code>em</code> element.</p>
</li>
<li><p>After the <code>figure</code> element, add another <code>h3</code> element with the text:<code>Top 3 things cats hate:</code></p>
</li>
<li><p>The code for an ordered list (<code>ol</code>) is similar to an unordered list, but list items in an ordered list are numbered when displayed.</p>
<p>After the second <code>section</code> element’s last <code>h3</code> element, add an ordered list with these three list items:<code>flea treatment</code> <code>thunder</code> <code>other cats</code></p>
</li>
<li><p>After the ordered list, add another <code>figure</code> element.</p>
</li>
<li><p>Inside the <code>figure</code> element you just added, nest an <code>img</code> element with a <code>src</code> attribute set to <code>https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg</code>.</p>
</li>
<li><p>To improve accessibility of the image you added, add an <code>alt</code> attribute with the text:<code>Five cats looking around a field.</code></p>
</li>
<li><p>After the last <code>img</code> element, add a <code>figcaption</code> element with the text <code>Cats hate other cats.</code></p>
</li>
<li><p>The <code>strong</code> element is used to indicate that some text is of strong importance or urgent.In the <code>figcaption</code> you just added, indicate that <code>hate</code> is of strong importance by wrapping it in a <code>strong</code> element.</p>
</li>
<li><p>It is time to add a new section. Add a third <code>section</code> element below the second <code>section</code> element.</p>
</li>
<li><p>Inside the third <code>section</code> element, add an <code>h2</code> element with the text:<code>Cat Form</code></p>
</li>
<li><p>Now you will add a web form to collect information from users.</p>
<p>After the <code>Cat Form</code> heading, add a <code>form</code> element.</p>
</li>
<li><p>The <code>action</code> attribute indicates where form data should be sent. For example, <code>&lt;form action=&quot;/submit-url&quot;&gt;&lt;/form&gt;</code> tells the browser that the form data should be sent to the path <code>/submit-url</code>.</p>
<p>Add an <code>action</code> attribute with the value <code>https://freecatphotoapp.com/submit-cat-photo</code> to the <code>form</code> element.</p>
</li>
<li><p>The <code>input</code> element allows you several ways to collect data from a web form. Like <code>img</code> elements, <code>input</code> elements are self-closing and do not need closing tags.Nest an <code>input</code> element in the <code>form</code> element.</p>
</li>
<li><p>There are many kinds of inputs you can create using the <code>type</code> attribute. You can easily create a password field, reset button, or a control to let users select a file from their computer.</p>
<p>Create a text field to get text input from a user by adding the <code>type</code> attribute with the value <code>text</code> to the <code>input</code> element.</p>
</li>
<li><p>In order for a form’s data to be accessed by the location specified in the <code>action</code> attribute, you must give the text field a <code>name</code> attribute and assign it a value to represent the data being submitted. For example, you could use the following syntax for an email address text field: <code>&lt;input type=&quot;text&quot; name=&quot;email&quot;&gt;</code>.</p>
<p>Add the <code>name</code> attribute with the value <code>catphotourl</code> to your text field.</p>
</li>
<li><p>Placeholder text is used to give people a hint about what kind of information to enter into an input. For example, <code>&lt;input type=&quot;text&quot; placeholder=&quot;Email address&quot;&gt;</code>.Add the placeholder text <code>cat photo URL</code> to your <code>input</code> element.</p>
</li>
<li><p>To prevent a user from submitting your form when required information is missing, you need to add the <code>required</code> attribute to an <code>input</code> element. There’s no need to set a value to the <code>required</code> attribute. Instead, just add the word <code>required</code> to the <code>input</code> element, making sure there is space between it and other attributes.</p>
</li>
<li><p>Use the <code>button</code> element to create a clickable button. For example, <code>&lt;button&gt;Click Here&lt;/button&gt;</code> creates a button with the text <code>Click Here</code>.</p>
<p>Add a <code>button</code> element with the text <code>Submit</code> below the <code>input</code> element. The default behavior of clicking a form button without any attributes submits the form to the location specified in the form’s <code>action</code> attribute.</p>
</li>
<li><p>Even though you added your button below the text input, they appear next to each other on the page. That’s because both <code>input</code> and <code>button</code> elements are inline elements, which don’t appear on new lines.</p>
<p>The button you added will submit the form by default. However, relying on default behavior may cause confusion. Add the <code>type</code> attribute with the value <code>submit</code> to the <code>button</code> to make it clear that it is a submit button.</p>
</li>
<li><p>You can use radio buttons for questions where you want only one answer out of multiple options.</p>
<p>Here is an example of a radio button with the option of <code>cat</code>: <code>&lt;input type=&quot;radio&quot;&gt; cat</code>. Remember that <code>input</code> elements are self-closing.</p>
<p>Before the text input, add a radio button with the option set as:<code>Indoor</code></p>
</li>
<li><p><code>label</code> elements are used to help associate the text for an <code>input</code> element with the <code>input</code> element itself (especially for assistive technologies like screen readers). For example, <code>&lt;label&gt;&lt;input type=&quot;radio&quot;&gt; cat&lt;/label&gt;</code> makes it so clicking the word <code>cat</code> also selects the corresponding radio button.</p>
<p>Nest your <code>radio</code> button inside a <code>label</code> element.</p>
</li>
<li><p>The <code>id</code> attribute is used to identify specific HTML elements. Each <code>id</code> attribute’s value must be unique from all other <code>id</code> values for the entire page.</p>
<p>Add an <code>id</code> attribute with the value <code>indoor</code> to the radio button. When elements have multiple attributes, the order of the attributes doesn’t matter.</p>
</li>
<li><p>Create another radio button below the first one. Nest it inside a <code>label</code> element with <code>Outdoor</code> as the <code>label</code> text. Give the radio button an <code>id</code> attribute with <code>outdoor</code> as the value.</p>
</li>
<li><p>Notice that both radio buttons can be selected at the same time. To make it so selecting one radio button automatically deselects the other, both buttons must have a <code>name</code> attribute with the same value.</p>
<p>Add the <code>name</code> attribute with the value <code>indoor-outdoor</code> to both radio buttons.</p>
</li>
<li><p>If you select the <code>Indoor</code> radio button and submit the form, the form data for the button is based on its <code>name</code> and <code>value</code> attributes. Since your radio buttons do not have a <code>value</code> attribute, the form data will include <code>indoor-outdoor=on</code>, which is not useful when you have multiple buttons.</p>
<p>Add a <code>value</code> attribute to both radio buttons. For convenience, set the button’s <code>value</code> attribute to the same value as its <code>id</code> attribute.</p>
</li>
<li><p>The <code>fieldset</code> element is used to group related inputs and labels together in a web form. <code>fieldset</code> elements are block-level elements, meaning that they appear on a new line.</p>
<p>Nest the <code>Indoor</code> and <code>Outdoor</code> radio buttons within a <code>fieldset</code> element, and don’t forget to indent the radio buttons.</p>
</li>
<li><p>The <code>legend</code> element acts as a caption for the content in the <code>fieldset</code> element. It gives users context about what they should enter into that part of the form.</p>
<p>Add a <code>legend</code> element with the text <code>Is your cat an indoor or outdoor cat?</code> above both of the radio buttons.</p>
</li>
<li><p>Next, you are going to add some new form <code>input</code> elements, so add another <code>fieldset</code> element directly below the current <code>fieldset</code> element.</p>
</li>
<li><p>Add a <code>legend</code> element with the text <code>What&#39;s your cat&#39;s personality?</code> inside the second <code>fieldset</code> element.</p>
</li>
<li><p>Forms commonly use checkboxes for questions that may have more than one answer. For example, here’s a checkbox with the option of <code>tacos</code>: <code>&lt;input type=&quot;checkbox&quot;&gt; tacos</code>.</p>
<p>Under the <code>legend</code> element you just added, add an <code>input</code> with its <code>type</code> attribute set to <code>checkbox</code> and give it the option of:<code>Loving</code></p>
</li>
<li><p>Add an <code>id</code> attribute with the value <code>loving</code> to the checkbox input.</p>
</li>
<li><p>There’s another way to associate an <code>input</code> element’s text with the element itself. You can nest the text within a <code>label</code> element and add a <code>for</code> attribute with the same value as the <code>input</code> element’s <code>id</code> attribute.</p>
<p>Associate the text <code>Loving</code> with the checkbox by nesting only the text <code>Loving</code> in a <code>label</code> element and giving it an appropriate <code>for</code> attribute.</p>
</li>
<li><p>Add the <code>name</code> attribute with the value <code>personality</code> to the checkbox <code>input</code> element.</p>
<p>While you won’t notice this in the browser, doing this makes it easier for a server to process your web form, especially when there are multiple checkboxes.</p>
</li>
<li><p>Add another checkbox after the one you just added. The <code>id</code> attribute value should be <code>lazy</code> and the <code>name</code> attribute value should be the same as the last checkbox.</p>
<p>Also add a <code>label</code> element to the right of the new checkbox with the text <code>Lazy</code>. Make sure to associate the <code>label</code> element with the new checkbox using the <code>for</code> attribute.</p>
</li>
<li><p>Add a final checkbox after the previous one with an <code>id</code> attribute value of <code>energetic</code>. The <code>name</code> attribute should be the same as the previous checkbox.</p>
<p>Also add a <code>label</code> element to the right of the new checkbox with text <code>Energetic</code>. Make sure to associate the <code>label</code> element with the new checkbox.</p>
</li>
<li><p>Like radio buttons, form data for selected checkboxes are <code>name</code> / <code>value</code> attribute pairs. While the <code>value</code> attribute is optional, it’s best practice to include it with any checkboxes or radio buttons on the page.</p>
<p>Add a <code>value</code> attribute to each checkbox. For convenience, set each checkbox’s <code>value</code> attribute to the same value as its <code>id</code> attribute.</p>
</li>
<li><p>In order to make a checkbox checked or radio button selected by default, you need to add the <code>checked</code> attribute to it. There’s no need to set a value to the <code>checked</code> attribute. Instead, just add the word <code>checked</code> to the <code>input</code> element, making sure there is space between it and other attributes.</p>
<p>Make the first radio button and the first checkbox selected by default.</p>
</li>
<li><p>Now you will add a footer section to the page.</p>
<p>After the <code>main</code> element, add a <code>footer</code> element.</p>
</li>
<li><p>Nest a <code>p</code> element with the text <code>No Copyright - freeCodeCamp.org</code> within the <code>footer</code> element.</p>
</li>
<li><p>Make the text <code>freeCodeCamp.org</code> into a link by enclosing it in an anchor (<code>a</code>) element. The <code>href</code> attribute should be set to <code>https://www.freecodecamp.org</code>.</p>
</li>
<li><p>Notice that everything you’ve added to the page so far is inside the <code>body</code> element. All page content elements that should be rendered to the page go inside the <code>body</code> element. However, other important information goes inside the <code>head</code> element.</p>
<p>Add a <code>head</code> element above the <code>body</code> element.</p>
</li>
<li><p>The <code>title</code> element determines what browsers show in the title bar or tab for the page.</p>
<p>Add a <code>title</code> element within the <code>head</code> element using the text below:</p>
<p><code>CatPhotoApp</code></p>
</li>
<li><p>Notice that the entire contents of the page are nested within an <code>html</code> element. All other elements must be descendants of this <code>html</code> element.</p>
<p>Add the <code>lang</code> attribute with the value <code>en</code> to the opening <code>html</code> tag to specify that the language of the page is English.</p>
</li>
<li><p>All pages should begin with <code>&lt;!DOCTYPE html&gt;</code>. This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications.</p>
<p>Add this declaration as the first line of the code.</p>
</li>
<li><p>You can set browser behavior by adding self-closing <code>meta</code> elements in the <code>head</code>. Here’s an example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">attribute</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Tell the browser to parse the markup into multiple languages by creating a <code>meta</code> element as a child of the <code>head</code> element. Set its <code>charset</code> attribute to <code>UTF-8</code>.</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;CatPhotoApp&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;main&gt;</span><br><span class="line">            &lt;h1&gt; CatPhotoApp &lt;/h1&gt;</span><br><span class="line">            &lt;section&gt;</span><br><span class="line">                &lt;h2&gt; Cat Photos &lt;/h2&gt;</span><br><span class="line">                &lt;!-- TODO: Add link to cat photos --&gt;</span><br><span class="line">                &lt;p&gt;See more &lt;a href=&quot;https://freecatphotoapp.com&quot; target=&quot;_blank&quot;&gt;cat photos&lt;/a&gt; in our gallery.&lt;/p&gt;</span><br><span class="line">                &lt;!-- 删除a链接： &lt;a href=&quot;https://freecatphotoapp.com&quot;&gt;link to cat pictures&lt;/a&gt;--&gt;</span><br><span class="line">                &lt;a href=&quot;https://freecatphotoapp.com&quot;&gt;</span><br><span class="line">                    &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;</span><br><span class="line">                &lt;/a&gt;</span><br><span class="line">            &lt;/section&gt;</span><br><span class="line">            &lt;section&gt;</span><br><span class="line">                &lt;h2&gt;Cat Lists&lt;/h2&gt;</span><br><span class="line">                &lt;h3&gt;Things cats love:&lt;/h3&gt;   </span><br><span class="line">                &lt;ul&gt;         </span><br><span class="line">                    &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">                &lt;figure&gt;</span><br><span class="line">                    &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg&quot; alt=&quot;A slice of lasagna on a plate.&quot;&gt;     </span><br><span class="line">                    &lt;figcaption&gt;Cats &lt;em&gt;love&lt;/em&gt; lasagna.&lt;/figcaption&gt;</span><br><span class="line">                &lt;/figure&gt;</span><br><span class="line">                &lt;h3&gt;Top 3 things cats hate:&lt;/h3&gt;</span><br><span class="line">                &lt;ol&gt;</span><br><span class="line">                    &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">                &lt;/ol&gt;</span><br><span class="line">                &lt;figure&gt;</span><br><span class="line">                    &lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg&quot; alt=&quot;Five cats looking around a field.&quot;&gt;</span><br><span class="line">                    &lt;figcaption&gt;Cats  &lt;strong&gt; hate &lt;/strong&gt; other cats.&lt;/figcaption&gt; </span><br><span class="line">                &lt;/figure&gt;</span><br><span class="line">            &lt;/section&gt;</span><br><span class="line">            &lt;section&gt;</span><br><span class="line">                &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">                      &lt;fieldset&gt; </span><br><span class="line">                          &lt;legend&gt;Is your cat an indoor or outdoor cat?&lt;/legend&gt;   </span><br><span class="line">                          &lt;label&gt;&lt;input id=&quot;indoor&quot; type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; value=&quot;indoor&quot; checked&gt; Indoor&lt;/label&gt;</span><br><span class="line">                          &lt;label&gt;&lt;input id=&quot;outdoor&quot; type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; value=&quot;outdoor&quot;&gt; Outdoor&lt;/label&gt;</span><br><span class="line">                      &lt;/fieldset&gt;</span><br><span class="line">                      &lt;fieldset&gt;</span><br><span class="line">                          &lt;legend&gt;What&#x27;s your cat&#x27;s personality?&lt;/legend&gt;</span><br><span class="line">                          &lt;input id=&quot;loving&quot; type=&quot;checkbox&quot; name=&quot;personality&quot; value=&quot;loving&quot; checked&gt; &lt;label for=&quot;loving&quot;&gt;Loving&lt;/label&gt;</span><br><span class="line">                          &lt;input id=&quot;lazy&quot; type=&quot;checkbox&quot; name=&quot;personality&quot; value=&quot;lazy&quot;&gt; &lt;label for=&quot;lazy&quot;&gt;Lazy&lt;/label&gt;</span><br><span class="line">                          &lt;input id=&quot;energetic&quot; type=&quot;checkbox&quot; name=&quot;personality&quot; value=&quot;energetic&quot;&gt; &lt;label for=&quot;energetic&quot;&gt; Energetic&lt;/label&gt;</span><br><span class="line">                      &lt;/fieldset&gt;</span><br><span class="line">                      &lt;input type=&quot;text&quot; name=&quot;catphotourl&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">                      &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/section&gt;</span><br><span class="line">        &lt;/main&gt;</span><br><span class="line">        &lt;footer&gt;</span><br><span class="line">             &lt;p&gt;No Copyright - &lt;a href=&quot;https://www.freecodecamp.org&quot;&gt;freeCodeCamp.org&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/footer&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">&lt;/html&gt;                     </span><br></pre></td></tr></table></figure>

<!DOCTYPE html>

<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>CatPhotoApp</title>
    </head>
    <body>
        <main>
            <h1> CatPhotoApp </h1>
            <section>
                <h2> Cat Photos </h2>
                <!-- TODO: Add link to cat photos -->
                <p>See more <a href="https://freecatphotoapp.com" target="_blank">cat photos</a> in our gallery.</p>
                <!-- 删除a链接： <a href="https://freecatphotoapp.com">link to cat pictures</a>-->
                <a href="https://freecatphotoapp.com">
                    <img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg" alt="A cute orange cat lying on its back.">
                </a>
            </section>
            <section>
                <h2>Cat Lists</h2>
                <h3>Things cats love:</h3>   
                <ul>         
                    <li>cat nip</li>
                    <li>laser pointers</li>
                    <li>lasagna</li>
                </ul>
                <figure>
                    <img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/lasagna.jpg" alt="A slice of lasagna on a plate.">     
                    <figcaption>Cats <em>love</em> lasagna.</figcaption>
                </figure>
                <h3>Top 3 things cats hate:</h3>
                <ol>
                    <li>flea treatment</li>
                    <li>thunder</li>
                    <li>other cats</li>
                </ol>
                <figure>
                    <img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" alt="Five cats looking around a field.">
                    <figcaption>Cats  <strong> hate </strong> other cats.</figcaption> 
                </figure>
            </section>
            <section>
                <form action="https://freecatphotoapp.com/submit-cat-photo">
                      <fieldset> 
                          <legend>Is your cat an indoor or outdoor cat?</legend>   
                          <label><input id="indoor" type="radio" name="indoor-outdoor" value="indoor" checked> Indoor</label>
                          <label><input id="outdoor" type="radio" name="indoor-outdoor" value="outdoor"> Outdoor</label>
                      </fieldset>
                      <fieldset>
                          <legend>What's your cat's personality?</legend>
                          <input id="loving" type="checkbox" name="personality" value="loving" checked> <label for="loving">Loving</label>
                          <input id="lazy" type="checkbox" name="personality" value="lazy"> <label for="lazy">Lazy</label>
                          <input id="energetic" type="checkbox" name="personality" value="energetic"> <label for="energetic"> Energetic</label>
                      </fieldset>
                      <input type="text" name="catphotourl" placeholder="cat photo URL" required>
                      <button type="submit">Submit</button>
                </form>
            </section>
        </main>
        <footer>
             <p>No Copyright - <a href="https://www.freecodecamp.org">freeCodeCamp.org</a></p>
        </footer>
    <body>
<html>
</html></body></body></html>]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(十)</title>
    <url>/responsive-web-dedign-%E5%8D%81/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-Intermediate-CSS-by-Building-a-Picasso-Painting"><a href="#Learn-Intermediate-CSS-by-Building-a-Picasso-Painting" class="headerlink" title="Learn Intermediate CSS by Building a Picasso Painting"></a>Learn Intermediate CSS by Building a Picasso Painting</h4><span id="more"></span>

<ol>
<li><p>Start by setting up your HTML structure. Add a <code>&lt;!DOCTYPE&gt;</code> declaration and an <code>html</code> element with a <code>lang</code> attribute set to <code>en</code>. Within the <code>html</code> element, add a <code>head</code> element and a <code>body</code> element.</p>
</li>
<li><p>Within your <code>head</code> element, add a <code>meta</code> tag with the <code>charset</code> attribute set to <code>utf-8</code>. Also add a <code>title</code> element with the text <code>Picasso Painting</code>.</p>
</li>
<li><p>Go ahead and link your CSS file now, even though you have not written any CSS yet.</p>
<p>Add a <code>link</code> element with a <code>rel</code> of <code>stylesheet</code> and an <code>href</code> of <code>styles.css</code>.</p>
</li>
<li><p>FontAwesome is a library of SVG-powered icons, many of which are freely available to use. You will be using some of these icons in this project, so you will need to link the external stylesheet to your HTML.</p>
<p>Add a <code>link</code> element with a <code>rel</code> of <code>stylesheet</code> and an <code>href</code> of <code>https://use.fontawesome.com/releases/v5.8.2/css/all.css</code>.</p>
</li>
<li><p>To get your painting started, give your <code>body</code> element a <code>background-color</code> of <code>rgb(184, 132, 46)</code>.</p>
</li>
<li><p>Within your body tag, add a <code>div</code> element. Give it an <code>id</code> of <code>back-wall</code>.</p>
</li>
<li><p>Use an id selector to give the element with the id <code>back-wall</code> a <code>background-color</code> of <code>#8B4513</code>.</p>
</li>
<li><p>Give the <code>#back-wall</code> element a <code>width</code> of <code>100%</code> and a <code>height</code> of <code>60%</code>.</p>
</li>
<li><p>Typically, HTML is rendered in a top-down manner. Elements at the top of the code are positioned at the top of the page. However, many times you may want to move the elements to different positions. You can do this with the <code>position</code> property.</p>
<p>Set the <code>position</code> property for the <code>#back-wall</code> element to <code>absolute</code>. An <code>absolute</code> position takes the element out of that top-down document flow and allows you to adjust it relative to its container.</p>
<p>When an element is manually positioned, you can shift its layout with <code>top</code>, <code>left</code>, <code>right</code>, and <code>bottom</code>. Set the <code>#back-wall</code> element to have a <code>top</code> value of <code>0</code>, and a <code>left</code> value of <code>0</code>.</p>
</li>
<li><p>The <code>z-index</code> property is used to create “layers” for your HTML elements. If you are familiar with image editing tools, you may have worked with layers before. This is a similar concept.</p>
<p>Elements with a higher <code>z-index</code> value will appear to be layered on top of elements with a lower <code>z-index</code> value. This can be combined with the positioning in the previous lesson to create unique effects.</p>
<p>Since the <code>back-wall</code> element will need to appear “behind” the other elements you will be creating, give the <code>back-wall</code> element a <code>z-index</code> of <code>-1</code>.</p>
</li>
<li><p>Below your <code>#back-wall</code> element, create a <code>div</code> with a <code>class</code> of <code>characters</code>. This is where you will be creating your painting’s characters.</p>
</li>
<li><p>Inside that <code>.characters</code> element, create another <code>div</code> with an <code>id</code> of <code>offwhite-character</code>.</p>
</li>
<li><p>Create four <code>div</code> elements inside your <code>offwhite-character</code> element. Give those <code>div</code> elements the following <code>id</code> values, in order: <code>white-hat</code>, <code>black-mask</code>, <code>gray-instrument</code>, <code>tan-table</code>.</p>
</li>
<li><p>This character needs eyes. Create two <code>div</code> elements in the <code>#black-mask</code> element. Give them the classes <code>eyes left</code> and <code>eyes right</code>, in that order.</p>
</li>
<li><p>Create some “dots” for the instrument. Add five <code>div</code> elements within your <code>#gray-instrument</code> element. Set the <code>class</code> of each to <code>black-dot</code>.</p>
</li>
<li><p>Using an id selector, create a rule for the element with the id <code>offwhite-character</code>. Give it a <code>width</code> of <code>300px</code>, a <code>height</code> of <code>550px</code>, and a <code>background-color</code> of <code>GhostWhite</code>.</p>
</li>
<li><p>Move the <code>#offwhite-character</code> into place by giving it a <code>position</code> of <code>absolute</code>, a <code>top</code> value of <code>20%</code>, and a <code>left</code> value of <code>17.5%</code>.</p>
</li>
<li><p>Using an id selector, style the element with the id <code>white-hat</code>. Give it a <code>width</code> and <code>height</code> of <code>0</code>, and a <code>border-style</code> of <code>solid</code>.</p>
</li>
<li><p>That does not look quite right. Set a <code>border-width</code> of <code>0 120px 140px 180px</code> to size the hat properly.</p>
</li>
<li><p>Now you have a large box. Give it a <code>border-top-color</code>, <code>border-right-color</code>, and <code>border-left-color</code> of <code>transparent</code>. Set the <code>border-bottom-color</code> to <code>GhostWhite</code>. This will make it look more like a hat.</p>
</li>
<li><p>Give the hat a <code>position</code> of <code>absolute</code>, a <code>top</code> value of <code>-140px</code>, and a <code>left</code> value of <code>0</code>.</p>
</li>
<li><p>Using an id selector, create a rule for the element with the id <code>black-mask</code>. Give it a <code>width</code> of <code>100%</code>, a <code>height</code> of <code>50px</code>, and a <code>background-color</code> of <code>rgb(45, 31, 19)</code>.</p>
</li>
<li><p>Give the mask a <code>position</code> of <code>absolute</code>, and a <code>top</code> and <code>left</code> value of <code>0</code>.</p>
</li>
<li><p>To ensure you can see the mask, give it a <code>z-index</code> of <code>1</code>.</p>
</li>
<li><p>Using an id selector, give the element with the id <code>gray-instrument</code> a <code>width</code> of <code>15%</code>, a <code>height</code> of <code>40%</code>, and a <code>background-color</code> of <code>rgb(167, 162, 117)</code>.</p>
</li>
<li><p>Now move it into place with a <code>position</code> of <code>absolute</code>, a <code>top</code> value of <code>50px</code>, and a <code>left</code> value of <code>125px</code>.</p>
</li>
<li><p>Set the <code>z-index</code> to <code>1</code>.</p>
</li>
<li><p>Use a class selector to create a rule for the elements with <code>black-dot</code> class. Set the <code>width</code> to <code>10px</code>, the <code>height</code> to <code>10px</code>, and the <code>background-color</code> to <code>rgb(45, 31, 19)</code>.</p>
</li>
<li><p>These dots are just a little too square. Give the <code>black-dot</code> class a <code>border-radius</code> of <code>50%</code> to fix it.</p>
</li>
<li><p>These dots are just a little too square. Give the <code>black-dot</code> class a <code>border-radius</code> of <code>50%</code> to fix it.</p>
</li>
<li><p>Use an id selector to style the element with the id <code>tan-table</code>. Give it a <code>width</code> of <code>450px</code>, a <code>height</code> of <code>140px</code>, and a <code>background-color</code> of <code>#D2691E</code>.</p>
</li>
<li><p>Move the table into place by giving it a <code>position</code> of <code>absolute</code>, a <code>top</code> value of <code>275px</code>, and a <code>left</code> value of <code>15px</code>.</p>
</li>
<li><p>Give the table a <code>z-index</code> of <code>1</code>.</p>
</li>
<li><p>After your <code>div#offwhite-character</code> element, add a <code>div</code> with the <code>id</code> of <code>black-character</code>.</p>
</li>
<li><p>Within your new <code>#black-character</code> element, add three <code>div</code> elements with the following <code>id</code> values, in order: <code>black-hat</code>, <code>gray-mask</code>, <code>white-paper</code>.</p>
</li>
<li><p>The mask needs eyes. Within your <code>#gray-mask</code> element, add two <code>div</code> elements. The first should have the <code>class</code> set to <code>eyes left</code>, and the second should have the <code>class</code> set to <code>eyes right</code>.</p>
</li>
<li><p>Time to use some FontAwesome icons.</p>
<p>The <code>i</code> element is used for idiomatic text, or text that is separate from the “normal” text content. This could be for <em>italic</em> text, such as scientific terms, or for icons like those provided by FontAwesome.</p>
<p>Within your <code>#white-paper</code> element, add four <code>i</code> elements. Give them all a <code>class</code> value of <code>fas fa-music</code>.</p>
<p>This special class is how FontAwesome determines which icon to load. <code>fas</code> indicates the category of icons (FontAwesome Solid, here), while <code>fa-music</code> selects the specific icon.</p>
</li>
<li><p>Use an id selector to create a rule for the element with the id <code>black-character</code>. Set the <code>width</code> to <code>300px</code>, the <code>height</code> to <code>500px</code>, and the <code>background-color</code> to <code>rgb(45, 31, 19)</code>.</p>
</li>
<li><p>Move the <code>#black-character</code> element into place by setting the <code>position</code> to <code>absolute</code>, the <code>top</code> to <code>30%</code>, and the <code>left</code> to <code>59%</code>.</p>
</li>
<li><p>Use an id selector to create a rule for the element with the id <code>black-hat</code>. Give it a <code>width</code> of <code>0</code>, a <code>height</code> of <code>0</code>, and a <code>border-style</code> of <code>solid</code>.</p>
</li>
<li><p>Set the <code>border-width</code> of the <code>#black-hat</code> to <code>150px 0 0 300px</code>.</p>
</li>
<li><p>Just like with your <code>#white-hat</code>, you should style the border for the <code>#black-hat</code> element. Give it a <code>border-top-color</code>, <code>border-right-color</code>, and <code>border-bottom-color</code> of <code>transparent</code>. Set the <code>border-left-color</code> to <code>rgb(45, 31, 19)</code>.</p>
</li>
<li><p>Now position the <code>#black-hat</code> element. Give it a <code>position</code> of <code>absolute</code>, with a <code>top</code> of <code>-150px</code> and a <code>left</code> of <code>0</code>.</p>
</li>
<li><p>Using an id selector, style the element with the id <code>gray-mask</code>. Give it a <code>width</code> of <code>150px</code>, a <code>height</code> of <code>150px</code>, and a <code>background-color</code> of <code>rgb(167, 162, 117)</code>.</p>
</li>
<li><p>Position the <code>#gray-mask</code> element by setting <code>position</code> to <code>absolute</code>, the <code>top</code> to <code>-10px</code>, and the <code>left</code> to <code>70px</code>.</p>
</li>
<li><p>Using an id selector, create a rule for the id <code>white-paper</code>. Set the <code>width</code> to <code>400px</code>, the <code>height</code> to <code>100px</code>, and the <code>background-color</code> to <code>GhostWhite</code>.</p>
</li>
<li><p>Give the <code>#white-paper</code> a <code>position</code> of <code>absolute</code>, a <code>top</code> of <code>250px</code>, and a <code>left</code> of <code>-150px</code> to move it into place.</p>
</li>
<li><p>Set the <code>z-index</code> of the <code>#white-paper</code> element to <code>1</code>.</p>
</li>
<li><p>FontAwesome icons come with their own styling to define the icon. However, you can still set the styling yourself as well, to change things like the color and size. For now, use a class selector to target the icons with the class <code>fa-music</code>. Set the <code>display</code> to <code>inline-block</code>, the <code>margin-top</code> to <code>8%</code>, and the <code>margin-left</code> to <code>13%</code>.</p>
</li>
<li><p>Below your <code>#black-character</code> element, add two new <code>div</code> elements. These will be the shawl. Give both of them a <code>class</code> of <code>blue</code>. Then give the first one an <code>id</code> of <code>blue-left</code>, and the second an <code>id</code> of <code>blue-right</code>.</p>
</li>
<li><p>Use a class selector to target the new elements with the class <code>blue</code>. Set the <code>background-color</code> to <code>#1E90FF</code>.</p>
</li>
<li><p>Select the element with the id <code>blue-left</code> using an id selector. Give it a <code>width</code> of <code>500px</code> and a <code>height</code> of <code>300px</code>.</p>
</li>
<li><p>Now set the <code>position</code> to <code>absolute</code>, the <code>top</code> to <code>20%</code>, and the <code>left</code> to <code>20%</code>.</p>
</li>
<li><p>Next, target the element with the id <code>blue-right</code> using an id selector. Set the <code>width</code> to <code>400px</code> and the <code>height</code> to <code>300px</code>.</p>
</li>
<li><p>Give the <code>#blue-right</code> element the correct positioning with <code>position</code> set to <code>absolute</code>, <code>top</code> set to <code>50%</code>, and <code>left</code> set to <code>40%</code>.</p>
</li>
<li><p>Below your <code>.blue</code> elements, add another <code>div</code>. Give it the <code>id</code> value of <code>orange-character</code>.</p>
</li>
<li><p>Within that <code>#orange-character</code> element, add four <code>div</code> elements. Give them the <code>id</code> values of <code>black-round-hat</code>, <code>eyes-div</code>, <code>triangles</code>, and <code>guitar</code>, in order.</p>
</li>
<li><p>The <code>#eyes-div</code> element should hold some eyes. Add two <code>div</code> elements inside. Give the first a <code>class</code> of <code>eyes left</code>, and give the second a <code>class</code> of <code>eyes right</code>.</p>
</li>
<li><p>Within the <code>#triangles</code> div, you will need to add the elements that will become your triangles. Create thirty <code>div</code> elements and give each of them the class <code>triangle</code>.</p>
</li>
<li><p>Within the <code>#guitar</code> element, create three <code>div</code> elements. Give the first two a <code>class</code> value of <code>guitar</code>. Then give the first an <code>id</code> of <code>guitar-left</code>, and the second an <code>id</code> of <code>guitar-right</code>. Add an <code>id</code> to the third <code>div</code> with the value <code>guitar-neck</code>.</p>
<p>The third <code>div</code> should not have the <code>guitar</code> class.</p>
</li>
<li><p>Use another FontAwesome icon for your <code>.guitar</code>. Inside both the <code>#guitar-left</code> and <code>#guitar-right</code> elements, add an <code>i</code> element and give it a <code>class</code> of <code>fas fa-bars</code>.</p>
</li>
<li><p>Select your <code>orange-character</code> element with an id selector. Give it a <code>width</code> of <code>250px</code>, a <code>height</code> of <code>550px</code>, and a <code>background-color</code> of <code>rgb(240, 78, 42)</code>.</p>
</li>
<li><p>Give the <code>#orange-character</code> element a <code>position</code> of <code>absolute</code>, a <code>top</code> of <code>25%</code>, and a <code>left</code> of <code>40%</code>.</p>
</li>
<li><p>Give the <code>#orange-character</code> element a <code>position</code> of <code>absolute</code>, a <code>top</code> of <code>25%</code>, and a <code>left</code> of <code>40%</code>.</p>
</li>
<li><p>The <code>#black-round-hat</code> element should probably be round. Give it a <code>border-radius</code> of <code>50%</code> to fix this.</p>
</li>
<li><p>Move the <code>#black-round-hat</code> element into place with a <code>position</code> of <code>absolute</code>, a <code>top</code> of <code>-100px</code>, and a <code>left</code> of <code>5px</code>.</p>
</li>
<li><p>Put the <code>#black-round-hat</code> element on the correct layer with a <code>z-index</code> of <code>-1</code>.</p>
</li>
<li><p>Use an id selector to create a rule for the element with the id <code>eyes-div</code>. Set the <code>width</code> to <code>180px</code> and the <code>height</code> to <code>50px</code>.</p>
</li>
<li><p>Now move the <code>#eyes-div</code> element into position with <code>position</code> set to <code>absolute</code>, <code>top</code> set to <code>-40px</code>, and <code>left</code> set to <code>20px</code>.</p>
</li>
<li><p>Give the <code>#eyes-div</code> element a <code>z-index</code> of <code>3</code>.</p>
</li>
<li><p>Target the element with the id <code>triangles</code> using an id selector. Set the <code>width</code> to <code>250px</code> and the <code>height</code> to <code>550px</code>.</p>
</li>
<li><p>Create a class selector for the elements with the <code>triangle</code> class. Set the <code>width</code> to <code>0</code> and the <code>height</code> to <code>0</code>.</p>
</li>
<li><p>Style the border of your <code>.triangle</code> elements. Set the <code>border-style</code> to <code>solid</code> and the <code>border-width</code> to <code>42px 45px 45px 0</code>.</p>
</li>
<li><p>Give your <code>.triangle</code> elements the correct color. Set the <code>border-top-color</code>, <code>border-bottom-color</code>, and <code>border-left-color</code> to <code>transparent</code>. Set the <code>border-right-color</code> to <code>Gold</code>.</p>
</li>
<li><p>Adjust the layout of the <code>.triangle</code> elements with a <code>display</code> of <code>inline-block</code>.</p>
</li>
<li><p>Now use an id selector for <code>guitar</code>. Set the <code>width</code> to <code>100%</code>, and the <code>height</code> to <code>100px</code>.</p>
</li>
<li><p>In the same <code>#guitar</code> selector, set the <code>position</code> to <code>absolute</code>, the <code>top</code> to <code>120px</code>, and the <code>left</code> to <code>0px</code>.</p>
</li>
<li><p>Give the <code>#guitar</code> rule a <code>z-index</code> of <code>3</code>.</p>
</li>
<li><p>Now use a class selector to target <code>guitar</code>. This will style the two “halves” of your guitar. Set the <code>width</code> to <code>150px</code>, the <code>height</code> to <code>120px</code>, the <code>background-color</code> to <code>Goldenrod</code>, and the <code>border-radius</code> to <code>50%</code>.</p>
</li>
<li><p>Select the <code>id</code> with value <code>guitar-left</code>, and set the <code>position</code> to <code>absolute</code> and the <code>left</code> to <code>0px</code>.</p>
</li>
<li><p>Select the <code>id</code> with value <code>guitar-right</code>, and also set <code>position</code> to <code>absolute</code>. This time, set <code>left</code> to <code>100px</code>.</p>
</li>
<li><p>Now you need to move the bar icons into place. Create a class selector for the <code>fa-bars</code> class. Set the <code>display</code> to <code>block</code>, the <code>margin-top</code> to <code>30%</code>, and the <code>margin-left</code> to <code>40%</code>.</p>
</li>
<li><p>Use an id selector to create a rule for the id <code>guitar-neck</code>. Set the <code>width</code> to <code>200px</code>, the <code>height</code> to <code>30px</code>, and the <code>background-color</code> to <code>#D2691E</code>.</p>
</li>
<li><p>Now move the <code>#guitar-neck</code> element with a <code>position</code> of <code>absolute</code>, a <code>top</code> value of <code>45px</code>, and a <code>left</code> value of <code>200px</code>.</p>
</li>
<li><p>Give the <code>#guitar-neck</code> element a <code>z-index</code> of <code>3</code>.</p>
</li>
<li><p>Time to style the elements with the <code>eyes</code> class. Use a class selector to set the <code>width</code> to <code>35px</code>, the <code>height</code> to <code>20px</code>, the <code>background-color</code> to <code>#8B4513</code>, and the <code>border-radius</code> to <code>20px 50%</code>.</p>
</li>
<li><p>Target the <code>class</code> with value <code>right</code> and set the <code>position</code> to <code>absolute</code>, <code>top</code> to <code>15px</code>, and <code>right</code> to <code>30px</code>.</p>
</li>
<li><p>For the <code>class</code> with value <code>left</code>, create the selector and set the <code>position</code> to <code>absolute</code>, the <code>top</code> to <code>15px</code>, and the <code>left</code> to <code>30px</code>.</p>
</li>
<li><p>One last step. The FontAwesome icons are a little too small. Target all of them with a class selector for <code>fas</code>, and set the <code>font-size</code> to <code>30px</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Picasso Painting<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://use.fontawesome.com/releases/v5.8.2/css/all.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;back-wall&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;characters&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;offwhite-character&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;white-hat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;black-mask&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eyes left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eyes right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gray-instrument&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;black-dot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;black-dot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;black-dot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;black-dot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;black-dot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tan-table&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;black-character&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;black-hat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gray-mask&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eyes left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eyes right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;white-paper&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-music&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-music&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-music&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-music&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blue-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blue-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;orange-character&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;black-round-hat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;eyes-div&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eyes left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eyes right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;triangles&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;guitar&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;guitar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;guitar-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;guitar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;guitar-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;guitar-neck&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">184</span>, <span class="number">132</span>, <span class="number">46</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#back-wall</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#8B4513</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#offwhite-character</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">550px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: GhostWhite;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">17.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#white-hat</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">120px</span> <span class="number">140px</span> <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: GhostWhite;</span><br><span class="line">  <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#black-mask</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">45</span>, <span class="number">31</span>, <span class="number">19</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#gray-instrument</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">167</span>, <span class="number">162</span>, <span class="number">117</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">125px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.black-dot</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">45</span>, <span class="number">31</span>, <span class="number">19</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">65%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tan-table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#D2691E</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">275px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#black-character</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">45</span>, <span class="number">31</span>, <span class="number">19</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">59%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#black-hat</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="built_in">rgb</span>(<span class="number">45</span>, <span class="number">31</span>, <span class="number">19</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#gray-mask</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">167</span>, <span class="number">162</span>, <span class="number">117</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#white-paper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: GhostWhite;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fa-music</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">8%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">13%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1E90FF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blue-left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blue-right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#orange-character</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">550px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">240</span>, <span class="number">78</span>, <span class="number">42</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#black-round-hat</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">45</span>, <span class="number">31</span>, <span class="number">19</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#eyes-div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangles</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">550px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">42px</span> <span class="number">45px</span> <span class="number">45px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-right-color</span>: Gold; <span class="comment">/* yellow */</span></span><br><span class="line">  <span class="attribute">border-bottom-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#guitar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.guitar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: Goldenrod;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#guitar-left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#guitar-right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fa-bars</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#guitar-neck</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#D2691E</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.eyes</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#8B4513</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.fas</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真丑啊！！！ </p>
</li>
</ol>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(十一)</title>
    <url>/responsive-web-dedign-%E5%8D%81%E4%B8%80/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-Responsive-Web-Design-by-Building-a-Piano"><a href="#Learn-Responsive-Web-Design-by-Building-a-Piano" class="headerlink" title="Learn Responsive Web Design by Building a Piano"></a>Learn Responsive Web Design by Building a Piano</h4><span id="more"></span>

<ol>
<li><p>Begin with the basic HTML structure. Add a <code>DOCTYPE</code> declaration and <code>html</code>, <code>head</code>, <code>body</code>, and <code>title</code> elements.</p>
<p>Set the language of this page to English. Set the <code>title</code> to <code>Piano</code>.</p>
</li>
<li><p>Add two <code>meta</code> tags, one to optimize your page for mobile devices, and one to specify an accepted <code>charset</code> for the page.</p>
</li>
<li><p>Time to start working on the piano. Create a <code>div</code> element within your <code>body</code> element with the <code>id</code> set to <code>piano</code>.</p>
</li>
<li><p>Nest a second <code>div</code> within your existing <code>div</code>, and set the <code>class</code> to be <code>keys</code>.</p>
</li>
<li><p>Within your <code>.keys</code> element, add seven <code>div</code> elements. Give them all the class <code>key</code>.</p>
</li>
<li><p>Remember that a <code>class</code> attribute can have multiple values. To separate your white keys from your black keys, you’ll add a second <code>class</code> value of <code>black--key</code>. Add this to your second, third, fifth, sixth, and seventh <code>.key</code> elements.</p>
</li>
<li><p>Now copy the set of seven <code>.key</code> elements, and paste two more sets into the <code>.keys</code> div.</p>
</li>
<li><p>Add a <code>link</code> element within your <code>head</code> element. For that <code>link</code> element, set the <code>rel</code> attribute to <code>stylesheet</code> and the <code>href</code> to <code>./styles.css</code>.</p>
</li>
<li><p>Browsers can apply default margin and padding values to specific elements. To make sure your piano looks correct, you need to reset the box model.</p>
<p>Add an <code>html</code> rule selector to your CSS file, and set the <code>box-sizing</code> property to <code>border-box</code>.</p>
</li>
<li><p>The <code>::before</code> selector creates a pseudo-element which is the first child of the selected element, while the <code>::after</code> selector creates a pseudo-element which is the last child of the selected element. These pseudo-elements are often used to create cosmetic content, which you will see later in this project.</p>
<p>For now, create a CSS selector to target all elements with <code>*</code>, and include the pseudo-elements with <code>::before</code> and <code>::after</code>. Set the <code>box-sizing</code> property to <code>inherit</code>.</p>
</li>
<li><p>Now target your <code>#piano</code> element with an <code>id</code> selector. Set <code>background-color</code> property to <code>#00471b</code>, the <code>width</code> property to <code>992px</code> and the <code>height</code> property to <code>290px</code>.</p>
</li>
<li><p>Set the <code>margin</code> of the <code>#piano</code> to <code>80px auto</code>.</p>
</li>
<li><p>Time to style the keys. Below the <code>#piano</code> rule, target the <code>.keys</code> element with a <code>class</code> selector. Give the new rule a <code>background-color</code> property of <code>#040404</code>, a <code>width</code> property of <code>949px</code> and a <code>height</code> property of <code>180px</code>.</p>
</li>
<li><p>Give the <code>.keys</code> a <code>padding-left</code> of <code>2px</code>.</p>
</li>
<li><p>Move the keys into position by adjusting the <code>#piano</code> selector. Set the <code>padding</code> property to <code>90px 20px 0 20px</code>.</p>
</li>
<li><p>Time to style the keys themselves. Create a <code>class</code> selector for the <code>.key</code> elements. Set the <code>background-color</code> set to the value <code>#ffffff</code>, the <code>position</code> property to <code>relative</code>, the <code>width</code> property to <code>41px</code>, and the <code>height</code> property to <code>175px</code>.</p>
</li>
<li><p>Give the <code>.key</code> a <code>margin</code> of <code>2px</code> and a <code>float</code> property set to <code>left</code>.</p>
</li>
<li><p>Now it is time to use the pseudo-selectors you prepared for earlier. To create the black keys, add a new <code>.key.black--key::after</code> selector. This will target the elements with the class <code>key black--key</code>, and select the pseudo-element after these elements in the HTML.</p>
<p>In the new selector, set the <code>background-color</code> to <code>#1d1e22</code>. Also set the <code>content</code> property to <code>&quot;&quot;</code>. This will make the pseudo-elements empty.</p>
<p>The <code>content</code> property is used to set or override the content of the element. By default, the pseudo-elements created by the <code>::before</code> and <code>::after</code> pseudo-selectors are empty, and the elements will not be rendered to the page. Setting the <code>content</code> property to an empty string <code>&quot;&quot;</code> will ensure the element is rendered to the page while still being empty.</p>
<p>If you would like to experiment, try removing the <code>background-color</code> property and setting different values for the <code>content</code> property, such as <code>&quot;♥&quot;</code>. Remember to undo these changes when you are done so the tests pass.</p>
</li>
<li><p>Give the <code>.key.black--key::after</code> a <code>position</code> property set to <code>absolute</code> and a <code>left</code> property set to <code>-18px</code>.</p>
</li>
<li><p>For the <code>.key.black--key::after</code>, set the <code>width</code> to <code>32px</code> and the <code>height</code> to <code>100px</code>.</p>
</li>
<li><p>The piano needs the freeCodeCamp logo to make it official.</p>
<p>Add an <code>img</code> element before your <code>.keys</code> element. Give the <code>img</code> a <code>class</code> of <code>logo</code>, and set the <code>src</code> to <code>https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg</code>. Give it an <code>alt</code> text of <code>freeCodeCamp Logo</code>.</p>
</li>
<li><p>Start styling the logo by creating a <code>.logo</code> selector. Set the <code>width</code> to <code>200px</code>, a <code>position</code> of <code>absolute</code> and a <code>top</code> set to <code>23px</code>.</p>
</li>
<li><p>The <code>img</code> element needs its parent to have a <code>position</code> set as a point of reference. Set the <code>position</code> of the <code>#piano</code> selector to <code>relative</code>.</p>
</li>
<li><p>To smooth the sharp edges of the piano and keys, start by giving the <code>#piano</code> a <code>border-radius</code> of <code>10px</code>.</p>
</li>
<li><p>Give the <code>.key</code> selector a <code>border-radius</code> value of <code>0 0 3px 3px</code>.</p>
</li>
<li><p>Give the <code>.key.black--key::after</code> selector a <code>border-radius</code> of <code>0 0 3px 3px</code> to match the keys.</p>
</li>
<li><p>The <code>@media</code> at-rule, also known as a media query, is used to conditionally apply CSS. Media queries are commonly used to apply CSS based on the viewport width using the <code>max-width</code> and <code>min-width</code> properties.</p>
<p>In the below example the padding is applied to the <code>.card</code> class when the viewport is <code>960px</code> wide and below.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">960px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Add a media query that will be applied when the viewport is <code>768px</code> wide and below.</p>
</li>
<li><p>Add a new <code>#piano</code> selector within your <code>@media</code> query, and set the <code>width</code> to <code>358px</code>.</p>
</li>
<li><p>Within the <code>@media</code> query, add a <code>.keys</code> selector and set the <code>width</code> to <code>318px</code>.</p>
</li>
<li><p>Now add a <code>.logo</code> selector to the <code>@media</code> query, and set the <code>width</code> property to <code>150px</code>.</p>
</li>
<li><p>You might have noticed the keys collapse when the browser window is smaller than <code>768px</code>. Set <code>overflow</code> to <code>hidden</code> in the first <code>.keys</code> selector, to take care of this issue. This property will hide any element that is pushed outside the set <code>width</code> value of <code>.keys</code>.</p>
</li>
<li><p>Logical operators can be used to construct more complex media queries. The <code>and</code> logical operator is used to query two media conditions.</p>
<p>For example, a media query that targets a display width between 500px and 1000px would be:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">500px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1000px</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Add another <code>@media</code> rule to apply if the browser window is wider than <code>769px</code> but smaller than <code>1199px</code>.</p>
</li>
<li><p>For the new <code>@media</code> rule, set the <code>width</code> of the <code>#piano</code> to <code>675px</code> and the <code>width</code> of the <code>.keys</code> to <code>633px</code>.</p>
<p>With that, your piano is complete!</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Piano<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;piano&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;freeCodeCamp Logo&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;keys&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;key black--key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#piano</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00471b</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">992px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">290px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">80px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">90px</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.keys</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#040404</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">949px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.key</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">41px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">175px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.key</span><span class="selector-class">.black--key</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1d1e22</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">23px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#piano</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">358px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.keys</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">318px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>media</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(十三)</title>
    <url>/responsive-web-dedign-%E5%8D%81%E4%B8%89/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-CSS-Grid-by-Building-a-Magazine"><a href="#Learn-CSS-Grid-by-Building-a-Magazine" class="headerlink" title="Learn CSS Grid by Building a Magazine"></a>Learn CSS Grid by Building a Magazine</h4><span id="more"></span>

<ol>
<li><p>Begin with your standard HTML boilerplate. Add a <code>DOCTYPE</code> declaration, an <code>html</code> element specifying this page is in English, a <code>head</code> element, and a <code>body</code> element.</p>
<p>Add a <code>&lt;meta&gt;</code> tag with the appropriate <code>charset</code> and a <code>&lt;meta&gt;</code> tag for mobile responsiveness within the <code>head</code> element.</p>
</li>
<li><p>Add a <code>title</code> element with the text <code>Magazine</code>, a <code>link</code> element for the <code>https://fonts.googleapis.com/css?family=Anton%7CBaskervville%7CRaleway&amp;display=swap</code> font stylesheet, a <code>link</code> for the <code>https://use.fontawesome.com/releases/v5.8.2/css/all.css</code> FontAwesome stylesheet, and a <code>link</code> for your <code>./styles.css</code> stylesheet.</p>
<p>Your font stylesheet will load three separate fonts: <code>Anton</code>, <code>Baskervville</code>, and <code>Raleway</code>.</p>
</li>
<li><p>Within your <code>body</code>, create a <code>main</code> element. Then in that element, create a <code>section</code> with a <code>class</code> set to <code>heading</code>.</p>
</li>
<li><p>Within your <code>.heading</code> element, create a <code>header</code> element with the <code>class</code> set to <code>hero</code>.</p>
<p>In that element, create an <code>img</code> element with the <code>src</code> set to <code>https://cdn.freecodecamp.org/platform/universal/fcc_meta_1920X1080-indigo.png</code>, the <code>alt</code> set to <code>freecodecamp logo</code>, and the <code>class</code> set to <code>hero-img</code>.</p>
<p>The <code>loading</code> attribute on an <code>img</code> element can be set to <code>lazy</code> to tell the browser not to fetch the image resource until it is needed (as in, when the user scrolls the image into view). As an additional benefit, lazy loaded elements will not load until the non-lazy elements are loaded - this means users with slow internet connections can view the content of your page without having to wait for the images to load.</p>
<p>Give your new <code>img</code> element a <code>loading</code> attribute set to <code>lazy</code>.</p>
</li>
<li><p>After your <code>img</code> element, add an <code>h1</code> element with the <code>class</code> set to <code>hero-title</code> and the text set to <code>OUR NEW CURRICULUM</code>, followed by a <code>p</code> element with the <code>class</code> set to <code>hero-subtitle</code> and the text set to <code>Our efforts to restructure our curriculum with a more project-based focus</code>.</p>
</li>
<li><p>Your image currently takes up a lot of space. To better see what you are working on, add a <code>width</code> attribute to the <code>img</code> element, with a value of <code>400</code>.</p>
<p>You will remove this later on when you have worked on the CSS.</p>
</li>
<li><p>After your <code>header</code> element, create a <code>div</code> with the <code>class</code> set to <code>author</code>.</p>
<p>Within that <code>div</code>, create a <code>p</code> element with the <code>class</code> set to <code>author-name</code> and give it the text <code>By freeCodeCamp</code>. Wrap the <code>freeCodeCamp</code> portion in an <code>a</code> element with the <code>href</code> set to <code>https://freecodecamp.org</code>, and the <code>target</code> set to <code>_blank</code>.</p>
<p>Below that, add a second <code>p</code> element with the class <code>publish-date</code> and the text <code>March 7, 2019</code>.</p>
</li>
<li><p>The <code>Referer</code> HTTP header contains information about the address or URL of a page that a user might be visiting from. This information can be used in analytics to track how many users from your page visit freecodecamp.org, for example. Setting the <code>rel</code> attribute to <code>noreferrer</code> omits this information from the HTTP request. Give your <code>a</code> element a <code>rel</code> attribute set to <code>noreferrer</code>.</p>
</li>
<li><p>Below your <code>.author</code> element, create a new <code>div</code> element with the class <code>social-icons</code>.</p>
<p>Add five <code>a</code> elements within that new <code>div</code>, and give them the following <code>href</code> attributes.</p>
<ul>
<li>The first <code>a</code> element should have an <code>href</code> set to <code>https://www.facebook.com/freecodecamp</code>.</li>
<li>The second <code>a</code> element should have an <code>href</code> set to <code>https://twitter.com/freecodecamp</code>.</li>
<li>The third <code>a</code> element should have an <code>href</code> set to <code>https://instagram.com/freecodecamp</code>.</li>
<li>The fourth <code>a</code> element should have an <code>href</code> set to <code>https://www.linkedin.com/school/free-code-camp</code>.</li>
<li>The fifth <code>a</code> element should have an <code>href</code> set to <code>https://www.youtube.com/freecodecamp</code>.</li>
</ul>
</li>
<li><p>Within each of your new <code>a</code> elements, add an <code>i</code> element and give them the following classes:</p>
<ul>
<li>Your first <code>i</code> element should have the class <code>fab fa-facebook-f</code></li>
<li>Your second <code>i</code> element should have the class <code>fab fa-twitter</code></li>
<li>Your third <code>i</code> element should have the class <code>fab fa-instagram</code></li>
<li>Your fourth <code>i</code> element should have the class <code>fab fa-linkedin-in</code></li>
<li>Your fifth <code>i</code> element should have the class <code>fab fa-youtube</code></li>
</ul>
</li>
<li><p>Below your <code>.heading</code> element, create a new <code>section</code> element with the <code>class</code> set to <code>text</code>. Within that, create a <code>p</code> element with the <code>class</code> set to <code>first-paragraph</code> and the following text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Soon the freeCodeCamp curriculum will be 100% project-driven learning. Instead of a series of coding challenges, you&#x27;ll learn through building projects - step by step. Before we get into the details, let me emphasize: we are not changing the certifications. All 6 certifications will still have the same 5 required projects. We are only changing the optional coding challenges.</span><br></pre></td></tr></table></figure></li>
<li><p>Create another <code>p</code> element below your <code>.first-paragraph</code> element, and give it the following text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">After years - years - of pondering these two problems and how to solve them, I slipped, hit my head on the sink, and when I came to I had a revelation! A vision! A picture in my head! A picture of this! This is what makes time travel possible: the flux capacitor!</span><br></pre></td></tr></table></figure></li>
<li><p>Add a third <code>p</code> element at the end of your <code>.text</code> element, and give it the following text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">It wasn&#x27;t as dramatic as Doc&#x27;s revelation in Back to the Future. It just occurred to me while I was going for a run. The revelation: the entire curriculum should be a series of projects. Instead of individual coding challenges, we&#x27;ll just have projects, each with their own seamless series of tests. Each test gives you just enough information to figure out how to get it to pass. (And you can view hints if that isn&#x27;t enough.)</span><br></pre></td></tr></table></figure></li>
<li><p>After the three <code>p</code> elements within your <code>.text</code> element, create a <code>blockquote</code> element. Within that, add an <code>hr</code> element, a <code>p</code> element with the <code>class</code> set to <code>quote</code>, and a second <code>hr</code> element.</p>
<p>Give the <code>.quote</code> element the text <code>The entire curriculum should be a series of projects</code>.</p>
</li>
<li><p>Below your <code>blockquote</code> element, add another <code>p</code> element with the following text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No more walls of explanatory text. No more walls of tests. Just one test at a time, as you build up a working project. Over the course of passing thousands of tests, you build up projects and your own understanding of coding fundamentals. There is no transition between lessons and projects, because the lessons themselves are baked into projects. And there&#x27;s plenty of repetition to help you retain everything because - hey - building projects in real life has plenty of repetition.</span><br></pre></td></tr></table></figure></li>
<li><p>Create a fifth <code>p</code> element at the end of your <code>.text</code> element, and give it the following text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The main design challenge is taking what is currently paragraphs of explanation and instructions and packing them into a single test description text. Each project will involve dozens of tests like this. People will be coding the entire time, rather than switching back and forth from &quot;reading mode&quot; to &quot;coding mode&quot;.</span><br></pre></td></tr></table></figure></li>
<li><p>Create one final <code>p</code> element at the end of your <code>.text</code> element and give it the following text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Instead of a series of coding challenges, people will be in their code</span><br><span class="line">editor passing one test after another, quickly building up a project.</span><br><span class="line">People will get into a real flow state, similar to what they</span><br><span class="line">experience when they build the required projects at the end of each</span><br><span class="line">certification. They&#x27;ll get that sense of forward progress right from</span><br><span class="line">the beginning. And freeCodeCamp will be a much smoother experience.</span><br></pre></td></tr></table></figure></li>
<li><p>Below your <code>.text</code> element, create a new <code>section</code> element and give it a <code>class</code> of <code>text text-with-images</code>. Within that, create an <code>article</code> element with a <code>class</code> set to <code>brief-history</code>, and an <code>aside</code> element with the <code>class</code> set to <code>image-wrapper</code>.</p>
</li>
<li><p>Within your <code>article</code> element, create an <code>h3</code> element with the <code>class</code> set to <code>list-title</code> and the text of <code>A Brief History</code>. Below that, create a <code>p</code> element with the text <code>Of the Curriculum</code>. Then create a <code>ul</code> element with the class <code>lists</code>.</p>
</li>
<li><p>Within your <code>ul</code> element, create six <code>li</code> elements. Add an <code>h4</code> element with a <code>class</code> set to <code>list-subtitle</code> and a <code>p</code> element to each of your <code>li</code> elements.</p>
<p>Then give the <code>h4</code> and <code>p</code> elements the following text content, in order, with each <code>h4</code> using what’s on the left side of the colon, and each <code>p</code> using what’s on the right:</p>
<ul>
<li><code>V1 - 2014</code>: <code>We launched freeCodeCamp with a simple list of 15 resources, including Harvard&#39;s CS50 and Stanford&#39;s Database Class.</code></li>
<li><code>V2 - 2015</code>: <code>We added interactive algorithm challenges.</code></li>
<li><code>V3 - 2015</code>: <code>We added our own HTML+CSS challenges (before we&#39;d been relying on General Assembly&#39;s Dash course for these).</code></li>
<li><code>V4 - 2016</code>: <code>We expanded the curriculum to 3 certifications, including Front End, Back End, and Data Visualization. They each had 10 required projects, but only the Front End section had its own challenges. For the other certs, we were still using external resources like Node School.</code></li>
<li><code>V5 - 2017</code>: <code>We added the back end and data visualization challenges.</code></li>
<li><code>V6 - 2018</code>: <code>We launched 6 new certifications to replace our old ones. This was the biggest curriculum improvement to date.</code></li>
</ul>
</li>
<li><p>Within your <code>aside</code> element, create two <code>img</code> elements, a <code>blockquote</code> element, and a third <code>img</code> element. Give the <code>blockquote</code> element a <code>class</code> set to <code>image-quote</code>.</p>
</li>
<li><p>Within the <code>.image-wrapper</code> element, give your first <code>img</code> element a <code>src</code> of <code>https://cdn.freecodecamp.org/testable-projects-fcc/images/random-quote-machine.png</code>, an <code>alt</code> of <code>image of the quote machine project</code>, a <code>class</code> of <code>image-1</code>, a <code>loading</code> attribute set to <code>lazy</code>, a <code>width</code> attribute of <code>600</code>, and a <code>height</code> attribute of <code>400</code>.</p>
</li>
<li><p>Within your <code>.image-wrapper</code> element, give the second <code>img</code> element a <code>src</code> of <code>https://cdn.freecodecamp.org/testable-projects-fcc/images/calc.png</code>, an <code>alt</code> of <code>image of a calculator project</code>, a <code>loading</code> attribute set to <code>lazy</code>, a <code>class</code> set to <code>image-2</code>, a <code>width</code> attribute set to <code>400</code>, and a <code>height</code> attribute set to <code>400</code>.</p>
</li>
<li><p>Within your <code>.image-wrapper</code> element, give your third <code>img</code> element a <code>src</code> of <code>https://cdn.freecodecamp.org/testable-projects-fcc/images/survey-form-background.jpeg</code>, an <code>alt</code> of <code>four people working on code</code>, a <code>loading</code> attribute of <code>lazy</code>, a <code>class</code> set to <code>image-3</code>, a <code>width</code> attribute set to <code>600</code>, and a <code>height</code> attribute set to <code>400</code>.</p>
</li>
<li><p>Within your <code>.image-quote</code> element, nest an <code>hr</code> element, a <code>p</code> element and a second <code>hr</code> element. Give the <code>p</code> element a <code>class</code> set to <code>quote</code> and the text <code>The millions of people who are learning to code through freeCodeCamp will have an even better resource to help them learn these fundamentals.</code></p>
</li>
<li><p>To start your CSS, normalize the CSS rules by targeting all elements with <code>*</code>, including the <code>::before</code> and <code>::after</code> pseudo-selectors.</p>
<p>Set the <code>padding</code> and <code>margin</code> properties both to <code>0</code> and set the <code>box-sizing</code> property to <code>border-box</code>.</p>
</li>
<li><p>Create an <code>html</code> selector and give it a <code>font-size</code> property set to <code>62.5%</code>. This will set the default font size for your web page to 10px (the browser default is 16px).</p>
<p>This will make it easier for you to work with <code>rem</code> units later, as <code>2rem</code> would be 20px.</p>
</li>
<li><p>Create a <code>body</code> selector. Set the <code>font-family</code> property to <code>Baskervville</code>, with a fallback of <code>serif</code>. Set the <code>color</code> property to <code>linen</code> and the <code>background-color</code> property to <code>rgb(20, 30, 40)</code>.</p>
</li>
<li><p>Create an <code>h1</code> selector, and set the <code>font-family</code> property to <code>Anton</code> with the fallback of <code>sans-serif</code>.</p>
</li>
<li><p>Create an <code>h2, h3, h4, h5, h6</code> selector. Give it a <code>font-family</code> property set to <code>Raleway</code> with a fallback of <code>sans-serif</code>.</p>
</li>
<li><p>Create an <code>a</code> selector, and give it a <code>text-decoration</code> property set to <code>none</code> and a <code>color</code> property set to <code>linen</code>.</p>
</li>
<li><p>Now you are ready to start putting together the grid layout. CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements.</p>
<p>Begin by creating a <code>main</code> selector and giving it a <code>display</code> property set to <code>grid</code>.</p>
</li>
<li><p>Now you can style the layout of your grid. CSS Grid is similar to Flexbox in that it has a special property for both the parent and child elements.</p>
<p>In this case, your parent element is the <code>main</code> element. Set the content to have a three-column layout by adding a <code>grid-template-columns</code> property with a value of <code>1fr 94rem 1fr</code>. This will create three columns where the middle column is <code>94rem</code> wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.</p>
</li>
<li><p>Use the <code>minmax</code> function to make your columns responsive on any device. The <code>minmax</code> function takes two arguments, the first being the minimum value and the second being the maximum. These values could be a length, percentage, <code>fr</code>, or even a keyword like <code>max-content</code>.</p>
<p>Wrap each of your already defined values of the <code>grid-template-columns</code> property in a <code>minmax</code> function, using each value as the second argument. The first argument should be <code>2rem</code>, <code>min-content</code>, and <code>2rem</code> respectively.</p>
</li>
<li><p>To add space between rows in the grid layout, you can use the <code>row-gap</code> property. Give the <code>main</code> selector a <code>row-gap</code> property of <code>3rem</code>.</p>
</li>
<li><p>Your magazine will have three primary sections. You already set the overall layout in the <code>main</code> rule, but you can adjust the placement in the child rules.</p>
<p>One option is the <code>grid-column</code> property, which is shorthand for <code>grid-column-start</code> and <code>grid-column-end</code>. The <code>grid-column</code> property tells the grid item which grid line to start and end at.</p>
<p>Create a <code>.heading</code> rule and set the <code>grid-column</code> property to <code>2 / 3</code>. This will tell the <code>.heading</code> element to start at grid line 2 and end at grid line 3.</p>
</li>
<li><p>Create a <code>.text</code> selector and give it a <code>grid-column</code> property set to <code>2 / 3</code>.</p>
</li>
<li><p>For additional control over the layout of your content, you can have a CSS Grid within a CSS Grid.</p>
<p>Set the <code>display</code> property of your <code>.heading</code> selector to <code>grid</code>.</p>
</li>
<li><p>Now you can style the content of the <code>.heading</code> element with CSS Grid.</p>
<p>The CSS <code>repeat()</code> function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. For example, setting the <code>grid-template-columns</code> property to <code>repeat(20, 200px)</code> would create 20 columns each <code>200px</code> wide.</p>
<p>Give your <code>.heading</code> element a <code>grid-template-columns</code> property set to <code>repeat(2, 1fr)</code> to create two columns of equal width.</p>
</li>
<li><p>Give your <code>.heading</code> selector a <code>row-gap</code> property set to <code>1.5rem</code>.</p>
</li>
<li><p>Remember that the <code>grid-column</code> property determines which columns an element starts and ends at. There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use <code>-1</code> for the end column.</p>
<p>Create a <code>.hero</code> selector and give it a <code>grid-column</code> property set to <code>1 / -1</code>. This will tell the element to span the full width of the grid.</p>
</li>
<li><p>Give the <code>.hero</code> selector a <code>position</code> property set to <code>relative</code>.</p>
</li>
<li><p>You should remove the temporary <code>width</code> attribute before writing the CSS for your <code>.hero-img</code>.</p>
</li>
<li><p>Create an <code>img</code> selector and give it a <code>width</code> property set to <code>100%</code>, and an <code>object-fit</code> property set to <code>cover</code>.</p>
<p>The <code>object-fit</code> property tells the browser how to position the element within its container. In this case, <code>cover</code> will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.</p>
</li>
<li><p>Create a <code>.hero-title</code> selector and give it a <code>text-align</code> property set to <code>center</code>, a <code>color</code> property set to <code>orangered</code> and a <code>font-size</code> property set to <code>8rem</code>.</p>
</li>
<li><p>The subtitle also needs to be styled. Create a <code>.hero-subtitle</code> selector and give it a <code>font-size</code> property set to <code>2.4rem</code>, a <code>color</code> property set to <code>orangered</code>, and a <code>text-align</code> property set to <code>center</code>.</p>
</li>
<li><p>Create an <code>.author</code> selector and give it a <code>font-size</code> property set to <code>2rem</code> and a <code>font-family</code> property set to <code>Raleway</code> with a fallback of <code>sans-serif</code>.</p>
</li>
<li><p>Create a <code>.author-name a:hover</code> selector and give it a <code>background-color</code> property set to <code>#306203</code>.</p>
<p>This will create a hover effect only for the <code>a</code> element within the <code>.author-name</code>, showing the original freeCodeCamp green in the background.</p>
</li>
<li><p>Create a <code>.publish-date</code> selector and give it a <code>color</code> property of <code>rgba(255, 255, 255, 0.5)</code>.</p>
</li>
<li><p>Create a <code>.social-icons</code> selector. Give it a <code>display</code> property set to <code>grid</code>, and a <code>font-size</code> property set to <code>3rem</code>.</p>
</li>
<li><p>The default settings for CSS Grid will create additional rows as needed, unlike Flexbox. Give the <code>.social-icons</code> selector a <code>grid-template-columns</code> property set to <code>repeat(5, 1fr)</code> to arrange the icons in a single row.</p>
</li>
<li><p>If you wanted to add more social icons, but keep them on the same row, you would need to update <code>grid-template-columns</code> to create additional columns. As an alternative, you can use the <code>grid-auto-flow</code> property.</p>
<p>This property takes either <code>row</code> or <code>column</code> as the first value, with an optional second value of <code>dense</code>. <code>grid-auto-flow</code> uses an auto-placement algorithm to adjust the grid layout. Setting it to <code>column</code> will tell the algorithm to create new columns for content as needed. The <code>dense</code> value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.</p>
<p>For your <code>.social-icons</code> selector, set the <code>grid-auto-flow</code> property to <code>column</code>.</p>
</li>
<li><p>Now the auto-placement algorithm will kick in when you add a new icon element. However, the algorithm defaults the new column width to be <code>auto</code>, which will not match your current columns.</p>
<p>You can override this with the <code>grid-auto-columns</code> property. Give the <code>.social-icons</code> selector a <code>grid-auto-columns</code> property set to <code>1fr</code>.</p>
</li>
<li><p>Much like Flexbox, with CSS Grid you can align the content of grid items with <code>align-items</code> and <code>justify-items</code>. <code>align-items</code> will align child elements along the column axis, and <code>justify-items</code> will align child elements along the row axis.</p>
<p>Give the <code>.social-icons</code> selector an <code>align-items</code> property set to <code>center</code>.</p>
</li>
<li><p>Give the <code>.text</code> selector a <code>font-size</code> property set to <code>1.8rem</code> and a <code>letter-spacing</code> property set to <code>0.6px</code>.</p>
</li>
<li><p>Your <code>.text</code> element is not a CSS Grid, but you can create columns within an element without using Grid by using the <code>column-width</code> property.</p>
<p>Give your <code>.text</code> selector a <code>column-width</code> property set to <code>25rem</code>.</p>
</li>
<li><p>Magazines often use justified text in their printed content to structure their layout and control the flow of their content. While this works in printed form, justified text on websites can be an accessibility concern, for example presenting challenges for folks with dyslexia.</p>
<p>To make your project look like a printed magazine, give the <code>.text</code> selector a <code>text-align</code> property set to <code>justify</code>.</p>
</li>
<li><p>The <code>::first-letter</code> pseudo-selector allows you to target the first letter in the text content of an element.</p>
<p>Create a <code>.first-paragraph::first-letter</code> selector and set the <code>font-size</code> property to <code>6rem</code>. Also give it a <code>color</code> property set to <code>orangered</code> to make it stand out.</p>
</li>
<li><p>The other text has been shifted out of place. Move it into position by giving the <code>.first-paragraph::first-letter</code> selector a <code>float</code> property set to <code>left</code> and a <code>margin-right</code> property set to <code>1rem</code>.</p>
</li>
<li><p>Create an <code>hr</code> selector, and give it a <code>margin</code> property set to <code>1.5rem 0</code>.</p>
</li>
<li><p>To give the <code>hr</code> a color, you need to adjust the <code>border</code> property. Give the <code>hr</code> selector a <code>border</code> property set to <code>1px solid rgba(120, 120, 120, 0.6)</code>.</p>
</li>
<li><p>Create a <code>.quote</code> selector. Give it a <code>color</code> property set to <code>#00beef</code>, a <code>font-size</code> property set to <code>2.4rem</code>, and a <code>text-align</code> property set to <code>center</code>.</p>
</li>
<li><p>To make the quote text stand out more, give the <code>.quote</code> selector a <code>font-family</code> property set to <code>Raleway</code> with a fallback of <code>sans-serif</code>.</p>
</li>
<li><p>A quote is not really a quote without proper quotation marks. You can add these with CSS pseudo selectors.</p>
<p>Create a <code>.quote::before</code> selector and set the <code>content</code> property to <code>&quot;</code> with a space following it.</p>
<p>Also, create a <code>.quote::after</code> selector and set the <code>content</code> property to <code>&quot;</code> with a space preceding it.</p>
</li>
<li><p>Now it’s time to style your third <code>section</code>. Note that it has the <code>text</code> and <code>text-with-images</code> values for the <code>class</code> attribute, which means it is already inheriting the styles from your <code>.text</code> rule.</p>
<p>Create a <code>.text-with-images</code> selector and set the <code>display</code> property to <code>grid</code>.</p>
</li>
<li><p>You will need to have a column for text and a column for images. Give the <code>.text-with-images</code> selector a <code>grid-template-columns</code> property set to <code>1fr 2fr</code>. Also set the <code>column-gap</code> property to <code>3rem</code> to provide more spacing between the columns.</p>
</li>
<li><p>Give the <code>.text-with-images</code> selector a <code>margin-bottom</code> property set to <code>3rem</code>.</p>
</li>
<li><p>Create a <code>.lists</code> selector and set the <code>list-style-type</code> property to <code>none</code>. This will get rid of the bullet points on the list items.</p>
</li>
<li><p>Give the <code>.lists</code> selector a <code>margin-top</code> property set to <code>2rem</code>.</p>
</li>
<li><p>Create a <code>.lists li</code> rule to target the list items within your <code>.lists</code> element. Give it a <code>margin-bottom</code> property set to <code>1.5rem</code>.</p>
</li>
<li><p>Create a <code>.list-title, .list-subtitle</code> selector and set the <code>color</code> property to <code>#00beef</code>.</p>
</li>
<li><p>Time to style the last section of the magazine - the images.</p>
<p>The images are wrapped with an <code>aside</code> element using the <code>image-wrapper</code> class, so create an <code>.image-wrapper</code> selector. Set the <code>display</code> property to <code>grid</code>.</p>
</li>
<li><p>The images should be within a two column, three row layout.</p>
<p>Give the <code>.image-wrapper</code> selector a <code>grid-template-columns</code> property set to <code>2fr 1fr</code> and a <code>grid-template-rows</code> property set to <code>repeat(3, min-content)</code>. This will give our grid rows that adjust in height based on the content, but columns that remain a fixed width based on the container.</p>
</li>
<li><p>The <code>gap</code> property is a shorthand way to set the value of <code>column-gap</code> and <code>row-gap</code> at the same time. If given one value, it sets the <code>column-gap</code> and <code>row-gap</code> both to that value. If given two values, it sets the <code>row-gap</code> to the first value and the <code>column-gap</code> to the second.</p>
<p>Give the <code>.image-wrapper</code> selector a <code>gap</code> property set to <code>2rem</code>.</p>
</li>
<li><p>The <code>place-items</code> property can be used to set the <code>align-items</code> and <code>justify-items</code> values at the same time. The <code>place-items</code> property takes one or two values. If one value is provided, it is used for both the <code>align-items</code> and <code>justify-items</code> properties. If two values are provided, the first value is used for the <code>align-items</code> property and the second value is used for the <code>justify-items</code> property.</p>
<p>Give the <code>.image-wrapper</code> selector a <code>place-items</code> property set to <code>center</code>.</p>
</li>
<li><p>Create an <code>.image-1, .image-3</code> rule and give it a <code>grid-column</code> property set to <code>1 / -1</code>. This will allow the first and third images to span the full width of the grid.</p>
</li>
<li><p>Now that the magazine layout is finished, you need to make it responsive.</p>
<p>Start with a <code>@media</code> query for <code>only screen</code> with a <code>max-width</code> of <code>720px</code>. Inside, create an <code>.image-wrapper</code> selector and give it a <code>grid-template-columns</code> property of <code>1fr</code>.</p>
<p>This will collapse the three images into one column on smaller screens.</p>
</li>
<li><p>Create another <code>@media</code> query for <code>only screen</code> with a <code>max-width</code> of <code>600px</code>. Within, create a <code>.text-with-images</code> rule and give it a <code>grid-template-columns</code> property of <code>1fr</code>.</p>
<p>This will collapse your bottom text area into a single column on smaller screens.</p>
</li>
<li><p>Create a third <code>@media</code> query for <code>only screen</code> with a <code>max-width</code> of <code>550px</code>. Within, create a <code>.hero-title</code> selector with a <code>font-size</code> set to <code>6rem</code>, a <code>.hero-subtitle, .author, .quote, .list-title</code> selector with a <code>font-size</code> set to <code>1.8rem</code>, a <code>.social-icons</code> selector with a <code>font-size</code> set to <code>2rem</code>, and a <code>.text</code> selector with a <code>font-size</code> set to <code>1.6rem</code>.</p>
</li>
<li><p>Create one final <code>@media</code> query for <code>only screen</code> with a <code>max-width</code> of <code>420px</code>. Within, create a <code>.hero-title</code> selector with a <code>font-size</code> property set to <code>4.5rem</code>.</p>
<p>Congratulations! Your magazine is now complete.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Magazine<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Anton%7CBaskervville%7CRaleway&amp;display=swap&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://use.fontawesome.com/releases/v5.8.2/css/all.css&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;heading&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;hero&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/platform/universal/fcc_meta_1920X1080-indigo.png&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alt</span>=<span class="string">&quot;freecodecamp logo&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;hero-img&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;hero-title&quot;</span>&gt;</span>OUR NEW CURRICULUM<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;hero-subtitle&quot;</span>&gt;</span></span><br><span class="line">            Our efforts to restructure our curriculum with a more project-based</span><br><span class="line">            focus</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;author-name&quot;</span>&gt;</span></span><br><span class="line">            By</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://freecodecamp.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span></span></span><br><span class="line"><span class="tag">              &gt;</span>freeCodeCamp&lt;/a</span><br><span class="line">            &gt;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;publish-date&quot;</span>&gt;</span>March 7, 2019<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;social-icons&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.facebook.com/freecodecamp/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-facebook-f&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://twitter.com/freecodecamp/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-twitter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://instagram.com/freecodecamp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-instagram&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.linkedin.com/school/free-code-camp/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-linkedin-in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.youtube.com/freecodecamp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-youtube&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first-paragraph&quot;</span>&gt;</span></span><br><span class="line">          Soon the freeCodeCamp curriculum will be 100% project-driven learning. Instead of a series of coding challenges, you&#x27;ll learn through building projects - step by step. Before we get into the details, let me emphasize: we are not changing the certifications. All 6 certifications will still have the same 5 required projects. We are only changing the optional coding challenges.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          After years - years - of pondering these two problems and how to solve them, I slipped, hit my head on the sink, and when I came to I had a revelation! A vision! A picture in my head! A picture of this! This is what makes time travel possible: the flux capacitor!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          It wasn&#x27;t as dramatic as Doc&#x27;s revelation in Back to the Future. It</span><br><span class="line">          just occurred to me while I was going for a run. The revelation: the entire curriculum should be a series of projects. Instead of individual coding challenges, we&#x27;ll just have projects, each with their own seamless series of tests. Each test gives you just enough information to figure out how to get it to pass. (And you can view hints if that isn&#x27;t enough.)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;quote&quot;</span>&gt;</span></span><br><span class="line">            The entire curriculum should be a series of projects</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          No more walls of explanatory text. No more walls of tests. Just one</span><br><span class="line">          test at a time, as you build up a working project. Over the course of passing thousands of tests, you build up projects and your own understanding of coding fundamentals. There is no transition between lessons and projects, because the lessons themselves are baked into projects. And there&#x27;s plenty of repetition to help you retain everything because - hey - building projects in real life has plenty of repetition.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          The main design challenge is taking what is currently paragraphs of explanation and instructions and packing them into a single test description text. Each project will involve dozens of tests like this. People will be coding the entire time, rather than switching back and forth from &quot;reading mode&quot; to &quot;coding mode&quot;.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          Instead of a series of coding challenges, people will be in their code editor passing one test after another, quickly building up a project. People will get into a real flow state, similar to what they experience when they build the required projects at the end of each certification. They&#x27;ll get that sense of forward progress right from the beginning. And freeCodeCamp will be a much smoother experience.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;text text-with-images&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;brief-history&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;list-title&quot;</span>&gt;</span>A Brief History<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Of the Curriculum<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;list-subtitle&quot;</span>&gt;</span>V1 - 2014<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                We launched freeCodeCamp with a simple list of 15 resources,</span><br><span class="line">                including Harvard&#x27;s CS50 and Stanford&#x27;s Database Class.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;list-subtitle&quot;</span>&gt;</span>V2 - 2015<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>We added interactive algorithm challenges.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;list-subtitle&quot;</span>&gt;</span>V3 - 2015<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                We added our own HTML+CSS challenges (before we&#x27;d been relying on</span><br><span class="line">                General Assembly&#x27;s Dash course for these).</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;list-subtitle&quot;</span>&gt;</span>V4 - 2016<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                We expanded the curriculum to 3 certifications, including Front</span><br><span class="line">                End, Back End, and Data Visualization. They each had 10 required</span><br><span class="line">                projects, but only the Front End section had its own challenges.</span><br><span class="line">                For the other certs, we were still using external resources like</span><br><span class="line">                Node School.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;list-subtitle&quot;</span>&gt;</span>V5 - 2017<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>We added the back end and data visualization challenges.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;list-subtitle&quot;</span>&gt;</span>V6 - 2018<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                We launched 6 new certifications to replace our old ones. This was</span><br><span class="line">                the biggest curriculum improvement to date.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;image-wrapper&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/testable-projects-fcc/images/random-quote-machine.png&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alt</span>=<span class="string">&quot;image of the quote machine project&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;image-1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">&quot;600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/testable-projects-fcc/images/calc.png&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alt</span>=<span class="string">&quot;image of a calculator project&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;image-2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;image-quote&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;quote&quot;</span>&gt;</span></span><br><span class="line">              The millions of people who are learning to code through freeCodeCamp</span><br><span class="line">              will have an even better resource to help them learn these</span><br><span class="line">              fundamentals.</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/testable-projects-fcc/images/survey-form-background.jpeg&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alt</span>=<span class="string">&quot;four people working on code&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;image-3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">&quot;600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*,</span><br><span class="line"><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">62.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Baskervville&#x27;</span>, serif;</span><br><span class="line">  <span class="attribute">color</span>: linen;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Anton&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Raleway&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: linen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">minmax</span>(<span class="number">2rem</span>, <span class="number">1</span>fr) <span class="built_in">minmax</span>(min-content, <span class="number">94rem</span>) <span class="built_in">minmax</span>(<span class="number">2rem</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1.5rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.heading</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.8rem</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0.6px</span>;</span><br><span class="line">  <span class="attribute">column-width</span>: <span class="number">25rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hero</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hero-title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: orangered;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">8rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hero-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.4rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: orangered;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.author</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Raleway&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.author-name</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#306203</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.publish-date</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.social-icons</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.first-paragraph</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">6rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: orangered;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quote</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00beef</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.4rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Raleway&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quote</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&quot; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quote</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27; &quot;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-with-images</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.lists</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.lists</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-title</span>, <span class="selector-class">.list-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00beef</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, min-content);</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">2rem</span>;</span><br><span class="line">  place-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image-1</span>, <span class="selector-class">.image-3</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">720px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.image-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.text-with-images</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">550px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.hero-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">6rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.hero-subtitle</span>,</span><br><span class="line">  <span class="selector-class">.author</span>,</span><br><span class="line">  <span class="selector-class">.quote</span>,</span><br><span class="line">  <span class="selector-class">.list-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.8rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.social-icons</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.6rem</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(十二)</title>
    <url>/responsive-web-dedign-%E5%8D%81%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-CSS-Variables-by-Building-a-City-Skyline"><a href="#Learn-CSS-Variables-by-Building-a-City-Skyline" class="headerlink" title="Learn CSS Variables by Building a City Skyline"></a>Learn CSS Variables by Building a City Skyline</h4><span id="more"></span>

<ol>
<li><p>Welcome to the CSS Variables Skyline project! Start by adding the <code>!DOCTYPE html</code> declaration at the top of the document so the browser knows what type of document it’s reading.</p>
</li>
<li><p>Add opening and closing <code>html</code> tags below the <code>DOCTYPE</code> so you have a place to start putting some code. Be sure to set the language to English.</p>
</li>
<li><p>Next, add opening and closing <code>head</code> and <code>body</code> tags within the <code>html</code> element.</p>
</li>
<li><p>Within the <code>head</code>, nest a <code>meta</code> element with a <code>charset</code> of <code>UTF-8</code>, a <code>title</code> element with a title of <code>City Skyline</code>, and a <code>link</code> element that links your <code>styles.css</code> file.</p>
</li>
<li><p>In CSS, you can target everything with an asterisk. Add a border to everything by using the <code>*</code> selector, and giving it a <code>border</code> of <code>1px solid black</code>. This is a trick that helps visualize where elements are and their size. You will remove this later.</p>
</li>
<li><p>Also add a <code>box-sizing</code> of <code>border-box</code> to everything. This will make it so the border you added doesn’t add any size to your elements.</p>
</li>
<li><p>You can see the <code>body</code> (it’s the inner-most box on your page); the box around it is the <code>html</code> element. Make your <code>body</code> fill the whole viewport by giving it a <code>height</code> of <code>100vh</code>. Remove the default <code>margin</code> from the <code>body</code> by setting the <code>margin</code> to <code>0</code>. Finally, set the <code>overflow</code> property to <code>hidden</code> to hide any scroll bars that appear when something extends past the viewport.</p>
</li>
<li><p>Create a <code>div</code> element in the <code>body</code> with a class of <code>background-buildings</code>. This will be a container for a group of buildings.</p>
</li>
<li><p>Give your <code>.background-buildings</code> element a <code>width</code> and <code>height</code> of <code>100%</code> to make it the full width and height of its parent, the <code>body</code>.</p>
</li>
<li><p>Nest a <code>div</code> with a class of <code>bb1</code> in the background buildings container. Open your <code>styles.css</code> file, and give <code>.bb1</code> a <code>width</code> of <code>10%</code> and <code>height</code> of <code>70%</code>. “bb” stands for “background building”, this will be your first building.</p>
</li>
<li><p>Nest four <code>div</code> elements in the <code>.bb1</code> container. Give them the classes <code>bb1a</code>, <code>bb1b</code>, <code>bb1c</code>, and <code>bb1d</code> in that order. This building will have four sections.</p>
</li>
<li><p>Give the parts of your building <code>width</code> and <code>height</code> properties with these values: <code>70%</code> and <code>10%</code> to <code>.bb1a</code>, <code>80%</code> and <code>10%</code> to <code>.bb1b</code>, <code>90%</code> and <code>10%</code> to <code>.bb1c</code>, and <code>100%</code> and <code>70%</code> to <code>.bb1d</code>. Remember that these percentages are relative to the parent and note that the heights will add up to 100% - vertically filling the container.</p>
</li>
<li><p>Center the parts of your building by turning the <code>.bb1</code> element into a flexbox parent. Use the <code>flex-direction</code> and <code>align-items</code> properties to center the children.</p>
</li>
<li><p>Now you have something that is resembling a building. You are ready to create your first variable. Variable declarations begin with two dashes (<code>-</code>) and are given a name and a value like this: <code>--variable-name: value;</code>. In the rule for the <code>bb1</code> class, create a variable named <code>--building-color1</code> and give it a value of <code>#999</code>.</p>
</li>
<li><p>To use a variable, put the variable name in parentheses with <code>var</code> in front of them like this: <code>var(--variable-name)</code>. Whatever value you gave the variable will be applied to whatever property you use it on.</p>
<p>Add the variable <code>--building-color1</code> you created in the previous step as the value of the <code>background-color</code> property of the <code>.bb1a</code> class.</p>
</li>
<li><p>Use the same variable as the <code>background-color</code> of the <code>.bb1b</code>, <code>.bb1c</code>, and <code>.bb1d</code> classes to fill in the rest of the building.</p>
</li>
<li><p>Change the value of your variable from <code>#999</code> to <code>#aa80ff</code> and you can see how it gets applied everywhere you used the variable. This is the main advantage of using variables, being able to quickly change many values in your stylesheet by just changing the value of a variable.</p>
</li>
<li><p>Your first building looks pretty good now. Nest three new <code>div</code> elements in the <code>.background-buildings</code> container and give them the classes of <code>bb2</code>, <code>bb3</code>, and <code>bb4</code> in that order. These will be three more buildings for the background.</p>
</li>
<li><p>Give the new buildings <code>width</code> and <code>height</code> properties of: <code>10%</code> and <code>50%</code> for <code>.bb2</code>, <code>10%</code> and <code>55%</code> for <code>.bb3</code>, and <code>11%</code> and <code>58%</code> for <code>.bb4</code>. You will be using almost all percent based units and some flexbox for this project, so everything will be completely responsive.</p>
</li>
<li><p>The buildings are currently stacked on top of each other. Align the buildings by turning the <code>.background-buildings</code> element into a flexbox parent. Use the <code>align-items</code> and <code>justify-content</code> properties to evenly space the buildings across the bottom of the element.</p>
</li>
<li><p>The buildings are too spaced out. Squeeze them together by adding two empty <code>div</code> elements to the top of the <code>.background-buildings</code> element, two more at the bottom of it, and one more in between <code>.bb3</code> and <code>.bb4</code>. These will be added as evenly-spaced elements across the container, effectively moving the buildings closer to the center.</p>
</li>
<li><p>Create a new variable below your <code>--building-color1</code> variable. Name your new variable <code>--building-color2</code> and give it a value of <code>#66cc99</code>. Then set it as the <code>background-color</code> of <code>.bb2</code>.</p>
</li>
<li><p>That didn’t work. You should add a fallback value to a variable by putting it as the second value of where you use the variable like this: <code>var(--variable-name, fallback-value)</code>. The property will use the fallback value when there’s a problem with the variable. Add a fallback value of <code>green</code> to the <code>background-color</code> of <code>.bb2</code>.</p>
</li>
<li><p>Create a new variable below the other ones named <code>--building-color3</code> and give it a value of <code>#cc6699</code>. Then use it as the <code>background-color</code> of the <code>.bb3</code> class and give it a fallback value of <code>pink</code>.</p>
</li>
<li><p>That didn’t work, because the variables you declared in <code>.bb1</code> do not cascade to the <code>.bb2</code> and <code>.bb3</code> sibling elements. That’s just how CSS works. Because of this, variables are often declared in the <code>:root</code> selector. This is the highest level selector in CSS; putting your variables there will make them usable everywhere. Add the <code>:root</code> selector to the top of your stylesheet, and move all your variable declarations there.</p>
</li>
<li><p>Now that you’ve worked the bugs out and the buildings are the right colors, you can remove the fallback values in the two places they were used. Go ahead and do that now.</p>
</li>
<li><p>Create another variable named <code>--building-color4</code> and give it a value of <code>#538cc6</code>. Make sure it’s in the <code>:root</code> selector this time. Then use it to fill in the last building.</p>
</li>
<li><p>The background buildings are starting to look pretty good. Create a new <code>div</code> below the <code>.background-buildings</code> element and give it a class of <code>foreground-buildings</code>. This will be another container for more buildings.</p>
</li>
<li><p>You want the <code>.foreground-buildings</code> container to sit directly on top of the <code>.background-buildings</code> element. Give it a <code>width</code> and <code>height</code> of <code>100%</code>, set the <code>position</code> to <code>absolute</code>, and the <code>top</code> to <code>0</code>. This will make it the same size as the body and move the start of it to the top left corner.</p>
</li>
<li><p>Nest six <code>div</code> elements within <code>.foreground-buildings</code> and give them the classes of <code>fb1</code> through <code>fb6</code> in that order. “fb” stands for “foreground building”. These will be six more buildings for the foreground.</p>
</li>
<li><p>Give the six new elements these <code>width</code> and <code>height</code> values: <code>10%</code> and <code>60%</code> to <code>.fb1</code>, <code>10%</code> and <code>40%</code> to <code>.fb2</code>, <code>10%</code> and <code>35%</code> to <code>.fb3</code>, <code>8%</code> and <code>45%</code> to <code>.fb4</code>, <code>10%</code> and <code>33%</code> to <code>.fb5</code>, and <code>9%</code> and <code>38%</code> to <code>.fb6</code>.</p>
</li>
<li><p>Add the same <code>display</code>, <code>align-items</code>, and <code>justify-content</code> properties and values to <code>.foreground-buildings</code> that you used on <code>.background-buildings</code>. Again, this will use Flexbox to evenly space the buildings across the bottom of their container.</p>
</li>
<li><p>You should optimize your code. Move the <code>position</code> and <code>top</code> properties and values from <code>.foreground-buildings</code> to <code>.background-buildings</code>. Then select both <code>.background-buildings</code> and <code>.foreground-buildings</code> there, effectively applying those styles to both of the elements. You can use a comma (<code>,</code>) to separate selectors like this: <code>selector1, selector2</code>.</p>
</li>
<li><p>Now that you did that, you can delete the old <code>.foreground-buildings</code> declaration and all of its properties since they aren’t needed anymore.</p>
</li>
<li><p>The skyline is coming together. Fill in the <code>background-color</code> property of the foreground buildings. Use your <code>--building-color1</code> variable to fill in <code>.fb3</code> and <code>.fb4</code>, <code>--building-color2</code> for <code>.fb5</code>, <code>--building-color3</code> for <code>.fb2</code> and <code>.fb6</code>, and <code>--building-color4</code> for <code>.fb1</code>.</p>
</li>
<li><p>Squeeze the buildings together again by adding two empty <code>div</code> elements within both the top and bottom of the <code>.foreground-buildings</code> element, and one more in between <code>.fb2</code> and <code>.fb3</code>.</p>
</li>
<li><p>Move the position of <code>.fb4</code> relative to where it is now by adding a <code>position</code> of <code>relative</code> and <code>left</code> of <code>10%</code> to it. Do the same for <code>.fb5</code> but use <code>right</code> instead of <code>left</code>. This will cover up the remaining white space in between the buildings.</p>
</li>
<li><p>Your code is starting to get quite long. Add a comment above the <code>.fb1</code> class that says <code>FOREGROUND BUILDINGS - &quot;fb&quot; stands for &quot;foreground building&quot;</code> to help people understand your code. Above the <code>.bb1</code> class add another comment that says <code>BACKGROUND BUILDINGS - &quot;bb&quot; stands for &quot;background building&quot;</code>. If you don’t remember, comments in CSS look like this: <code>/* Comment here */</code>.</p>
</li>
<li><p>Create a new variable in <code>:root</code> called <code>--window-color1</code> and give it a value of <code>black</code>. This will be a secondary color for the purple buildings.</p>
</li>
<li><p>Gradients in CSS are a way to transition between colors across the distance of an element. They are applied to the <code>background</code> property and the syntax looks like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">gradient-type(</span><br><span class="line">  color1,</span><br><span class="line">  color2</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>In the example, <code>color1</code> is solid at the top, <code>color2</code> is solid at the bottom, and in between it transitions evenly from one to the next. In <code>.bb1a</code>, add a <code>background</code> property below the <code>background-color</code> property. Set it as a gradient of type <code>linear-gradient</code> that uses <code>--building-color1</code> as the first color and <code>--window-color1</code> as the second.</p>
</li>
<li><p>You want to add the same gradient to the next two sections. Instead of doing that, create a new class selector called <code>bb1-window</code>, and move the <code>height</code> and <code>background</code> properties and values from <code>.bb1a</code> to the new class selector.</p>
</li>
<li><p>Add the new <code>bb1-window</code> class to the <code>.bb1a</code>, <code>.bb1b</code>, and <code>.bb1c</code> elements. This will apply the gradient to them.</p>
</li>
<li><p>You don’t need the <code>height</code> or <code>background-color</code> properties in <code>.bb1a</code>, <code>.bb1b</code> or <code>.bb1c</code> anymore, so go ahead and remove them.</p>
</li>
<li><p>Gradients can use as many colors as you want like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">gradient-type(</span><br><span class="line">  color1,</span><br><span class="line">  color2,</span><br><span class="line">  color3</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Add a <code>linear-gradient</code> to <code>.bb1d</code> with <code>orange</code> as the first color, <code>--building-color1</code> as the second, and <code>--window-color1</code> as the third. Remember to use the gradient on the <code>background</code> property.</p>
</li>
<li><p>It’s a little hidden behind the foreground buildings, but you can see the three color gradient there. Since you are using that now, remove the <code>background-color</code> property from <code>.bb1d</code>.</p>
</li>
<li><p>You can specify where you want a gradient transition to complete by adding it to the color like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">gradient-type(</span><br><span class="line">  color1,</span><br><span class="line">  color2 <span class="number">20%</span>,</span><br><span class="line">  color3</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Here, it will transition from <code>color1</code> to <code>color2</code> between <code>0%</code> and <code>20%</code> of the element and then transition to <code>color3</code> for the rest. Add <code>80%</code> to the <code>--building-color1</code> color of the <code>.bb1d</code> gradient so you can see it in action.</p>
</li>
<li><p>Remove <code>orange</code> from the <code>.bb1d</code> gradient and change the <code>80%</code> to <code>50%</code>. This will make <code>--building-color1</code> solid for the top half, and then transition to <code>--window-color1</code> for the bottom half.</p>
</li>
<li><p>Nest two new <code>div</code> elements within <code>.bb2</code>, give them the classes of <code>bb2a</code> and <code>bb2b</code>, in that order. These will be two sections for this building.</p>
</li>
<li><p>Give <code>.bb2b</code> a <code>width</code> and <code>height</code> of <code>100%</code> to make it fill the building container. You will add something on the top a little later.</p>
</li>
<li><p>Create a new variable in <code>:root</code> named <code>window-color2</code> with a value of <code>#8cd9b3</code>. This will be used as the secondary color for this building.</p>
</li>
<li><p>Gradient transitions often gradually change from one color to another. You can make the change a solid line like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">linear-gradient(</span><br><span class="line">  <span class="selector-tag">var</span>(<span class="attr">--first-color</span>) <span class="number">0%</span>,</span><br><span class="line">  <span class="selector-tag">var</span>(<span class="attr">--first-color</span>) <span class="number">40%</span>,</span><br><span class="line">  <span class="selector-tag">var</span>(<span class="attr">--second-color</span>) <span class="number">40%</span>,</span><br><span class="line">  <span class="selector-tag">var</span>(<span class="attr">--second-color</span>) <span class="number">80%</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Add a <code>linear-gradient</code> to <code>.bb2b</code> that uses <code>--building-color2</code> from <code>0%</code> to <code>6%</code> and <code>--window-color2</code> from <code>6%</code> to <code>9%</code>.</p>
</li>
<li><p>You can see the hard color change at the top of the section. Change the gradient type from <code>linear-gradient</code> to <code>repeating-linear-gradient</code> for this section. This will make the four colors of your gradient repeat until it gets to the bottom of the element; giving you some stripes, and saving you from having to add a bunch of elements to create them.</p>
</li>
<li><p>In the next few steps, you are going to use some tricks with CSS borders to turn the <code>.bb2a</code> section into a triangle at the top of the building. First, remove the <code>background-color</code> from <code>.bb2</code> since you don’t need it anymore.</p>
</li>
<li><p>Add these properties to <code>.bb2a</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">5vw</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">5vw</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1vw</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1vw</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">1vw</span> solid <span class="number">#999</span>;</span><br><span class="line"><span class="attribute">border-right</span>: <span class="number">1vw</span> solid <span class="number">#999</span>;</span><br></pre></td></tr></table></figure>

<p>After you add these, you can see how a thick border on an element gives you some angles where two sides meet. You are going to use that bottom border as the top of the building.</p>
</li>
<li><p>Next, remove the <code>width</code> and <code>height</code> from <code>.bb2a</code>, and change the <code>border-left</code> and <code>border-right</code> to use <code>5vw</code> instead of <code>1vw</code>. The element will now have zero size and the borders will come together in the middle.</p>
</li>
<li><p>Next, change the two <code>#999</code> of <code>.bb2a</code> to <code>transparent</code>. This will make the left and right borders invisible.</p>
</li>
<li><p>Remove the <code>margin</code> and <code>border-top</code> properties and values from <code>.bb2a</code> to turn it into a triangle for the top of the building.</p>
</li>
<li><p>Finally, on the <code>border-bottom</code> property of <code>.bb2a</code>, change the <code>1vw</code> to <code>5vh</code> and change the <code>#000</code> color to your <code>--building-color2</code> variable. There you go, now it looks good! At any time throughout this project, you can comment out or remove the <code>border</code> property you added to everything at the beginning to see what the buildings will look like when that gets removed at the end.</p>
</li>
<li><p>On to the next building! Create a new variable called <code>--window-color3</code> in <code>:root</code> and give it a value of <code>#d98cb3</code>. This will be the secondary color for the pink buildings.</p>
</li>
<li><p>So far, all the gradients you created have gone from top to bottom, that’s the default direction. You can specify another direction by adding it before your colors like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">gradient-type(</span><br><span class="line">  <span class="attribute">direction</span>,</span><br><span class="line">  color1,</span><br><span class="line">  color2</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Fill in <code>.bb3</code> with a <code>repeating-linear-gradient</code>. Use <code>90deg</code> for the direction, your <code>building-color3</code> for the first two colors, and <code>window-color3</code> at <code>15%</code> for the third. When you don’t specify a distance for a color, it will use the values that makes sense. In this case, the first two colors will default to <code>0%</code> and <code>7.5%</code> because it starts at <code>0%</code>, and <code>7.5%</code> is half of the <code>15%</code>.</p>
</li>
<li><p>Remove the <code>background-color</code> property and value from <code>.bb3</code> since you are using the gradient as the background now.</p>
</li>
<li><p>The next building will have three sections. Nest three <code>div</code> elements within <code>.bb4</code>. Give them the classes of <code>bb4a</code>, <code>bb4b</code> and <code>bb4c</code> in that order.</p>
</li>
<li><p>Give the new <code>div</code> elements these <code>width</code> and <code>height</code> values: <code>3%</code> and <code>10%</code> to <code>.bb4a</code>, <code>80%</code> and <code>5%</code> to <code>.bb4b</code>, and <code>100%</code> and <code>85%</code> to <code>.bb4c</code>.</p>
</li>
<li><p>Remove the <code>background-color</code> property and value from <code>.bb4</code>, and add it to the three new sections <code>.bb4a</code>, <code>.bb4b</code>, and <code>.bb4c</code>, so only the sections are filled.</p>
</li>
<li><p>You want <code>.bb4</code> to share the properties of <code>.bb1</code> that center the sections. Instead of duplicating that code, create a new class above the background building comment called <code>building-wrap</code>. Leave it empty for now; this class will be used in a few places to save you some coding.</p>
</li>
<li><p>Move the <code>display</code>, <code>flex-direction</code>, and <code>align-items</code> properties and values from <code>.bb1</code> to the new <code>building-wrap</code> class.</p>
</li>
<li><p>Add the new <code>building-wrap</code> class to the <code>.bb1</code> and <code>.bb4</code> elements. This will apply the centering properties to the buildings that need it.</p>
</li>
<li><p>Create a new variable called <code>--window-color4</code> in <code>:root</code> and give it a value of <code>#8cb3d9</code>. This will be the secondary color for the last background building.</p>
</li>
<li><p>Nest four new <code>div</code> elements within <code>.bb4c</code>, give them all the class of <code>bb4-window</code>. These will be windows for this building.</p>
</li>
<li><p>Give the <code>bb4-window</code> class a <code>width</code> of <code>18%</code>, a <code>height</code> of <code>90%</code>, and add your <code>--window-color4</code> variable as the <code>background-color</code>.</p>
</li>
<li><p>The windows are stacked on top of each other at the left of the section, behind the purple building. Add a new class below <code>.building-wrap</code> called <code>window-wrap</code>. Make <code>.window-wrap</code> a flexbox container, and use the <code>align-items</code> and <code>justify-content</code> properties to center its child elements vertically and evenly space them in their parent, respectively.</p>
</li>
<li><p>Add the new <code>window-wrap</code> class to the <code>.bb4c</code> element.</p>
</li>
<li><p>Looks good! On to the foreground buildings! Turn the <code>.fb1</code> building into three sections by nesting three new <code>div</code> elements within it. Give them the classes of <code>fb1a</code>, <code>fb1b</code> and <code>fb1c</code>, in that order.</p>
</li>
<li><p>Give <code>.fb1b</code> a <code>width</code> of <code>60%</code> and <code>height</code> of <code>10%</code>, and <code>.fb1c</code> a <code>width</code> of <code>100%</code> and <code>height</code> of <code>80%</code>.</p>
</li>
<li><p>Add the <code>building-wrap</code> class to the <code>.fb1</code> element to center the sections.</p>
</li>
<li><p>Move the <code>background-color</code> property and value from <code>.fb1</code> to <code>.fb1b</code>.</p>
</li>
<li><p>Don’t worry about the space at the bottom, everything will get moved down later when you add some height to the element at the top of the building.</p>
<p>Add a <code>repeating-linear-gradient</code> to <code>.fb1c</code> with a <code>90deg</code> angle, your <code>--building-color4</code> from <code>0%</code> to <code>10%</code> and <code>transparent</code> from <code>10%</code> to <code>15%</code>.</p>
</li>
<li><p>You can add multiple gradients to an element by separating them with a comma (<code>,</code>) like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">gradient1(</span><br><span class="line">  colors</span><br><span class="line">),</span><br><span class="line">gradient2(</span><br><span class="line">  colors</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Add a <code>repeating-linear-gradient</code> to <code>.fb1c</code> below the one that’s there; use your <code>--building-color4</code> from <code>0%</code> to <code>10%</code> and <code>--window-color4</code> from <code>10%</code> and <code>90%</code>. This will fill in behind the gradient you added last.</p>
</li>
<li><p>You’re going to use some more border tricks for the top section. Add a <code>border-bottom</code> with a value of <code>7vh solid var(--building-color4)</code> to <code>.fb1a</code>. This will put a <code>7vh</code> height border on the bottom. But since the element has zero size, it only shows up as a 2px wide line from the 1px border that is on all the elements.</p>
</li>
<li><p>When you increase the size of the left and right borders, the border on the bottom will expand to be the width of the combined left and right border widths. Add <code>2vw solid transparent</code> as the value of the <code>border-left</code> and <code>border-right</code> properties of <code>.fb1a</code>. They will be invisible, but it will make the border on the bottom <code>4vw</code> wide.</p>
</li>
<li><p>On to the next building! Nest two <code>div</code> elements within <code>.fb2</code> and give them classes of <code>fb2a</code> and <code>fb2b</code>, in that order.</p>
</li>
<li><p>Give <code>.fb2a</code> a <code>width</code> of <code>100%</code> and <code>.fb2b</code> a <code>width</code> of <code>100%</code> and <code>height</code> of <code>75%</code>.</p>
</li>
<li><p>Nest three <code>div</code> elements within <code>.fb2b</code> and give them a class of <code>fb2-window</code>. These will be windows for this section of the building.</p>
</li>
<li><p>Add your <code>window-wrap</code> class to <code>.fb2b</code> to position the new window elements.</p>
</li>
<li><p>Give the <code>.fb2-window</code> elements a <code>width</code> of <code>22%</code>, <code>height</code> of <code>100%</code>, and a <code>background-color</code> of your <code>--window-color3</code> variable.</p>
</li>
<li><p>Move the <code>background-color</code> property and value from <code>.fb2</code> to <code>.fb2b</code> to just color the section and not the container.</p>
</li>
<li><p>For <code>.fb2a</code>, add a <code>border-bottom</code> of <code>10vh solid var(--building-color3)</code>, and a <code>border-left</code> and <code>border-right</code> of <code>1vw solid transparent</code>. This time the border trick will create a trapezoid shape.</p>
</li>
<li><p>For the next building, nest four <code>div</code> elements within <code>.fb3</code> with classes of <code>fb3a</code>, <code>fb3b</code>, <code>fb3a</code> again, and <code>fb3b</code> again, in that order. This building will have four sections, and the top two will be almost the same as the bottom two.</p>
</li>
<li><p>Give the <code>.fb3a</code> element a <code>width</code> of <code>80%</code> and <code>height</code> of <code>15%</code>. Then give the <code>.fb3b</code> element a <code>width</code> of <code>100%</code> and <code>height</code> of <code>35%</code>.</p>
</li>
<li><p>Remove the <code>background-color</code> property and value from <code>.fb3</code>, and add them to <code>.fb3a</code> and <code>.fb3b</code>.</p>
</li>
<li><p>Add your <code>building-wrap</code> class to the <code>.fb3</code> element to center the sections.</p>
</li>
<li><p>Nest three new <code>div</code> elements in the first <code>.fb3a</code> element. Give them each a class of <code>fb3-window</code>. These will be windows for this section.</p>
</li>
<li><p>Give the <code>.fb3-window</code> elements a <code>width</code> of <code>25%</code>, a <code>height</code> of <code>80%</code>, and use your <code>--window-color1</code> variable as the <code>background-color</code> value.</p>
</li>
<li><p>Add your <code>window-wrap</code> class to the <code>.fb3a</code> element to center and space the windows.</p>
</li>
<li><p>With CSS variables you can change values without searching everywhere in the stylesheet. Change the <code>--window-color1</code> value to <code>#bb99ff</code>.</p>
</li>
<li><p>Only three more buildings to go. Nest two new <code>div</code> elements within the <code>.fb4</code> element and give them the classes of <code>fb4a</code> and <code>fb4b</code>, in that order. Remember that you sort of flipped the location of <code>.fb4</code> and <code>.fb5</code>, so it’s the rightmost purple building you are working on now.</p>
</li>
<li><p>Give <code>.fb4b</code> a <code>width</code> of <code>100%</code> and <code>height</code> of <code>89%</code>.</p>
</li>
<li><p>Add your <code>--building-color1</code> variable as value of the <code>background-color</code> property of <code>.fb4b</code>. Then, remove the <code>background-color</code> from <code>.fb4</code>.</p>
</li>
<li><p>Nest six <code>div</code> elements within <code>.fb4b</code> and give them all a class of <code>fb4-window</code>.</p>
</li>
<li><p>Give the <code>.fb4-window</code> elements a <code>width</code> of <code>30%</code>, <code>height</code> of <code>10%</code>, and <code>border-radius</code> of <code>50%</code>. These will make some circular windows for this building.</p>
</li>
<li><p>Fill in the windows with your secondary color for this building. Also add a <code>margin</code> of <code>10%</code> to give the windows some space.</p>
</li>
<li><p>The windows are stacked on top of each other on the rightmost purple building. Turn the building into a flexbox parent, and use the <code>flex-wrap</code> property to put the windows side by side, and push them down to a new row when they don’t fit.</p>
</li>
<li><p>This building is going to have another triangle on top. Give the top section a <code>border-top</code> of <code>5vh solid transparent</code>, and a <code>border-left</code> that is <code>8vw</code>, <code>solid</code>, and uses your building color variable as the color.</p>
</li>
<li><p>On to the next building! It’s the green one in the foreground. Give it a <code>repeating-linear-gradient</code> with your building color from <code>0%</code> to <code>5%</code>, and <code>transparent</code> from <code>5%</code> to <code>10%</code>.</p>
</li>
<li><p>Add another <code>repeating-linear-gradient</code> below the one you just added. Give it a <code>90deg</code> direction, use your building color from <code>0%</code> to <code>12%</code> and window color <code>12%</code> to <code>44%</code>. This will make a bunch of rectangle windows.</p>
</li>
<li><p>You don’t need the <code>background-color</code> for this building anymore so you can remove that property.</p>
</li>
<li><p>Finally! You made it to the last building! Add a repeating gradient to it with a <code>90deg</code> direction. Use the building color from <code>0%</code> to <code>10%</code> and <code>transparent</code> from <code>10%</code> to <code>30%</code>.</p>
</li>
<li><p>Add another repeating gradient to this building; make it the same as the one you just added, except don’t add the <code>90deg</code> direction and use your window color instead of the two <code>transparent</code> colors.</p>
</li>
<li><p>You can remove the <code>background-color</code> for this building now, since it isn’t needed.</p>
</li>
<li><p>Okay, the buildings are done. Go back to the <code>*</code> selector and remove the <code>border</code> you applied to everything at the beginning and the buildings will come together.</p>
</li>
<li><p>Add <code>sky</code> as a second class to the <code>.background-buildings</code> element. You are going to make a background for the skyline.</p>
</li>
<li><p>Give the <code>sky</code> class a <code>radial-gradient</code>. Use <code>#ffcf33</code> from <code>0%</code> to <code>20%</code>, <code>#ffff66</code> at <code>21%</code>, and <code>#bbeeff</code> at <code>100%</code>. This will add circular gradient to the background that will be your sun.</p>
</li>
<li><p>At the top of the sky gradient color list, where you would put a direction for the gradient; add <code>circle closest-corner at 15% 15%,</code>. This will move the start of the gradient to <code>15%</code> from the top and left. It will make it end at the <code>closest-corner</code> and it will maintain a <code>circle</code> shape. These are some keywords built into gradients to describe how it behaves.</p>
</li>
<li><p>A media query can be used to change styles based on certain conditions, and they look like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>Add an empty media query at the bottom of your stylesheet with a condition of <code>max-width: 1000px</code>. Styles added in here will take effect when the document size is 1000px wide or less.</p>
</li>
<li><p>Copy and paste your whole <code>sky</code> class along with all of its properties and values into the media query. You are going to make another color scheme for the skyline that changes it from day to night.</p>
<p>Note: You are going to need to scroll past the editable region to copy the class.</p>
</li>
<li><p>In the <code>sky</code> class of the media query, change the two <code>#ffcf33</code> color values to <code>#ccc</code>, the <code>#ffff66</code> to <code>#445</code>, and the <code>#bbeeff</code> to <code>#223</code>. Then you can resize your window to see the background change colors.</p>
</li>
<li><p>Add a <code>:root</code> selector to the top of your media query. Then redefine all four of the <code>--building-color</code> variables to use the value <code>#000</code> there.</p>
</li>
<li><p>Lastly, in the <code>:root</code> selector of the media query, redefine all four of the <code>--window-color</code> variables to use <code>#777</code>. When you’re done, resize the window and watch it go from day to night.</p>
<p>Variables are primarily used with colors, and that’s how you used them here. But they can be given any value and used on any property. Your project looks great!</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>City Skyline<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;background-buildings sky&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb1 building-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb1a bb1-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb1b bb1-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb1c bb1-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb1d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb2a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb2b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4 building-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4c window-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foreground-buildings&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb1 building-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb1a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb1b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb1c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb2a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb2b window-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb2-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb2-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb2-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3 building-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3a window-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb3b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4b&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb4-window&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fb6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--building-color1</span>: <span class="number">#aa80ff</span>;</span><br><span class="line">  <span class="attr">--building-color2</span>: <span class="number">#66cc99</span>;</span><br><span class="line">  <span class="attr">--building-color3</span>: <span class="number">#cc6699</span>;</span><br><span class="line">  <span class="attr">--building-color4</span>: <span class="number">#538cc6</span>;</span><br><span class="line">  <span class="attr">--window-color1</span>: <span class="number">#bb99ff</span>;</span><br><span class="line">  <span class="attr">--window-color2</span>: <span class="number">#8cd9b3</span>;</span><br><span class="line">  <span class="attr">--window-color3</span>: <span class="number">#d98cb3</span>;</span><br><span class="line">  <span class="attr">--window-color4</span>: <span class="number">#8cb3d9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.background-buildings</span>, <span class="selector-class">.foreground-buildings</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.building-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.window-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sky</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">      closest-corner circle at <span class="number">15%</span> <span class="number">15%</span>,</span><br><span class="line">      <span class="number">#ffcf33</span>,</span><br><span class="line">      <span class="number">#ffcf33</span> <span class="number">20%</span>,</span><br><span class="line">      <span class="number">#ffff66</span> <span class="number">21%</span>,</span><br><span class="line">      <span class="number">#bbeeff</span> <span class="number">100%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* BACKGROUND BUILDINGS - &quot;bb&quot; stands for &quot;background building&quot; */</span></span><br><span class="line"><span class="selector-class">.bb1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb1a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.bb1b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.bb1c</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb1d</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color1) <span class="number">50%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color1)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb1-window</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color1),</span><br><span class="line">      <span class="built_in">var</span>(--window-color1)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb2a</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">5vh</span> solid <span class="built_in">var</span>(--building-color2);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">5vw</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">5vw</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb2b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color2),</span><br><span class="line">      <span class="built_in">var</span>(--building-color2) <span class="number">6%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color2) <span class="number">6%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color2) <span class="number">9%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">55%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="number">90deg</span>,</span><br><span class="line">      <span class="built_in">var</span>(--building-color3),</span><br><span class="line">      <span class="built_in">var</span>(--building-color3),</span><br><span class="line">      <span class="built_in">var</span>(--window-color3) <span class="number">15%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">11%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">58%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb4a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb4b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color4);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.bb4c</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bb4-window</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--window-color4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* FOREGROUND BUILDINGS - &quot;fb&quot; stands for &quot;foreground building&quot; */</span></span><br><span class="line"><span class="selector-class">.fb1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb1a</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">7vh</span> solid <span class="built_in">var</span>(--building-color4);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">2vw</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">2vw</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb1b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color4);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.fb1c</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="number">90deg</span>,</span><br><span class="line">      <span class="built_in">var</span>(--building-color4),</span><br><span class="line">      <span class="built_in">var</span>(--building-color4) <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">15%</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color4),</span><br><span class="line">      <span class="built_in">var</span>(--building-color4) <span class="number">10%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color4) <span class="number">10%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color4) <span class="number">90%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb2a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">10vh</span> solid <span class="built_in">var</span>(--building-color3);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1vw</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1vw</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb2b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb2-window</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">22%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--window-color3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35%</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.fb3a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color1);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.fb3b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb3-window</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--window-color1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb4a</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">5vh</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">8vw</span> solid <span class="built_in">var</span>(--building-color1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb4b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">89%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--building-color1);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb4-window</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--window-color1);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb5</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">33%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color2),</span><br><span class="line">      <span class="built_in">var</span>(--building-color2) <span class="number">5%</span>,</span><br><span class="line">      transparent <span class="number">5%</span>,</span><br><span class="line">      transparent <span class="number">10%</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="number">90deg</span>,</span><br><span class="line">      <span class="built_in">var</span>(--building-color2),</span><br><span class="line">      <span class="built_in">var</span>(--building-color2) <span class="number">12%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color2) <span class="number">12%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color2) <span class="number">44%</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fb6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">9%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">38%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="number">90deg</span>,</span><br><span class="line">      <span class="built_in">var</span>(--building-color3),</span><br><span class="line">      <span class="built_in">var</span>(--building-color3) <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">10%</span>,</span><br><span class="line">      transparent <span class="number">30%</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="built_in">var</span>(--building-color3),</span><br><span class="line">      <span class="built_in">var</span>(--building-color3) <span class="number">10%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color3) <span class="number">10%</span>,</span><br><span class="line">      <span class="built_in">var</span>(--window-color3) <span class="number">30%</span></span><br><span class="line">    );</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">1000px</span>) &#123; </span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--building-color1</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--building-color2</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--building-color3</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attr">--building-color4</span>: <span class="number">#000</span>;</span><br><span class="line">      <span class="attr">--window-color1</span>: <span class="number">#777</span>;</span><br><span class="line">  <span class="attr">--window-color2</span>: <span class="number">#777</span>;</span><br><span class="line">  <span class="attr">--window-color3</span>: <span class="number">#777</span>;</span><br><span class="line">  <span class="attr">--window-color4</span>: <span class="number">#777</span>;</span><br><span class="line">  &#125; </span><br><span class="line"> <span class="selector-class">.sky</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">        closest-corner circle at <span class="number">15%</span> <span class="number">15%</span>,</span><br><span class="line">        <span class="number">#ccc</span>,</span><br><span class="line">        <span class="number">#ccc</span> <span class="number">20%</span>,</span><br><span class="line">        <span class="number">#445</span> <span class="number">21%</span>,</span><br><span class="line">        <span class="number">#223</span> <span class="number">100%</span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(十四)</title>
    <url>/responsive-web-dedign-%E5%8D%81%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-CSS-Animation-by-Building-a-Ferris-Wheel"><a href="#Learn-CSS-Animation-by-Building-a-Ferris-Wheel" class="headerlink" title="Learn CSS Animation by Building a Ferris Wheel"></a>Learn CSS Animation by Building a Ferris Wheel</h4><span id="more"></span>



<ol>
<li><p>Begin with the standard boilerplate. Add your <code>DOCTYPE</code> declaration, your <code>html</code> element with the language set to English, your <code>head</code> and <code>body</code> elements.</p>
<p>Add your <code>meta</code> element for the correct <code>charset</code>, your <code>title</code> element, and a <code>link</code> element for the <code>./styles.css</code> file.</p>
<p>Set the <code>title</code> to <code>Ferris Wheel</code>.</p>
</li>
<li><p>Add a <code>div</code> within your <code>body</code> element and give it a <code>class</code> of <code>wheel</code>.</p>
<p>Inside your new <code>div</code>, add six <code>span</code> elements with a <code>class</code> set to <code>line</code>, and six <code>div</code> elements with a <code>class</code> set to <code>cabin</code>.</p>
</li>
<li><p>Create a selector for your <code>.wheel</code> element. Start by setting the <code>border</code> to <code>2px solid black</code>, the <code>border-radius</code> to <code>50%</code>, and the <code>margin-left</code> to <code>50px</code>.</p>
</li>
<li><p>Set the <code>position</code> property of the <code>.wheel</code> selector to <code>absolute</code>. Set the <code>height</code> and <code>width</code> both to <code>55vw</code>.</p>
</li>
<li><p>Give your <code>.wheel</code> selector a <code>max-height</code> and <code>max-width</code> property both set to <code>500px</code>.</p>
</li>
<li><p>Create a selector for your <code>.line</code> elements. Start by setting the <code>background-color</code> to <code>black</code>, the <code>width</code> to <code>50%</code>, and the <code>height</code> to <code>2px</code>.</p>
</li>
<li><p>Set the <code>.line</code> selector’s <code>position</code> property to <code>absolute</code>, the <code>left</code> property to <code>50%</code>, and the <code>top</code> property to <code>50%</code>.</p>
</li>
<li><p>The <code>transform-origin</code> property is used to set the point around which a CSS transformation is applied. For example, when performing a <code>rotate</code> (which you will do later in this project), the <code>transform-origin</code> determines around which point the element is rotated.</p>
<p>Give the <code>.line</code> selector a <code>transform-origin</code> property of <code>0% 0%</code>. This will offset the origin point by <code>0%</code> from the left and <code>0%</code> from the top, setting it to the top left corner of the element.</p>
</li>
<li><p>Create a selector to target your second <code>.line</code> element. Set the <code>transform</code> property to <code>rotate(60deg)</code>.</p>
<p>Remember that the <code>transform</code> property allows you to manipulate the shape of an element. In this case, using the <code>rotate(60deg)</code> value will rotate the element around its <code>transform-origin</code> point by 60 degrees clockwise.</p>
</li>
<li><p>Using the same pattern, create a separate selector for the third <code>.line</code>, the fourth <code>.line</code>, the fifth <code>.line</code>, and the sixth <code>.line</code>.</p>
<p>Set the <code>transform</code> property for the third <code>.line</code> to <code>rotate(120deg)</code>, the fourth to <code>rotate(180deg)</code>, the fifth to <code>rotate(240deg)</code>, and the sixth to <code>rotate(300deg)</code>.</p>
</li>
<li><p>Create a <code>.cabin</code> selector. Set the <code>background-color</code> to <code>red</code>, the <code>width</code> to <code>20%</code>, and the <code>height</code> to <code>20%</code>.</p>
</li>
<li><p>Give the <code>.cabin</code> a <code>position</code> of <code>absolute</code>, and a <code>border</code> of <code>2px solid</code>.</p>
</li>
<li><p>Set the <code>.cabin</code> to have a <code>transform-origin</code> property of <code>50% 0%</code>. This will set the origin point to be offset <code>50%</code> from the left and <code>0%</code> from the top, placing it in the middle of the top edge of the element.</p>
</li>
<li><p>Time to position the cabins around the wheel. Select the first <code>.cabin</code> element. Set the <code>right</code> property to <code>-8.5%</code> and the <code>top</code> property to <code>50%</code>.</p>
</li>
<li><p>Continuing the pattern, select the following <code>.cabin</code> elements and apply the specific rules to them:</p>
<ul>
<li>The second <code>.cabin</code> should have the <code>right</code> property set to <code>17%</code> and the <code>top</code> property set to <code>93.5%</code>.</li>
<li>The third <code>.cabin</code> should have the <code>right</code> property set to <code>67%</code> and the <code>top</code> property set to <code>93.5%</code>.</li>
<li>The fourth <code>.cabin</code> should have the <code>left</code> property set to <code>-8.5%</code> and the <code>top</code> property set to <code>50%</code>.</li>
<li>The fifth <code>.cabin</code> should have the <code>left</code> property set to <code>17%</code> and the <code>top</code> property set to <code>7%</code>.</li>
<li>The sixth <code>.cabin</code> should have the <code>right</code> property set to <code>17%</code> and the <code>top</code> property set to <code>7%</code>.</li>
</ul>
</li>
<li><p>The <code>@keyframes</code> at-rule is used to define the flow of a CSS animation. Within the <code>@keyframes</code> rule, you can create selectors for specific points in the animation sequence, such as <code>0%</code> or <code>25%</code>, or use <code>from</code> and <code>to</code> to define the start and end of the sequence.</p>
<p><code>@keyframes</code> rules require a name to be assigned to them, which you use in other rules to reference. For example, the <code>@keyframes freeCodeCamp &#123; &#125;</code> rule would be named <code>freeCodeCamp</code>.</p>
<p>Time to start animating. Create a <code>@keyframes</code> rule named <code>wheel</code>.</p>
</li>
<li><p>You now need to define how your animation should start. To do this, create a <code>0%</code> rule within your <code>@keyframes wheel</code> rule. The properties you set in this nested selector will apply at the beginning of your animation.</p>
<p>As an example, this would be a <code>12%</code> rule:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> freecodecamp &#123;</span><br><span class="line">  <span class="number">12%</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Give the <code>0%</code> rule a <code>transform</code> property set to <code>rotate(0deg)</code>. This will start the animation with no rotation.</p>
</li>
<li><p>Now give the <code>@keyframes wheel</code> rule a <code>100%</code> selector. Within that, set the <code>transform</code> to <code>rotate(360deg)</code>. By doing this, your animation will now complete a full rotation.</p>
</li>
<li><p>The <code>animation-name</code> property is used to link a <code>@keyframes</code> rule to a CSS selector. The value of this property should match the name of the <code>@keyframes</code> rule. Give your <code>.wheel</code> selector an <code>animation-name</code> property set to <code>wheel</code>.</p>
<p>The <code>animation-duration</code> property is used to set how long the animation should sequence to complete. The time should be specified in either seconds (<code>s</code>) or milliseconds (<code>ms</code>). Set your <code>.wheel</code> selector to have an <code>animation-duration</code> property of <code>10s</code>.</p>
</li>
<li><p>The <code>animation-iteration-count</code> property sets how many times your animation should repeat. This can be set to a number, or to <code>infinite</code> to indefinitely repeat the animation. Your Ferris wheel should never stop, so set the <code>.wheel</code> selector to have an <code>animation-iteration-count</code> of <code>infinite</code>.</p>
<p>The <code>animation-timing-function</code> property sets how the animation should progress over time. There are a few different values for this property, but you want the Ferris wheel animation to run at the same rate from start to finish. Set the <code>animation-timing-function</code> to <code>linear</code> in your <code>.wheel</code> selector.</p>
</li>
<li><p>Create another <code>@keyframes</code> rule with the name <code>cabins</code>. Use the same properties as your <code>@keyframes wheel</code>, copying both the <code>0%</code> and <code>100%</code> rules, but set the <code>transform</code> property of the <code>100%</code> selector to <code>rotate(-360deg)</code>.</p>
</li>
<li><p>With your <code>.wheel</code> selector, you created four different properties to control the animation. For your <code>.cabin</code> selector, you can use the <code>animation</code> property to set these all at once.</p>
<p>Set the <code>animation</code> property of the <code>.cabin</code> rule to <code>cabins 10s linear infinite</code>. This will set the <code>animation-name</code>, <code>animation-duration</code>, <code>animation-timing-function</code>, and <code>animation-iteration-count</code> properties in that order.</p>
</li>
<li><p>To make your cabin animation seem more like a natural swinging motion, you can use the <code>ease-in-out</code> timing function. This setting will tell the animation to start and end at a slower pace, but move more quickly in the middle of the cycle.</p>
<p>Replace <code>linear</code> to <code>ease-in-out</code> in the <code>.cabin</code> selector.</p>
</li>
<li><p>You can use <code>@keyframes</code> rules to control more than just the transformation of an element. In the <code>0%</code> selector of your <code>@keyframes cabins</code>, set the <code>background-color</code> to <code>yellow</code>.</p>
</li>
<li><p>Between the <code>0%</code> and <code>100%</code> selectors, add a <code>50%</code> selector. This will apply in the middle of the animation cycle. Set the <code>background-color</code> to <code>purple</code>.</p>
</li>
<li><p>Because the animation is on an infinite loop and the start and end colors are not the same, the transition appears jerky when it switches back to yellow from red.</p>
<p>To start fixing this, remove the <code>background-color</code> from your <code>0%</code> selector.</p>
</li>
<li><p>Create a new <code>25%</code> selector between your <code>0%</code> and <code>50%</code> selectors. Give this new selector the <code>background-color</code> property set to <code>yellow</code>.</p>
</li>
<li><p>Finally, create a new <code>75%</code> selector between your <code>50%</code> and <code>100%</code> selectors. Give this new selector a <code>background-color</code> property set to <code>yellow</code>.</p>
<p>With that, your animation is much smoother and your Ferris wheel is complete.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ferris Wheel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wheel&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cabin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cabin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cabin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cabin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cabin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cabin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wheel</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">55vw</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">55vw</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">animation-name</span>: wheel;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">240deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">300deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cabin</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: cabins <span class="number">10s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cabin</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">8.5%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cabin</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">17%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">93.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cabin</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">67%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">93.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cabin</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">8.5%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cabin</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">17%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">7%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cabin</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">17%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">7%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> wheel &#123;</span><br><span class="line">   <span class="number">0%</span> &#123;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="number">100%</span> &#123;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">@keyframes</span> cabins &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: purple;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(十五)</title>
    <url>/responsive-web-dedign-%E5%8D%81%E4%BA%94/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-CSS-Transforms-by-Building-a-Penguin"><a href="#Learn-CSS-Transforms-by-Building-a-Penguin" class="headerlink" title="Learn CSS Transforms by Building a Penguin"></a>Learn CSS Transforms by Building a Penguin</h4><span id="more"></span>

<ol>
<li><p>You will be building a happy Flappy Penguin, and further exploring CSS transforms and animations in the process.</p>
<p>Begin with your basic HTML boilerplate. Include the <code>DOCTYPE</code> declaration, <code>html</code> element with a language set to English, the appropriate <code>meta</code> tags, a <code>head</code>, <code>body</code>, and <code>title</code> element. Also, link your stylesheet to the page.</p>
</li>
<li><p>Target the <code>body</code> element to set the <code>background</code> to a linear gradient angled 45 degrees clockwise, starting at <code>rgb(118, 201, 255)</code> and ending at <code>rgb(247, 255, 222)</code>.</p>
</li>
<li><p>Normalise your page’s sizing, by removing the <code>body</code> element’s <code>margin</code> and <code>padding</code>.</p>
</li>
<li><p>Normalise your page, by setting the <code>width</code> to <code>100%</code>, and <code>height</code> to <code>100vh</code>.</p>
</li>
<li><p>Remove both the horizontal and vertical scrollbars, using only one property.</p>
</li>
<li><p>Within the <code>body</code>, add a <code>div</code> with a <code>class</code> of <code>ground</code>.</p>
</li>
<li><p>Target the <code>.ground</code> element, and set its <code>width</code> to take up the full width of the viewport. Then, set the <code>height</code> to <code>400px</code>.</p>
</li>
<li><p>Give the <code>.ground</code> element a <code>background</code> with a linear gradient angled 90 degrees clockwise, starting at <code>rgb(88, 175, 236)</code> and ending at <code>rgb(182, 255, 255)</code>.</p>
</li>
<li><p>As the <code>.ground</code> element will be third in the stacking context of the page layout, set its <code>z-index</code> to <code>3</code>, and <code>position</code> to <code>absolute</code>.</p>
</li>
<li><p>Above the <code>.ground</code> element, add a <code>div</code> with a <code>class</code> of <code>penguin</code>. This <code>div</code> will contain Flappy Penguin.</p>
</li>
<li><p>Target the <code>.penguin</code> element, and set its <code>width</code> and <code>height</code> to <code>300px</code>.</p>
</li>
<li><p>Use the <code>margin</code> property to horizontally center the <code>.penguin</code> element, and set the <code>margin-top</code> to <code>75px</code>.</p>
</li>
<li><p>To create some scenery in the background, you will add two mountains.</p>
<p>Above the <code>.penguin</code> element, add a <code>div</code> with a <code>class</code> of <code>left-mountain</code>.</p>
</li>
<li><p>Target the <code>.left-mountain</code> element, and set its <code>width</code> and <code>height</code> to <code>300px</code>. Then, set the <code>background</code> to a linear gradient starting at <code>rgb(203, 241, 228)</code> and ending at <code>rgb(80, 183, 255)</code>.</p>
</li>
<li><p>To prevent the mountain from pushing the <code>.ground</code> element, adjust its <code>position</code> to prevent it from taking up space in the page layout.</p>
</li>
<li><p>To make the mountain look more like a mountain, you can use the <code>skew</code> transform function, which takes two arguments. The first being an angle to shear the x-axis by, and the second being an angle to shear the y-axis by.</p>
<p>Use the <code>transform</code> property to skew the mountain by <code>0deg</code> in the x-axis and <code>44deg</code> in the y-axis.</p>
</li>
<li><p>Set the stack level of the mountain element such that it remains directly behind the <code>.ground</code> element.</p>
</li>
<li><p>To overlap the mountain and <code>.ground</code> elements better, give the mountain a <code>margin-top</code> of <code>100px</code>, and the <code>.ground</code> element a <code>margin-top</code> of <code>-58px</code>.</p>
</li>
<li><p>To give the effect of a mountain range, add another mountain, by creating a new <code>div</code> immediately after <code>.left-mountain</code>, and give the new <code>div</code> the <code>class</code> of <code>back-mountain</code>.</p>
</li>
<li><p>Target the <code>.back-mountain</code> element, and set its <code>width</code> and <code>height</code> to <code>300px</code>. Then, set the <code>background</code> to a linear gradient starting at <code>rgb(203, 241, 228)</code> and ending at <code>rgb(47, 170, 255)</code>.</p>
</li>
<li><p>Set the <code>position</code> property of the <code>.back-mountain</code> to prevent it from taking up space in the page layout.</p>
</li>
<li><p>Change the stack level of the <code>.back-mountain</code> element such that it is directly behind the <code>.left-mountain</code> element.</p>
</li>
<li><p>Rotate the <code>.back-mountain</code> element by <code>45deg</code> clockwise. Then, give it a <code>left</code> property of <code>110px</code>, and a <code>top</code> property of <code>225px</code>.</p>
</li>
<li><p>Rotate the <code>.back-mountain</code> element by <code>45deg</code> clockwise. Then, give it a <code>left</code> property of <code>110px</code>, and a <code>top</code> property of <code>225px</code>.</p>
</li>
<li><p>Give the <code>.sun</code> element a <code>width</code> and <code>height</code> of <code>200px</code>, and a <code>background-color</code> of <code>yellow</code>.</p>
</li>
<li><p>Set the <code>position</code> property of the sun to prevent it from taking up space in the page layout, and set the <code>border-radius</code> such that the sun’s shape is a circle.</p>
</li>
<li><p>Position the sun in the top right corner of the screen such that <code>75px</code> of its top and right edges are off screen.</p>
</li>
<li><p>Your penguin will consist of two main sections: the head, and the body.</p>
<p>Within <code>.penguin</code>, add two new <code>div</code> elements. The first with a <code>class</code> of <code>penguin-head</code>, and the second with a <code>class</code> of <code>penguin-body</code>.</p>
</li>
<li><p>Change the stack level of the <code>.penguin</code> element such that it appears in front of the <code>.ground</code> element, and give it a <code>position</code> of <code>relative</code>.</p>
</li>
<li><p>Target the <code>.penguin-head</code> element, and give it a <code>width</code> half of its parent’s, and a <code>height</code> of <code>45%</code>. Then, set the <code>background</code> to a linear gradient at <code>45deg</code> starting at <code>gray</code>, and ending at <code>rgb(239, 240, 228)</code>.</p>
</li>
<li><p><em>Most</em> penguins do not have a square head.</p>
<p>Give the penguin a slightly oval head by setting the radius of the top corners to <code>70%</code> and the radius of the bottom corners to <code>65%</code>.</p>
</li>
<li><p>Target the <code>.penguin-body</code> element, and give it a <code>width</code> of <code>53%</code>, and a <code>height</code> of <code>45%</code>. Then, set the <code>background</code> to a linear gradient at <code>45deg</code>, <code>rgb(134, 133, 133)</code> from <code>0%</code>, <code>rgb(234, 231, 231)</code> from <code>25%</code>, and <code>white</code> from <code>67%</code>.</p>
</li>
<li><p>Another interesting fact about penguins is that they do not have square bodies.</p>
<p>Use the <code>border-radius</code> property with a value of <code>80% 80% 100% 100%</code>, to give the penguin a slightly rounded body.</p>
</li>
<li><p>Target all descendent elements of the <code>.penguin</code> element, and give them a <code>position</code> of <code>absolute</code>.</p>
</li>
<li><p>Position the <code>.penguin-head</code> element <code>10%</code> from the top, and <code>25%</code> from the left of its parent.</p>
</li>
<li><p>Position the <code>.penguin-body</code> element <code>40%</code> from the top, and <code>23.5%</code> from the left of its parent.</p>
</li>
<li><p>Position the <code>.penguin-body</code> element <code>40%</code> from the top, and <code>23.5%</code> from the left of its parent.</p>
</li>
<li><p>To give the penguin body a crest, create a pseudo-element that is the first child of the <code>.penguin-body</code> element. Set the <code>content</code> property of the pseudo-element to an empty string.</p>
</li>
<li><p>Position the pseudo-element relative to its closest positioned ancestor.</p>
</li>
<li><p>Give the pseudo-element a <code>width</code> half that of its parent, a <code>height</code> of <code>45%</code>, and a <code>background-color</code> of <code>gray</code>.</p>
</li>
<li><p>Position the pseudo-element <code>10%</code> from the top and <code>25%</code> from the left of its parent.</p>
</li>
<li><p>Position the pseudo-element <code>10%</code> from the top and <code>25%</code> from the left of its parent.</p>
</li>
<li><p>Increase the pseudo-element’s transparency by <code>30%</code>.</p>
</li>
<li><p>Start the penguin’s face, by adding two <code>div</code> elements within <code>.penguin-head</code>, and giving them both a <code>class</code> of <code>face</code>.</p>
</li>
<li><p>Give the <code>.face</code> elements a <code>width</code> of <code>60%</code>, a <code>height</code> of <code>70%</code>, and a <code>background-color</code> of <code>white</code>.</p>
</li>
<li><p>Make the top corners of the <code>.face</code> elements have a radius of <code>70%</code>, and the bottom corners have a radius of <code>60%</code>.</p>
</li>
<li><p>Position the <code>.face</code> elements so that they are <code>15%</code> from the top.</p>
</li>
<li><p>Currently, the two <code>.face</code> elements are on top of each other.</p>
<p>Fix this, by adding a <code>class</code> of <code>left</code> to the first <code>.face</code> element, and a <code>class</code> of <code>right</code> to the second <code>.face</code> element.</p>
</li>
<li><p>Target the <code>.face</code> element with the <code>left</code> class, and position it <code>5%</code> left of its parent.</p>
</li>
<li><p>Target the <code>.face</code> element with the <code>right</code> class, and position it <code>5%</code> right of its parent.</p>
</li>
<li><p>Target the <code>.face</code> element with the <code>right</code> class, and position it <code>5%</code> right of its parent.</p>
</li>
<li><p>Target the <code>.chin</code> element, and give it a <code>width</code> of <code>90%</code>, <code>height</code> of <code>70%</code>, and <code>background-color</code> of <code>white</code>.</p>
</li>
<li><p>Position the <code>.chin</code> element such that it is <code>25%</code> from the top, and <code>5%</code> from the left of its parent. Then, give the top corners a radius of <code>70%</code>, and the bottom corners a radius of <code>100%</code>.</p>
</li>
<li><p>So far, the <code>.face</code> and <code>.chin</code> elements have the same <code>background-color</code>.</p>
<p>Create a custom CSS property called <code>--penguin-face</code>, and set it to <code>white</code>.</p>
</li>
<li><p>Where relevant, replace property values with your <code>--penguin-face</code> variable.</p>
</li>
<li><p>Below the <code>.chin</code> element, add two <code>div</code> elements each with a <code>class</code> of <code>eye</code>. Also, give the first <code>.eye</code> element a <code>class</code> of <code>left</code>, and the second <code>.eye</code> element a <code>class</code> of <code>right</code>.</p>
</li>
<li><p>Target the <code>.eye</code> elements, and give them a <code>width</code> of <code>15%</code>, <code>height</code> of <code>17%</code>, and <code>background-color</code> of <code>black</code>.</p>
</li>
<li><p>Position the <code>.eye</code> elements <code>45%</code> from the top of their parent, and give all corners a radius of <code>50%</code>.</p>
</li>
<li><p>Target the <code>.eye</code> element with the <code>left</code> class, and position it <code>25%</code> from the left of its parent. Then, target the <code>.eye</code> element with the <code>right</code> class, and position it <code>25%</code> from the right of its parent.</p>
</li>
<li><p>Within each <code>.eye</code> element, add a <code>div</code> with a <code>class</code> of <code>eye-lid</code>.</p>
</li>
<li><p>Target the <code>.eye-lid</code> elements, and give them a <code>width</code> of <code>150%</code>, <code>height</code> of <code>100%</code>, and <code>background-color</code> of <code>--penguin-face</code>.</p>
</li>
<li><p>Position the <code>.eye-lid</code> elements <code>25%</code> from the top, and <code>-23%</code> from the left of their parents. Then, give all corners a radius of <code>50%</code>.</p>
</li>
<li><p>Below the <code>.eye.right</code> element, add two <code>div</code> elements each with a <code>class</code> of <code>blush</code>. Also, give the first <code>.blush</code> element a <code>class</code> of <code>left</code>, and the second <code>.blush</code> element a <code>class</code> of <code>right</code>.</p>
</li>
<li><p>Target the <code>.blush</code> elements, and give them a <code>width</code> of <code>15%</code>, <code>height</code> of <code>10%</code>, and <code>background-color</code> of <code>pink</code>.</p>
</li>
<li><p>Position the <code>.blush</code> elements <code>65%</code> from the top of their parent, and give all corners a radius of <code>50%</code>.</p>
</li>
<li><p>Target the <code>.blush</code> element with a <code>class</code> of <code>left</code>, and position it <code>15%</code> left of its parent. Then, target the <code>.blush</code> element with a <code>class</code> of <code>right</code>, and position it <code>15%</code> right of its parent.</p>
</li>
<li><p>Below the <code>.blush.right</code> element, add two <code>div</code> elements each with a <code>class</code> of <code>beak</code>. Also, give the first <code>.beak</code> element a <code>class</code> of <code>top</code>, and the second <code>.beak</code> element a <code>class</code> of <code>bottom</code>.</p>
</li>
<li><p>Target the <code>.beak</code> elements, and give them a <code>height</code> of <code>10%</code>, <code>background-color</code> of <code>orange</code>, and give all corners a radius of <code>50%</code>.</p>
</li>
<li><p>Target the <code>.beak</code> element with a <code>class</code> of <code>top</code>, give it a <code>width</code> of <code>20%</code>, and position it <code>60%</code> from the top, and <code>40%</code> from the left of its parent.</p>
</li>
<li><p>Target the <code>.beak</code> element with a <code>class</code> of <code>bottom</code>, and give it a <code>width</code> <code>4%</code> smaller than <code>.beak.top</code>, <code>5%</code> further from the top, and <code>2%</code> further from the left of its parent than <code>.beak.top</code>.</p>
</li>
<li><p>The penguin’s body looks a bit plain. Spruce him up by adding a <code>div</code> element with a <code>class</code> of <code>shirt</code>, immediately before the <code>.penguin-body</code> element.</p>
</li>
<li><p>Within the <code>.shirt</code> element, add a <code>div</code> with the following emoji as content: 💜</p>
</li>
<li><p>Within <code>.shirt</code>, after the <code>div</code> element, add a <code>p</code> element with the following content: <code>I CSS</code></p>
</li>
<li><p>Target the <code>.shirt</code> element, and set its <code>font-size</code> to <code>25px</code>, <code>font-family</code> to <code>Helvetica</code> with a fallback of <code>sans-serif</code>, and <code>font-weight</code> to <code>bold</code>.</p>
</li>
<li><p>In some browsers, the <em>heart</em> emoji may look slightly different from the previous step. This is because some of the character’s properties were overridden by the <code>font-weight</code> style of <code>bold</code>.</p>
<p>Fix this, by targeting the <code>div</code> with the heart emoji, and setting its <code>font-weight</code> to its original value.</p>
</li>
<li><p>Position the <code>div</code> with the heart emoji <code>22.5px</code> from the top, and <code>12px</code> from the left of its parent.</p>
</li>
<li><p>Position the <code>.shirt</code> element <code>165px</code> from the top, and <code>127.5px</code> from the left of its parent. Then, increase its stacking order such that it appears above the <code>.penguin-body</code> element.</p>
</li>
<li><p>For the shirt’s final touch, set the <code>color</code> to <code>#6a6969</code>.</p>
</li>
<li><p>Fun fact: Penguins cannot stand without at least two feet.</p>
<p>Within the <code>.penguin-body</code> element, add two <code>div</code> elements each with a <code>class</code> of <code>foot</code>. Give the first <code>.foot</code> a <code>class</code> of <code>left</code>, and the second <code>.foot</code> a <code>class</code> of <code>right</code>.</p>
</li>
<li><p>Target the <code>.foot</code> elements, and give them a <code>width</code> of <code>15%</code>, <code>height</code> of <code>30%</code>, and <code>background-color</code> of <code>orange</code>.</p>
</li>
<li><p>Position the <code>.foot</code> elements <code>85%</code> from the top of their parent, and give all corners a radius of <code>50%</code>.</p>
</li>
<li><p>The penguin’s beak and feet share the same <code>color</code>.</p>
<p>Create a new custom CSS variable named <code>--penguin-picorna</code>, and replace all relavant property values with it</p>
</li>
<li><p>Target the <code>.foot</code> element with a <code>class</code> of <code>left</code>, and position it <code>25%</code> left of its parent. Then, target the <code>.foot</code> element with a <code>class</code> of <code>right</code>, and position it <code>25%</code> right of its parent.</p>
</li>
<li><p>To make the penguin’s feet look more <em>penguiny</em>, rotate the left foot by <code>80deg</code>, and the right by <code>-80deg</code>.</p>
</li>
<li><p>Change the stacking order of the <code>.foot</code> elements such that they appear beneath the <code>.penguin-body</code> element.</p>
</li>
<li><p>Fun fact: Penguins cannot fly without wings.</p>
<p>Within <code>.penguin-body</code>, before the <code>.foot</code> elements, add two <code>div</code> elements each with a <code>class</code> of <code>arm</code>. Give the first <code>.arm</code> a <code>class</code> of <code>left</code>, and the second <code>.arm</code> a <code>class</code> of <code>right</code>.</p>
</li>
<li><p>Fun fact: Penguins cannot fly without wings.</p>
<p>Within <code>.penguin-body</code>, before the <code>.foot</code> elements, add two <code>div</code> elements each with a <code>class</code> of <code>arm</code>. Give the first <code>.arm</code> a <code>class</code> of <code>left</code>, and the second <code>.arm</code> a <code>class</code> of <code>right</code>.</p>
</li>
<li><p>Create a custom CSS variable named <code>--penguin-skin</code>, and set it to <code>gray</code>. Then, replace all relevant property values with it.</p>
</li>
<li><p>Target the <code>.arm</code> element with a <code>class</code> of <code>left</code>, and position it <code>35%</code> from the top, and <code>5%</code> from the left of its parent. Then, target the <code>.arm</code> element with a <code>class</code> of <code>right</code>, and position it <code>0%</code> from the top, and <code>-5%</code> from the right of its parent.</p>
</li>
<li><p>Within the <code>.arm.left</code> selector, alter the origin of the <code>transform</code> function to be the top left corner of its parent.</p>
</li>
<li><p>To keep the linear gradient on the correct side of the penguin’s left arm, first rotate it by <code>130deg</code>, then invert the x-axis.</p>
</li>
<li><p>Rotate the right arm by <code>45deg</code> counterclockwise.</p>
</li>
<li><p>Fun fact: Most, if not all, flippers are not naturally rectangles.</p>
<p>Give the <code>.arm</code> elements’ top-left, top-right, and bottom-right corners a radius of <code>30%</code>, and the bottom-left corner a radius of <code>120%</code>.</p>
</li>
<li><p>Change the <code>.arm</code> elements’ stacking order such that they appear behind the <code>.penguin-body</code> element.</p>
</li>
<li><p>Now, you are going to use CSS animations to make the penguin wave.</p>
<p>Define a new <code>@keyframes</code> named <code>wave</code>.</p>
</li>
<li><p>Give <code>wave</code> four waypoints starting at <code>10%</code>, and incrementing by <code>10%</code>.</p>
</li>
<li><p>Within the first waypoint, rotate to <code>110deg</code>, and retain the scaling of the left arm.</p>
</li>
<li><p>Within the second waypoint, rotate to <code>130deg</code>, and retain the scaling of the left arm.</p>
</li>
<li><p>For the third and fourth waypoints, repeat the <code>transform</code> pattern once more.</p>
</li>
<li><p>Use the <code>wave</code> animation on the left arm. Have the animation last <code>3s</code>, infinitely iterate, and have a linear timing function.</p>
</li>
<li><p>Target the <code>.penguin</code> element when it is active, and increase its size by <code>50%</code> in both dimensions.</p>
</li>
<li><p>When you activate the <code>.penguin</code> element, it might look as though you can drag it around. This is not true.</p>
<p>Indicate this to users, by giving the active element a <code>cursor</code> property of <code>not-allowed</code>.</p>
</li>
<li><p>Change the <code>.penguin</code> element’s <code>transition</code> behavior during transformation to have a duration of <code>1s</code>, a timing function of <code>ease-in-out</code>, and a delay of <code>0ms</code>.</p>
</li>
<li><p>Finally, calculate the <code>height</code> of the <code>.ground</code> element to be the height of the viewport minus the height of the <code>.penguin</code> element.</p>
<p>Congratulations! You have completed the Responsive Web Design certification.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Penguin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-mountain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back-mountain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sun&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;face left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;face right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eye left&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eye-lid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eye right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eye-lid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blush left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blush right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;beak top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;beak bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shirt&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>💜<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>I CSS<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;penguin-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arm left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arm right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foot right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ground&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--penguin-face</span>: white;</span><br><span class="line">  <span class="attr">--penguin-picorna</span>: orange;</span><br><span class="line">  <span class="attr">--penguin-skin</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">201</span>, <span class="number">255</span>), <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">255</span>, <span class="number">222</span>));</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-mountain</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">203</span>, <span class="number">241</span>, <span class="number">228</span>), <span class="built_in">rgb</span>(<span class="number">80</span>, <span class="number">183</span>, <span class="number">255</span>));</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">0deg</span>, <span class="number">44deg</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.back-mountain</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">203</span>, <span class="number">241</span>, <span class="number">228</span>), <span class="built_in">rgb</span>(<span class="number">47</span>, <span class="number">170</span>, <span class="number">255</span>));</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">110px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">225px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sun</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">75px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.penguin</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span> ease-in-out <span class="number">0ms</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.penguin</span> * &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.penguin</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.penguin-head</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    <span class="built_in">var</span>(--penguin-skin),</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">239</span>, <span class="number">240</span>, <span class="number">228</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">70%</span> <span class="number">70%</span> <span class="number">65%</span> <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.face</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-face);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">70%</span> <span class="number">70%</span> <span class="number">60%</span> <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.face</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.face</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.chin</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-face);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">70%</span> <span class="number">70%</span> <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.eye</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">17%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.eye</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.eye</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.eye-lid</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-face);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">23%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blush</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blush</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blush</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.beak</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-picorna);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.beak</span><span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.beak</span><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">42%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shirt</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">25px</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">165px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">127.5px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6a6969</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shirt</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>:  initial;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">22.5px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.penguin-body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">53%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">134</span>, <span class="number">133</span>, <span class="number">133</span>) <span class="number">0%</span>,</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">234</span>, <span class="number">231</span>, <span class="number">231</span>) <span class="number">25%</span>,</span><br><span class="line">    white <span class="number">67%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80%</span> <span class="number">80%</span> <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">23.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.penguin-body</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-skin);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0%</span> <span class="number">0%</span> <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.arm</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">var</span>(--penguin-skin),</span><br><span class="line">    <span class="built_in">rgb</span>(<span class="number">209</span>, <span class="number">210</span>, <span class="number">199</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">30%</span> <span class="number">30%</span> <span class="number">30%</span> <span class="number">120%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.arm</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">35%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: top left; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">130deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">animation</span>: <span class="number">3s</span> linear infinite wave;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.arm</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> wave &#123;</span><br><span class="line">  <span class="number">10%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">110deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">20%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">130deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">30%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">110deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">40%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">130deg</span>) <span class="built_in">scaleX</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:  <span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--penguin-picorna);</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">85%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot</span><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">80deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foot</span><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">80deg</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.ground</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">300px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="built_in">rgb</span>(<span class="number">88</span>, <span class="number">175</span>, <span class="number">236</span>), <span class="built_in">rgb</span>(<span class="number">182</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">58px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(二)</title>
    <url>/responsive-web-dedign-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-Basic-CSS-by-Buiding-a-Cafe-Menu"><a href="#Learn-Basic-CSS-by-Buiding-a-Cafe-Menu" class="headerlink" title="Learn Basic CSS by Buiding a Cafe Menu"></a>Learn Basic CSS by Buiding a Cafe Menu</h4><span id="more"></span>

<ol>
<li><p>Add the tag, and an element with a attribute of .<code>&lt;!DOCTYPE html&gt;``html``lang``en</code></p>
</li>
<li><p>Add a <code>head</code> element within the <code>html</code> element, so you can add a <code>title</code> element. The <code>title</code> element’s text should be <code>Cafe Menu</code>.</p>
</li>
<li><p>The <code>title</code> is one of several elements that provide extra information not visible on the web page, but it is useful for search engines or how the page gets displayed.</p>
<p>Inside the <code>head</code> element, nest a <code>meta</code> element with an attribute named <code>charset</code> set to the value <code>utf-8</code> to tell the browser how to encode characters for the page. Note that <code>meta</code> elements are self-closing.</p>
</li>
<li><p>To prepare to create some actual content, add a <code>body</code> element below the <code>head</code> element.</p>
</li>
<li><p>It’s time to add some menu content. Add a <code>main</code> element within the existing <code>body</code> element. It will eventually contain pricing information about coffee and desserts offered by the cafe.</p>
</li>
<li><p>The name of the cafe is <code>CAMPER CAFE</code>. Add an <code>h1</code> element within your <code>main</code> element. Give it the name of the cafe in capitalized letters to make it stand out.</p>
</li>
<li><p>To let visitors know the cafe was founded in 2020, add a <code>p</code> element below the <code>h1</code> element with the text <code>Est. 2020</code>.</p>
</li>
<li><p>There will be two sections on the menu, one for coffees and one for desserts. Add a <code>section</code> element within the <code>main</code> element so you have a place to put all the coffees available.</p>
</li>
<li><p>Create an <code>h2</code> element in the <code>section</code> element and give it the text <code>Coffee</code>.</p>
</li>
<li><p>Up until now, you have been limited regarding the presentation and appearance of the content you create. To start taking control, add a <code>style</code> element within the <code>head</code> element.</p>
</li>
<li><p>You can add style to an element by specifying it in the <code>style</code> element and setting a property for it like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">element &#123;</span><br><span class="line"> property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Center your <code>h1</code> element by setting its <code>text-align</code> property to the value <code>center</code>.</p>
</li>
<li><p>n the previous step, you used a type selector to style the <code>h1</code> element. Center the <code>h2</code> and <code>p</code> elements by adding a new type selector for each one to the existing <code>style</code> element.</p>
</li>
<li><p>You now have three type selectors with the exact same styling. You can add the same group of styles to many elements by creating a list of selectors. Each selector is separated with commas like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">selector1, selector2 &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Delete the three existing type selectors and replace them with one selector list that centers the text for the <code>h1</code>, <code>h2</code>, and <code>p</code> elements.</p>
</li>
<li><p>You have styled three elements by writing CSS inside the <code>style</code> tags. This works, but since there will be many more styles, it’s best to put all the styles in a separate file and link to it.</p>
<p>We have created a separate <code>styles.css</code> file for you and switched the editor view to that file. You can change between files with the tabs at the top of the editor.</p>
<p>Start by rewriting the styles you have created into the <code>styles.css</code> file. Make sure to exclude the opening and closing <code>style</code> tags.</p>
</li>
<li><p>Now that you have the CSS in the <code>styles.css</code> file, go ahead and remove the <code>style</code> element and all its content. Once it is removed, the text that was centered will shift back to the left.</p>
</li>
<li><p>Now you need to link the <code>styles.css</code> file so the styles will be applied again. Nest a self-closing <code>link</code> element in the <code>head</code> element. Give it a <code>rel</code> attribute value <code>stylesheet</code> and an <code>href</code> attribute value of <code>styles.css</code>.</p>
</li>
<li><p>For the styling of the page to look similar on mobile as it does on a desktop or laptop, you need to add a <code>meta</code> element with a special <code>content</code> attribute.</p>
<p>Add the following within the <code>head</code> element:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>The text is centered again so the link to the CSS file is working. Add another style to the file that changes the <code>background-color</code> property to <code>brown</code> for the <code>body</code> element.</p>
</li>
<li><p>That brown background makes it hard to read the text. Change the <code>body</code> element’s background color to be <code>burlywood</code> so it has some color but you are still be able to read the text.</p>
</li>
<li><p>The <code>div</code> element is used mainly for design layout purposes unlike the other content elements you have used so far. Add a <code>div</code> element inside the <code>body</code> element and then move all the other elements inside the new <code>div</code>.</p>
</li>
<li><p>The goal now is to make the <code>div</code> not take up the entire width of the page. The CSS <code>width</code> property is perfect for this. Create a new type selector in the style sheet that gives your <code>div</code> element a width of <code>300px</code>.</p>
</li>
<li><p>Comments in CSS look like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* comment here */</span></span><br></pre></td></tr></table></figure>

<p>In your style sheet, comment out the line containing the <code>background-color</code> property and value, so you can see the effect of only styling <code>div</code> element. This will make the background white again.</p>
</li>
<li><p>Now use the existing <code>div</code> selector to set the background color of the <code>div</code> element to be <code>burlywood</code>.</p>
</li>
<li><p>Now it’s easy to see that the text is centered inside the <code>div</code> element. Currently, the width of the <code>div</code> element is specified in pixels (<code>px</code>). Change the <code>width</code> property’s value to be <code>80%</code>, to make it 80% the width of its parent element (<code>body</code>).</p>
</li>
<li><p>Next, you want to center the <code>div</code> horizontally. You can do this by setting its <code>margin-left</code> and <code>margin-right</code> properties to <code>auto</code>. Think of the margin as invisible space around an element. Using these two margin properties, center the <code>div</code> element within the <code>body</code> element.</p>
</li>
<li><p>So far you have been using type selectors to style elements. A class selector is defined by a name with a dot directly in front of it, like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class-name</span> &#123;</span><br><span class="line">  styles</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Change the existing <code>div</code> selector into a class selector by replacing <code>div</code> with a class named <code>menu</code>.</p>
</li>
<li><p>To apply the class’s styling to the <code>div</code> element, add a <code>class</code> attribute to the <code>div</code> element’s opening tag and set its value to <code>menu</code>.</p>
</li>
<li><p>Since the cafe’s main product for sale is coffee, you could use an image of coffee beans for the background of the page.</p>
<p>Delete the comment and its contents inside the <code>body</code> type selector. Now add a <code>background-image</code> property and set its value to <code>url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)</code>.</p>
</li>
<li><p>It’s looking good. Time to start adding some menu items. Add an empty <code>article</code> element under the <code>Coffee</code> heading. It will contain a flavor and price of each coffee you currently offer.</p>
</li>
<li><p><code>article</code> elements commonly contain multiple elements that have related information. In this case, it will contain a coffee flavor and a price for that flavor. Nest two <code>p</code> elements inside your <code>article</code> element. The first one’s text should be <code>French Vanilla</code>, and the second’s text <code>3.00</code>.</p>
</li>
<li><p>Starting below the existing coffee/price pair, add the following coffee and prices using <code>article</code> elements with two nested <code>p</code> elements inside each. As before, the first <code>p</code> element’s text should contain the coffee flavor and the second <code>p</code> element’s text should contain the price.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caramel Macchiato 3.75</span><br><span class="line">Pumpkin Spice 3.50</span><br><span class="line">Hazelnut 4.00</span><br><span class="line">Mocha 4.50</span><br></pre></td></tr></table></figure></li>
<li><p>The flavors and prices are currently stacked on top of each other and centered with their respective <code>p</code> elements. It would be nice if the flavor was on the left and the price was on the right.</p>
<p>Add the class name <code>flavor</code> to the <code>French Vanilla</code> <code>p</code> element.</p>
</li>
<li><p>Using your new <code>flavor</code> class as a selector, set the <code>text-align</code> property’s value to <code>left</code>.</p>
</li>
<li><p>Next, you want to align the price to the right. Add a class named <code>price</code> to your <code>p</code> element that has <code>3.00</code> as its text.</p>
</li>
<li><p>Now align the text to the <code>right</code> for the elements with the <code>price</code> class.</p>
</li>
<li><p>That is kind of what you want, but now it would be nice if the flavor and price were on the same line. <code>p</code> elements are block-level elements, so they take up the entire width of their parent element.</p>
<p>To get them on the same line, you need to apply some styling to the <code>p</code> elements so they behave more like inline elements. To do that, start by adding a <code>class</code> attribute with the value <code>item</code> to the first <code>article</code> element under the <code>Coffee</code> heading.</p>
</li>
<li><p>The <code>p</code> elements are nested in an <code>article</code> element with the class attribute of <code>item</code>. You can style all the <code>p</code> elements nested anywhere in elements with a class named <code>item</code> like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">p</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>Using the above selector, add a <code>display</code> property with value <code>inline-block</code> so the <code>p</code> elements behave more like inline elements.</p>
</li>
<li><p>That’s closer, but the price didn’t stay over on the right. This is because <code>inline-block</code> elements only take up the width of their content. To spread them out, add a <code>width</code> property to the <code>flavor</code> and <code>price</code> class selectors that have a value of <code>50%</code> each.</p>
</li>
<li><p>Well that did not work. Styling the <code>p</code> elements as <code>inline-block</code> and placing them on separate lines in the code creates an extra space to the right of the first <code>p</code> element, causing the second one to shift to the next line. One way to fix this is to make each <code>p</code> element’s width a little less than <code>50%</code>.</p>
<p>Change the <code>width</code> value to <code>49%</code> for each class to see what happens.</p>
</li>
<li><p>That worked, but there is still a little space on the right of the price.</p>
<p>You could keep trying various percentages for the widths. Instead, use the back space key on your keyboard to move the <code>p</code> element with the class <code>price</code> next to the <code>p</code> element with the class <code>flavor</code> so that they are on the same line in the editor. Make sure there is no space between them.</p>
</li>
<li><p>Now go ahead and change both the <code>flavor</code> and <code>price</code> class’ widths to be <code>50%</code> again.</p>
</li>
<li><p>Now that you know it works, you can change the remaining <code>article</code> and <code>p</code> elements to match the first set. Start by adding the class <code>item</code> to the other <code>article</code> elements.</p>
</li>
<li><p>Next, position the other <code>p</code> elements to be on the same line with no space between them.</p>
</li>
<li><p>To complete the styling, add the applicable class names <code>flavor</code> and <code>price</code> to all the remaining <code>p</code> elements.</p>
</li>
<li><p>If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. This is because the width of the <code>p</code> elements on the left side can only take up <code>50%</code> of the space.</p>
<p>Since you know the prices on the right have significantly fewer characters, change the <code>flavor</code> class <code>width</code> value to be <code>75%</code> and the <code>price</code> class <code>width</code> value to be <code>25%</code>.</p>
</li>
<li><p>You will come back to styling the menu in a few steps, but for now, go ahead and add a second <code>section</code> element below the first for displaying the desserts offered by the cafe.</p>
</li>
<li><p>Add an <code>h2</code> element in the new section and give it the text <code>Desserts</code>.</p>
</li>
<li><p>Add an empty <code>article</code> element under the <code>Desserts</code> heading. Give it a <code>class</code> attribute with the value <code>item</code>.</p>
</li>
<li><p>Nest two <code>p</code> elements inside your <code>article</code> element. The first one’s text should be <code>Donut</code>, and the second’s text <code>1.50</code>. Put both of them on the same line making sure there is no space between them.</p>
</li>
<li><p>For the two <code>p</code> elements you just added, add <code>dessert</code> as the value of the first <code>p</code> element’s <code>class</code> attribute and the value <code>price</code> as the second <code>p</code> elements <code>class</code> attribute.</p>
</li>
<li><p>Something does not look right. You added the correct <code>class</code> attribute value to the <code>p</code> element with <code>Donut</code> as its text, but you have not defined a selector for it.</p>
<p>The CSS rule for the <code>flavor</code> class already sets the properties you want. Add the <code>dessert</code> class as an additional selector for this CSS rule.</p>
</li>
<li><p>Below the dessert you just added, add the rest of the desserts and prices using three more <code>article</code> elements, each with two nested <code>p</code> elements. Each element should have the correct dessert and price text, and all of them should have the correct classes.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Cherry Pie 2.75</span><br><span class="line">Cheesecake 3.00</span><br><span class="line">Cinnamon Roll 2.50</span><br></pre></td></tr></table></figure></li>
<li><p>You can give your menu some space between the content and the sides with various <code>padding</code> properties.</p>
<p>Give the <code>menu</code> class a <code>padding-left</code> and a <code>padding-right</code> with the same value <code>20px</code>.</p>
</li>
<li><p>That looks better. Now try to add the same <code>20px</code> padding to the top and bottom of the menu.</p>
</li>
<li><p>Since all 4 sides of the menu have the same internal spacing, go ahead and delete the four properties and use a single <code>padding</code> property with the value <code>20px</code>.</p>
</li>
<li><p>The current width of the menu will always take up 80% of the <code>body</code> element’s width. On a very wide screen, the coffee and dessert appear far apart from their prices.</p>
<p>Add a <code>max-width</code> property to the <code>menu</code> class with a value of <code>500px</code> to prevent it from growing too wide.</p>
</li>
<li><p>You can change the <code>font-family</code> of text, to make it look different from the default font of your browser. Each browser has some common fonts available to it.</p>
<p>Change all the text in your <code>body</code>, by adding a <code>font-family</code> property with the value <code>sans-serif</code>. This is a fairly common font that is very readable.</p>
</li>
<li><p>It is a bit boring for all the text to have the same <code>font-family</code>. You can still have the majority of the text <code>sans-serif</code> and make just the <code>h1</code> and <code>h2</code> elements different using a different selector.</p>
<p>Style both the <code>h1</code> and the <code>h2</code> elements so that only these elements’ text use <code>Impact</code> font.</p>
</li>
<li><p>You can add a fallback value for the font-family by adding another font name separated by a comma. Fallbacks are used in instances where the initial is not found/available.</p>
<p>Add the fallback font <code>serif</code> after the <code>Impact</code> font.</p>
</li>
<li><p>Make the <code>Est. 2020</code> text italicized by creating an <code>established</code> class selector and giving it the <code>font-style</code> property with the value <code>italic</code>.</p>
</li>
<li><p>Now apply the <code>established</code> class to the <code>Est. 2020</code> text.</p>
</li>
<li><p>The typography of heading elements (e.g. <code>h1</code>, <code>h2</code>) is set by default values of users’ browsers.</p>
<p>Add two new type selectors (<code>h1</code> and <code>h2</code>). Use the <code>font-size</code> property for both, but use the value <code>40px</code> for the <code>h1</code> and <code>30px</code> for the <code>h2</code>.</p>
</li>
<li><p>Add a <code>footer</code> element below the <code>main</code> element, where you can add some additional information.</p>
</li>
<li><p>Inside the <code>footer</code>, add a <code>p</code> element. Then, nest an anchor (<code>a</code>) element in the <code>p</code> that links to <code>https://www.freecodecamp.org</code> and has the text <code>Visit our website</code>.</p>
</li>
<li><p>Add a second <code>p</code> element below the one with the link and give it the text <code>123 Free Code Camp Drive</code>.</p>
</li>
<li><p>You can use an <code>hr</code> element to display a divider between sections of different content.</p>
<p>First, add an <code>hr</code> element between the <code>p</code> element with the class <code>established</code> and the first <code>section</code> element. Note that <code>hr</code> elements are self closing.</p>
</li>
<li><p>The default properties of an <code>hr</code> element will make it appear as a thin light grey line. You can change the height of the line by specifying a value for the <code>height</code> property.</p>
<p>Change the height of the <code>hr</code> element to be <code>3px</code>.</p>
</li>
<li><p>Change the background color of the <code>hr</code> element to <code>brown</code> so it matches the color of the coffee beans.</p>
</li>
<li><p>Notice the grey color along the edges of the line. Those edges are known as borders. Each side of an element can have a different color or they can all be the same.</p>
<p>Make all the edges of the <code>hr</code> element the same color as the background of it using the <code>border-color</code> property.</p>
</li>
<li><p>Notice how the thickness of the line looks bigger? The default value of a property named <code>border-width</code> is <code>1px</code> for all edges of <code>hr</code> elements. By changing the border to the same color as the background, the total height of the line is <code>5px</code> (<code>3px</code> plus the top and bottom border width of <code>1px</code>).</p>
<p>Change the <code>height</code> property of the <code>hr</code> to be <code>2px</code>, so the total height of it becomes <code>4px</code>.</p>
</li>
<li><p>Go ahead and add another <code>hr</code> element between the <code>main</code> element and the <code>footer</code> element.</p>
</li>
<li><p>To create a little more room around the menu, add <code>20px</code> of space on the inside of the <code>body</code> element by using the <code>padding</code> property.</p>
</li>
<li><p>Focusing on the menu items and prices, there is a fairly large gap between each line.</p>
<p>Target all the <code>p</code> elements nested in elements with the <code>class</code> named <code>item</code> and set their top and bottom margin to be <code>5px</code>.</p>
</li>
<li><p>Using the same style selector in the previous step, make the font size of the items and prices larger by using a value of <code>18px</code>.</p>
</li>
<li><p>Changing the <code>margin-bottom</code> to <code>5px</code> looks great. However, now the space between the <code>Cinnamon Roll</code> menu item and the second <code>hr</code> element does not match the space between the top <code>hr</code> element and the <code>Coffee</code> heading.</p>
<p>Add some more space by creating a class named <code>bottom-line</code> using <code>25px</code> for the <code>margin-top</code> property.</p>
</li>
<li><p>Now add the <code>bottom-line</code> class to the second <code>hr</code> element so the styling is applied.</p>
</li>
<li><p>Next you are going to be styling the <code>footer</code> element. To keep the CSS organized, add a comment at the end of <code>styles.css</code> with the text <code>FOOTER</code>.</p>
</li>
<li><p>Moving down to the <code>footer</code> element, make all the text have a value of <code>14px</code> for the font size.</p>
</li>
<li><p>The default color of a link that has not yet been clicked on is typically blue. The default color of a link that has already been visited from a page is typically purple.</p>
<p>To make the <code>footer</code> links the same color regardless if a link has been visited, use a type selector for the anchor element (<code>a</code>) and use the value <code>black</code> for the <code>color</code> property.</p>
</li>
<li><p>You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like <code>a:visited &#123; propertyName: propertyValue; &#125;</code>.</p>
<p>Change the color of the footer <code>Visit our website</code> link to be <code>grey</code> when a user has visited the link.</p>
</li>
<li><p>You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like <code>a:hover &#123; propertyName: propertyValue; &#125;</code>.</p>
<p>Change the color of the footer <code>Visit our website</code> link to be <code>brown</code> when a user hovers over it.</p>
</li>
<li><p>You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like <code>a:active &#123; propertyName: propertyValue; &#125;</code>.</p>
<p>Change the color of the footer <code>Visit our website</code> link to be <code>white</code> when clicked on.</p>
</li>
<li><p>To keep with the same color theme you have already been using (black and brown), change the color for when the link is visited to <code>black</code> and use <code>brown</code> for when the link is actually clicked.</p>
</li>
<li><p>The menu text <code>CAMPER CAFE</code> has a different space from the top than the address’s space at the bottom of the menu. This is due to the browser having some default top margin for the <code>h1</code> element.</p>
<p>Change the top margin of the <code>h1</code> element to <code>0</code> to remove all the top margin.</p>
</li>
<li><p>To remove some of the vertical space between the <code>h1</code> element and the text <code>Est. 2020</code>, change the bottom margin of the <code>h1</code> to <code>15px</code>.</p>
</li>
<li><p>Now the top spacing looks good. The space below the address at the bottom of the menu is a little bigger than the space at the top of the menu and the <code>h1</code> element.</p>
<p>To decrease the default margin space below the address <code>p</code> element, create a class selector named <code>address</code> and use the value <code>5px</code> for the <code>margin-bottom</code> property.</p>
</li>
<li><p>Now apply the <code>address</code> class to the <code>p</code> element containing the street address <code>123 Free Code Camp Drive</code>.</p>
</li>
<li><p>The menu looks good, but other than the coffee beans background image, it is mainly just text.</p>
<p>Under the <code>Coffee</code> heading, add an image using the url <code>https://cdn.freecodecamp.org/curriculum/css-cafe/coffee.jpg</code>. Give the image an <code>alt</code> value of <code>coffee icon</code>.</p>
</li>
<li><p>The image you added is not centered horizontally like the <code>Coffee</code> heading above it. <code>img</code> elements are “like” inline elements.</p>
<p>To make the image behave like heading elements (which are block-level), create an <code>img</code> type selector and use the value <code>block</code> for the <code>display</code> property and use the applicable <code>margin-left</code> and <code>margin-right</code> values to center it horizontally.</p>
</li>
<li><p>Add one last image under the <code>Desserts</code> heading using the url <code>https://cdn.freecodecamp.org/curriculum/css-cafe/pie.jpg</code>. Give the image an <code>alt</code> value of <code>pie icon</code>.</p>
</li>
<li><p>It would be nice if the vertical space between the <code>h2</code> elements and their associated icons was smaller. The <code>h2</code> elements have default top and bottom margin space, so you could change the bottom margin of the <code>h2</code> elements to say <code>0</code> or another number.</p>
<p>There is an easier way, simply add a negative top margin to the <code>img</code> elements to pull them up from their current positions. Negative values are created using a <code>-</code> in front of the value. To complete this project, go ahead and use a negative top margin of <code>25px</code> in the <code>img</code> type selector.</p>
</li>
<li><p>```html</p>
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cafe Menu</title>
    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <div class="menu">
      <main>
        <h1>CAMPER CAFE</h1>
        <p class="established">Est. 2020</p>
        <hr>
        <section>
          <h2>Coffee</h2>
          <img src="https://cdn.freecodecamp.org/curriculum/css-cafe/coffee.jpg" alt="coffee icon">
          <article class="item">
            <p class="flavor">French Vanilla</p><p class="price">3.00</p>
          </article>
          <article class="item">
            <p class="flavor">Caramel Macchiato</p><p class="price">3.75</p>
          </article>
          <article class="item">
            <p class="flavor">Pumpkin Spice</p><p class="price">3.50</p>
          </article>
          <article class="item">
            <p class="flavor">Hazelnut</p><p class="price">4.00</p>
          </article>
          <article class="item">
            <p class="flavor">Mocha</p><p class="price">4.50</p>
          </article>
        </section>
        <section>
          <h2>Desserts</h2>
          <img src="https://cdn.freecodecamp.org/curriculum/css-cafe/pie.jpg" alt="pie icon">
          <article class="item">
            <p class="dessert">Donut</p><p class="price">1.50</p>
          </article>
          <article class="item">
            <p class="dessert">Cherry Pie</p><p class="price">2.75</p>
          </article>
          <article class="item">
            <p class="dessert">Cheesecake</p><p class="price">3.00</p>
          </article>
          <article class="item">
            <p class="dessert">Cinnamon Roll</p><p class="price">2.50</p>
          </article>
        </section>
      </main>
      <hr class="bottom-line">
      <footer>
        <p><a href="https://www.freecodecamp.org">Visit our website</a></p>
        <p class="address">123 Free Code Camp Drive</p>
      </footer>
    </div>
  </body>
</html>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```css</span><br><span class="line">body &#123;</span><br><span class="line">  /*background-color: burlywood;*/</span><br><span class="line">  background-image:url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)</span><br><span class="line">  font-family:sans-serif;</span><br><span class="line">  padding:20px;</span><br><span class="line">&#125;</span><br><span class="line">.menu&#123;</span><br><span class="line">  width:80%;</span><br><span class="line">  background-color: burlywood;</span><br><span class="line">  margin-left:auto;</span><br><span class="line">  margin-right:auto;</span><br><span class="line"> /* padding-left:20px;</span><br><span class="line">  padding-right:20px;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line">  padding-bottom: 20px;*/</span><br><span class="line">  padding:20px;</span><br><span class="line">  max-width:500px;</span><br><span class="line">&#125;</span><br><span class="line">hr&#123;</span><br><span class="line">  height:2px;</span><br><span class="line">  background-color:brown;</span><br><span class="line">  border-color:brown;</span><br><span class="line">&#125;</span><br><span class="line">.bottom-line&#123;</span><br><span class="line">  margin-top:25px;</span><br><span class="line">&#125;</span><br><span class="line">h1&#123;</span><br><span class="line">  font-size:40px;</span><br><span class="line">  margin-top:0px;</span><br><span class="line">  margin-bottom:15px;</span><br><span class="line">&#125;</span><br><span class="line">h2&#123;</span><br><span class="line">  font-size:30px;</span><br><span class="line">&#125;</span><br><span class="line">h1,</span><br><span class="line">h2,</span><br><span class="line">p &#123;</span><br><span class="line">  text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">h1,</span><br><span class="line">h2&#123;</span><br><span class="line">  font-family: Impact,serif;;</span><br><span class="line">&#125;</span><br><span class="line">.flavor,</span><br><span class="line">.dessert &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">  width:75%;</span><br><span class="line">&#125;</span><br><span class="line">.price &#123;</span><br><span class="line">  text-align: right;</span><br><span class="line">  width:25%;</span><br><span class="line">&#125;</span><br><span class="line">.item p&#123;</span><br><span class="line">  display:inline-block;</span><br><span class="line">  margin-top:5px;</span><br><span class="line">  margin-bottom:5px;</span><br><span class="line">  font-size:18px;</span><br><span class="line">&#125; </span><br><span class="line">.established&#123;</span><br><span class="line">  font-style:italic;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">  display:block;</span><br><span class="line">  margin-left:auto;</span><br><span class="line">  margin-right:auto;</span><br><span class="line">  margin-top:-25px;</span><br><span class="line">&#125;</span><br><span class="line">/* FOOTER */</span><br><span class="line">footer&#123;</span><br><span class="line">  font-size:14px;</span><br><span class="line">&#125; </span><br><span class="line">a&#123;</span><br><span class="line">  color:black;</span><br><span class="line">&#125; </span><br><span class="line">a:visited &#123;</span><br><span class="line">  color: black;</span><br><span class="line">&#125;</span><br><span class="line">a:hover &#123;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br><span class="line">a:active &#123;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br><span class="line">.address&#123;</span><br><span class="line">  margin-bottom:5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p> </p>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>伪选择器</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(三)</title>
    <url>/responsive-web-dedign-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-CSS-Colors-by-Building-a-Set-of-Colored-Markers"><a href="#Learn-CSS-Colors-by-Building-a-Set-of-Colored-Markers" class="headerlink" title="Learn CSS Colors by Building a Set of Colored Markers"></a>Learn CSS Colors by Building a Set of Colored Markers</h4><span id="more"></span>

<ol>
<li><p>As you’ve seen in the previous projects, webpages should start with a <code>DOCTYPE html</code> declaration, followed by an <code>html</code> element.</p>
<p>Add a <code>DOCTYPE html</code> declaration at the top of the document, and an <code>html</code> element after that. Give the <code>html</code> element a <code>lang</code> attribute with <code>en</code> as its value.</p>
</li>
<li><p>Nest a <code>head</code> element within the <code>html</code> element. Just after the <code>head</code> element, add a <code>body</code> element.</p>
</li>
<li><p>Remember that the <code>title</code> element gives search engines extra information about the page. It also displays the content of that <code>title</code> element in two more ways:</p>
<ul>
<li>in the title bar when the page is open</li>
<li>in the browser tab for the page when you hover on it. Even if that tab is not active, once you hover on the tab, the <code>title</code> text is displayed.</li>
</ul>
<p>Within the <code>head</code> element, nest a <code>title</code> element with the text <code>Colored Markers</code>.</p>
</li>
<li><p>To tell browsers how to encode characters on your page, set the <code>charset</code> to <code>utf-8</code>. <code>utf-8</code> is a universal character set that includes almost every character from all human languages.</p>
<p>Inside the <code>head</code> element, nest a <code>meta</code> element with the attribute <code>charset</code> set to <code>utf-8</code>. Remember that <code>meta</code> elements are self-closing, and do not need a closing tag.</p>
</li>
<li><p>You can have multiple self-closing <code>meta</code> elements on a web page. What distinguishes one <code>meta</code> element from the other is the attribute. You should add a new meta element for each attribute you want to specify.</p>
<p>Add another self-closing <code>meta</code> element within the <code>head</code>. Give it a <code>name</code> attribute set to <code>viewport</code> and a <code>content</code> attribute set to <code>width=device-width, initial-scale=1.0</code> so your page looks the same on all devices.</p>
</li>
<li><p>Now you’re ready to start adding content to the page.</p>
<p>Within the <code>body</code>, nest an <code>h1</code> element with the text <code>CSS Color Markers</code>.</p>
</li>
<li><p>In this project you’ll work with an external CSS file to style the page. We’ve already created a <code>styles.css</code> file for you. But before you can use it, you’ll need to link it to the page.</p>
<p>Nest a <code>link</code> element within the <code>head</code> element. Give it a <code>rel</code> attribute set to <code>stylesheet</code> and an <code>href</code> attribute set to <code>styles.css</code>.</p>
</li>
<li><p>Now that your external CSS file is set up, you can start styling the page.</p>
<p>As a reminder, here’s how to target a paragraph element and align it to the right:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create a new CSS rule that targets the <code>h1</code> element, and set its <code>text-align</code> property to <code>center</code>.</p>
</li>
<li><p>Now you’ll add some elements that you’ll eventually style into color markers.</p>
<p>First, within the <code>body</code> element, add a <code>div</code> element and set its <code>class</code> attribute to <code>container</code>. Make sure the <code>div</code> element is below the <code>h1</code> element.</p>
</li>
<li><p>Next, within the <code>div</code> element, add another <code>div</code> element and give it a class of <code>marker</code>.</p>
</li>
<li><p>It’s time to add some color to the marker. Remember that one way to add color to an element is to use a color keyword like <code>black</code>, <code>cyan</code>, or <code>yellow</code>.</p>
<p>As a reminder, here’s how to target the class <code>freecodecamp</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.freecodecamp</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create a new CSS rule that targets the class <code>marker</code>, and set its <code>background-color</code> property to <code>red</code>.</p>
<p><strong>Note:</strong> You will not see any changes after adding the CSS.</p>
</li>
<li><p>The background color was applied, but since the marker <code>div</code> element has no content in it, it doesn’t have any height by default.</p>
<p>In your <code>.marker</code> CSS rule, set the <code>height</code> property to <code>25px</code> and the <code>width</code> property to <code>200px</code></p>
</li>
<li><p>Your marker would look better if it was centered on the page. An easy way to do that is with the <code>margin</code> shorthand property.</p>
<p>In the last project, you set the margin area of elements separately with properties like <code>margin-top</code> and <code>margin-left</code>. The <code>margin</code> shorthand property makes it easy to set multiple margin areas at the same time.</p>
<p>To center your marker on the page, set its <code>margin</code> property to <code>auto</code>. This sets <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> all to <code>auto</code>.</p>
</li>
<li><p>Now that you’ve got one marker centered with color, it’s time to add the other markers.</p>
<p>In the <code>container</code> <code>div</code>, add two more <code>div</code> elements and give them each a class of <code>marker</code>.</p>
</li>
<li><p>While you have three separate marker <code>div</code> elements, they look like one big rectangle. You should add some space between them to make it easier to see each element.</p>
<p>When the shorthand <code>margin</code> property has two values, it sets <code>margin-top</code> and <code>margin-bottom</code> to the first value, and <code>margin-left</code> and <code>margin-right</code> to the second value.</p>
<p>In your <code>.marker</code> CSS rule, set the <code>margin</code> property to <code>10px auto</code>.</p>
</li>
<li><p>To give the markers different colors, you will need to add a unique class to each one. Multiple classes can be added to an element by listing them in the <code>class</code> attribute and separating them with a space. For example, the following adds both the <code>animal</code> and <code>dog</code> classes to a <code>div</code> element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;animal dog&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>If you add multiple classes to an HTML element, the styles of the first classes you list may be overridden by later classes.</p>
<p>To begin, add the class <code>one</code> to the first marker <code>div</code> element.</p>
</li>
<li><p>Next, remove the <code>background-color</code> property and its value from the <code>.marker</code> CSS rule.</p>
</li>
<li><p>Then, create a new CSS rule that targets the class <code>one</code> and set its <code>background-color</code> property to <code>red</code>.</p>
</li>
<li><p>Add the class <code>two</code> to the second marker <code>div</code>, and add the class <code>three</code> to the third marker <code>div</code>.</p>
</li>
<li><p>Create a CSS rule that targets the class <code>two</code> and set its <code>background-color</code> property to <code>green</code>.</p>
<p>Also, create a separate CSS rule that targets the class <code>three</code> and set its <code>background-color</code> to <code>blue</code>.</p>
</li>
<li><p>There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.</p>
<p>In this project, you’ll work with the RGB model. This means that colors begin as black, and change as different levels of red, green, and blue are introduced. An easy way to see this is with the CSS <code>rgb</code> function.</p>
<p>Create a new CSS rule that targets the class <code>container</code> and set its <code>background-color</code> to black with <code>rgb(0, 0, 0)</code>.</p>
</li>
<li><p>A function is a piece of code that can take an input and perform a specific action. The CSS <code>rgb</code> function accepts values, or arguments, for red, green, and blue, and produces a color:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rgb(red, green, blue);</span><br></pre></td></tr></table></figure>

<p>Each red, green, and blue value is a number from <code>0</code> to <code>255</code>. <code>0</code> means that there’s 0% of that color, and is black. <code>255</code> means that there’s 100% of that color.</p>
<p>In the <code>.one</code> CSS rule, replace the color keyword <code>red</code> with the <code>rgb</code> function. For the <code>rgb</code> function, set the value for red to <code>255</code>, the value for green to <code>0</code>, and the value for blue to <code>0</code>.</p>
</li>
<li><p>Notice that the <code>background-color</code> for your marker is still red. This is because you set the red value of the <code>rgb</code> function to the max of <code>255</code>, or 100% red, and set both the green and blue values to <code>0</code>.</p>
<p>Now use the <code>rgb</code> function to set the other colors.</p>
<p>In the <code>.two</code> CSS rule, use the <code>rgb</code> function to set the <code>background-color</code> to the max value for green, and <code>0</code> for the other values. And in the <code>.three</code> CSS rule, use the <code>rgb</code> function to set the <code>background-color</code> to the max value for blue, and <code>0</code> for the other values.</p>
</li>
<li><p>While the red and blue markers look the same, the green one is much lighter than it was before. This is because the <code>green</code> color keyword is actually a darker shade, and is about halfway between black and the maximum value for green.</p>
<p>In the <code>.two</code> CSS rule, set the green value in the <code>rgb</code> function to <code>127</code> to lower its intensity.</p>
</li>
<li><p>Now add a little more vertical space between your markers and the edge of the <code>container</code> element they’re in.</p>
<p>In the <code>.container</code> CSS rule, use the shorthand <code>padding</code> property to add <code>10px</code> of top and bottom padding, and set the left and right padding to <code>0</code>. This works similarly to the shorthand <code>margin</code> property you used earlier.</p>
</li>
<li><p>In the additive RGB color model, primary colors are colors that, when combined, create pure white. But for this to happen, each color needs to be at its highest intensity.</p>
<p>Before you combine colors, set your green marker back to pure green. For the <code>rgb</code> function in the <code>.two</code> CSS rule, set green back to the max value of <code>255</code>.</p>
</li>
<li><p>Now that you have the primary RGB colors, it’s time to combine them.</p>
<p>For the <code>rgb</code> function in the <code>.container</code> rule, set the red, green, and blue values to the max of <code>255</code>.</p>
</li>
<li><p>Secondary colors are the colors you get when you combine primary colors. You might have noticed some secondary colors in the last step as you changed the red, green, and blue values.</p>
<p>To create the first secondary color, yellow, update the <code>rgb</code> function in the <code>.one</code> CSS rule to combine pure red and pure green.</p>
</li>
<li><p>To create the next secondary color, cyan, update the <code>rgb</code> function in the <code>.two</code> CSS rule to combine pure green and pure blue.</p>
</li>
<li><p>To create the final secondary color, magenta, update the <code>rgb</code> function in the <code>.three</code> CSS rule to combine pure blue and pure red.</p>
</li>
<li><p>Now that you’re familiar with secondary colors, you’ll learn how to create tertiary colors. Tertiary colors are created by combining a primary with a nearby secondary color.</p>
<p>To create the tertiary color orange, update the <code>rgb</code> function in the <code>.one</code> CSS rule so that red is at the max value, and set green to <code>127</code>.</p>
</li>
<li><p>Notice that, to create orange, you had to increase the intensity of red and decrease the intensity of the green <code>rgb</code> values. This is because orange is the combination of red and yellow, and falls between the two colors on the color wheel.</p>
<p>To create the tertiary color spring green, combine cyan with green. Update the <code>rgb</code> function in the <code>.two</code> CSS rule so that green is at the max value, and set blue to <code>127</code>.</p>
</li>
<li><p>And to create the tertiary color violet, combine magenta with blue. Update the <code>rgb</code> function in the <code>.three</code> CSS rule so that blue is at the max value, and set red to <code>127</code>.</p>
</li>
<li><p>There are three more tertiary colors: chartreuse green (green + yellow), azure (blue + cyan), and rose (red + magenta).</p>
<p>To create chartreuse green, update the <code>rgb</code> function in the <code>.one</code> CSS rule so that red is at <code>127</code>, and set green to the max value.</p>
<p>For azure, update the <code>rgb</code> function in the <code>.two</code> CSS rule so that green is at <code>127</code> and blue is at the max value.</p>
<p>And for rose, which is sometimes called bright pink, update the <code>rgb</code> function in the <code>.three</code> CSS rule so that blue is at <code>127</code> and red is at the max value.</p>
</li>
<li><p>Now that you’ve gone through all the primary, secondary, and tertiary colors on a color wheel, it’ll be easier to understand other color theory concepts and how they impact design.</p>
<p>First, in the CSS rules <code>.one</code>, <code>.two</code>, and <code>.three</code>, adjust the values in the <code>rgb</code> function so that the <code>background-color</code> of each element is set to pure black. Remember that the <code>rgb</code> function uses the additive color model, where colors start as black and change as the values of red, green, and blue increase.</p>
</li>
<li><p>A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. For example, pure red is between the hues rose and orange.</p>
<p>Two colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.</p>
<p>In the <code>rgb</code> function for the <code>.one</code> CSS rule, set the red value to the max of <code>255</code> to produce pure red. In the <code>rgb</code> function for <code>.two</code> CSS rule, set the values for green and blue to the max of <code>255</code> to produce cyan.</p>
</li>
<li><p>Notice that the red and cyan colors are very bright right next to each other. This contrast can be distracting if it’s overused on a website, and can make text hard to read if it’s placed on a complementary-colored background.</p>
<p>It’s better practice to choose one color as the dominant color, and use its complementary color as an accent to bring attention to certain content on the page.</p>
<p>First, in the <code>h1</code> rule, use the <code>rgb</code> function to set its <code>background-color</code> to cyan.</p>
</li>
<li><p>Next, in the <code>.one</code> CSS rule, use the <code>rgb</code> function to set the <code>background-color</code> to black. And in the <code>.two</code> CSS rule, use the <code>rgb</code> function to set the <code>background-color</code> to red.</p>
</li>
<li><p>Notice how your eyes are naturally drawn to the red color in the center? When designing a site, you can use this effect to draw attention to important headings, buttons, or links.</p>
<p>There are several other important color combinations outside of complementary colors, but you’ll learn those a bit later.</p>
<p>For now, use the <code>rgb</code> function in the <code>.two</code> CSS rule to set the <code>background-color</code> to black.</p>
</li>
<li><p>And in the <code>h1</code> CSS rule, remove the <code>background-color</code> property and value to go back to the default white color.</p>
</li>
<li><p>Now it’s time to add other details to the markers, starting with the first one.</p>
<p>In the first marker <code>div</code> element, change the class <code>one</code> to <code>red</code>.</p>
</li>
<li><p>Update the <code>.one</code> CSS rule to target the new <code>red</code> class.</p>
</li>
<li><p>And update the <code>rgb</code> function in the <code>.red</code> CSS rule so that the red value is at the max.</p>
</li>
<li><p>Next, change the class <code>two</code> to <code>green</code> in the second marker <code>div</code>, and the class <code>three</code> to <code>blue</code> in the third marker <code>div</code>.</p>
</li>
<li><p>Update the CSS class selector <code>.two</code> so it targets the new <code>green</code> class. And update the <code>.three</code> class selector so it targets the new <code>blue</code> class.</p>
</li>
<li><p>A very common way to apply color to an element with CSS is with hexadecimal or hex values. While hex values sound complicated, they’re really just another form of RGB values.</p>
<p>Hex color values start with a <code>#</code> character and take six characters from 0-9 and A-F. The first pair of characters represent red, the second pair represent green, and the third pair represent blue. For example, <code>#4B5320</code>.</p>
<p>In the <code>.green</code> class selector, set the <code>background-color</code> property to a hex color code with the values <code>00</code> for red, <code>FF</code> for green, and <code>00</code> blue.</p>
</li>
<li><p>You may already be familiar with decimal, or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, A, B, C, D, E, F</span><br></pre></td></tr></table></figure>

<p>With hex colors, <code>00</code> is 0% of that color, and <code>FF</code> is 100%. So <code>#00FF00</code> translates to 0% red, 100% green, and 0% blue, and is the same as <code>rgb(0, 255, 0)</code>.</p>
<p>Lower the intensity of green by setting the green value of the hex color to <code>7F</code>.</p>
</li>
<li><p>The HSL color model, or hue, saturation, and lightness, is another way to represent colors.</p>
<p>The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.</p>
<p>If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.</p>
<p>Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign <code>%</code> to the saturation and lightness values.</p>
<p>Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.</p>
<p>In the <code>.blue</code> CSS rule, use the <code>hsl</code> function to change the <code>background-color</code> property to pure blue. Set the hue to <code>240</code>, the saturation to <code>100%</code>, and the lightness to <code>50%</code>.</p>
</li>
<li><p>You’ve learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.</p>
<p>A gradient is when one color transitions into another. The CSS <code>linear-gradient</code> function lets you control the direction of the transition along a line, and which colors are used.</p>
<p>One thing to remember is that the <code>linear-gradient</code> function actually creates an <code>image</code> element, and is usually paired with the <code>background</code> property which can accept an image as a value.</p>
<p>In the <code>.red</code> CSS rule, change the <code>background-color</code> property to <code>background</code>.</p>
</li>
<li><p>The <code>linear-gradient</code> function is very flexible – here is the basic syntax you’ll use in this tutorial:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">linear-gradient(gradientDirection, color1, color2, ...);</span><br></pre></td></tr></table></figure>

<p><code>gradientDirection</code> is the direction of the line used for the transition. <code>color1</code> and <code>color2</code> are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, <code>rgb</code>, or <code>hsl</code>.</p>
<p>Now you’ll apply a red-to-green gradient along a 90 degree line to the first marker.</p>
<p>First, in the <code>.red</code> CSS rule, set the <code>background</code> property to <code>linear-gradient()</code>, and pass it the value <code>90deg</code> as the <code>gradientDirection</code>.</p>
</li>
<li><p>You’ll use the <code>rgb</code> function for the colors of this gradient.</p>
<p>In the <code>linear-gradient</code> function, use the <code>rgb</code> function to set the first color argument to pure red.</p>
</li>
<li><p>You won’t see gradient yet because the <code>linear-gradient</code> function needs at least two color arguments to work.</p>
<p>In the same <code>linear-gradient</code> function, use the <code>rgb</code> function to set the second color argument to pure green.</p>
</li>
<li><p>As you can see, the <code>linear-gradient</code> function produced a smooth red-green gradient. While the <code>linear-gradient</code> function needs a minimum of two color arguments to work, it can accept many color arguments.</p>
<p>Use the <code>rgb</code> function to add pure blue as the third color argument to the <code>linear-gradient</code> function.</p>
</li>
<li><p>Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like <code>px</code> or percentages that follow a color in the <code>linear-gradient</code> function.</p>
<p>For example, in this red-black gradient, the transition from red to black takes place at the 90% point along the gradient line, so red takes up most of the available space:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">linear-gradient(<span class="number">90deg</span>, red <span class="number">90%</span>, black);</span><br></pre></td></tr></table></figure>

<p>In the <code>linear-gradient</code> function, add a <code>75%</code> color stop after the first red color argument. Do not add color stops to the other colors arguments.</p>
</li>
<li><p>Now that you know the basics of how the <code>linear-gradient</code> function and color-stops work, you can use them to make the markers look more realistic.</p>
<p>In the <code>linear-gradient</code> function, set <code>gradientDirection</code> to <code>180deg</code>.</p>
</li>
<li><p>Next, set the color-stop for red to <code>0%</code>, the color-stop for green to <code>50%</code>, and the color-stop for blue to <code>100%</code>.</p>
</li>
<li><p>Now that the color-stops are set, you’ll apply different shades of red to each color argument in the <code>linear-gradient</code> function. The shades on the top and bottom edges of the marker will be darker, while the one in the middle will be lighter, as if there’s a light above it.</p>
<p>For the first color argument, which is currently pure red, update the <code>rgb</code> function so the value for red is <code>122</code>, the value for green is <code>74</code>, and the value for blue is <code>14</code>.</p>
</li>
<li><p>Now modify the second color argument in the <code>linear-gradient</code> function, which is currently pure green.</p>
<p>Update the <code>rgb</code> function so the value for red is <code>245</code>, the value of green is <code>62</code>, and the value of blue is <code>113</code>.</p>
</li>
<li><p>Finally, modify the third color argument in the <code>linear-gradient</code> function, which is currently pure blue.</p>
<p>Update the <code>rgb</code> function so the value for red is <code>162</code>, the value of green is <code>27</code>, and the value of blue is <code>27</code>.</p>
</li>
<li><p>The red marker is looking much more realistic. Now you’ll do the same for the green marker, using a combination of the <code>linear-gradient</code> function and hex colors.</p>
<p>In the <code>.green</code> CSS rule, change the <code>background-color</code> property to <code>background</code>.</p>
</li>
<li><p>For this marker, you’ll use hex color codes for your gradient.</p>
<p>Use the <code>linear-gradient</code> function and set <code>gradientDirection</code> to <code>180deg</code>. And for the first color argument, use a hex color code with the values <code>55</code> for red, <code>68</code> for green, and <code>0D</code> for blue.</p>
</li>
<li><p>For the second color argument, use a hex color code with the values <code>71</code> for red, <code>F5</code> for green, and <code>3E</code> for blue.</p>
</li>
<li><p>That’s looking better, but the bottom edge of the green marker needs to be darker to add a little more dimension.</p>
<p>In the same <code>linear-gradient</code> function, add a hex color code with the values <code>11</code> for red, <code>6C</code> for green, and <code>31</code> for blue as the third color argument.</p>
</li>
<li><p>Even without the color-stops, you might have noticed that the colors for the green marker transition at the same points as the red marker. The first color is at the start (0%), the second is in the middle (50%), and the last is at the end (100%) of the gradient line.</p>
<p>The <code>linear-gradient</code> function automatically calculates these values for you, and places colors evenly along the gradient line by default.</p>
<p>In the <code>.red</code> CSS rule, remove the three color stops from the <code>linear-gradient</code> function to clean up your code a bit.</p>
</li>
<li><p>If no <code>gradientDirection</code> argument is provided to the <code>linear-gradient</code> function, it arranges colors from top to bottom, or along a 180 degree line, by default.</p>
<p>Clean up your code a little more by removing the <code>gradientDirection</code> argument from both <code>linear-gradient</code> functions.</p>
</li>
<li><p>Now you’ll apply a gradient to the blue marker, this time using the <code>hsl</code> function as color arguments.</p>
<p>In the <code>.blue</code> CSS rule, change the <code>background-color</code> property to <code>background</code>.</p>
</li>
<li><p>Use the <code>linear-gradient</code> function, and pass in the <code>hsl</code> function with the values <code>186</code> for hue, <code>76%</code> for saturation, and <code>16%</code> for lightness as the first color argument.</p>
</li>
<li><p>As the second color argument, pass in the <code>hsl</code> function with the values <code>223</code> for hue, <code>90%</code> for saturation, and <code>60%</code> for lightness.</p>
</li>
<li><p>And as the third color argument, pass in the <code>hsl</code> function with the values <code>240</code> for hue, <code>56%</code> for saturation, and <code>42%</code> for lightness.</p>
</li>
<li><p>Now that the markers have the correct colors, it’s time to build the marker sleeves. Start with the red marker.</p>
<p>Inside the red marker <code>div</code> element, create a new <code>div</code> element and give it a class of <code>sleeve</code>.</p>
</li>
<li><p>Create a new CSS rule that targets the class <code>sleeve</code>. Set the <code>width</code> property to <code>110px</code>, and the <code>height</code> property to <code>25px</code>.</p>
</li>
<li><p>To make the marker look more realistic, give the sleeve a transparent white color.</p>
<p>First, set the sleeve element’s <code>background-color</code> to <code>white</code>.</p>
</li>
<li><p>Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more transparent, and you can see through the glass to the other side.</p>
<p>With the CSS <code>opacity</code> property, you can control how opaque or transparent an element is. With the value <code>0</code>, or 0%, the element will be completely transparent, and at <code>1.0</code>, or 100%, the element will be completely opaque like it is by default.</p>
<p>In the <code>.sleeve</code> CSS rule, set the <code>opacity</code> property to <code>0.5</code>.</p>
</li>
<li><p>Another way to set the opacity for an element is with the alpha channel. Similar to the <code>opacity</code> property, the alpha channel controls how transparent or opaque a color is.</p>
<p>You’ve already set sleeve’s opacity with a named color and the <code>opacity</code> property, but you can add an alpha channel to the other CSS color properties.</p>
<p>Inside the <code>.sleeve</code> rule, remove the <code>opacity</code> property and value.</p>
</li>
<li><p>You’re already familiar with using the <code>rgb</code> function to set colors. To add an alpha channel to an <code>rgb</code> color, use the <code>rgba</code> function instead.</p>
<p>The <code>rgba</code> function works just like the <code>rgb</code> function, but takes one more number from <code>0</code> to <code>1.0</code> for the alpha channel:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rgba(redValue, greenValue, blueValue, alphaValue);</span><br></pre></td></tr></table></figure>

<p>You can also use an alpha channel with <code>hsl</code> and <code>hex</code> colors. You will see how to do that soon.</p>
<p>In the <code>.sleeve</code> rule, use the <code>rgba</code> function to set the <code>background-color</code> property to pure white with 50% opacity.</p>
</li>
<li><p>Your sleeve is looking good, but it would look even better if it was positioned more toward the right side of the marker. One way to do that is to add another element before the sleeve to push it to the right.</p>
<p>Add a new <code>div</code> with the class <code>cap</code> before the sleeve <code>div</code> element.</p>
</li>
<li><p>Create a new CSS rule to target the class <code>cap</code>. In the new rule, set the <code>width</code> property to <code>60px</code>, and the <code>height</code> to <code>25px</code>.</p>
</li>
<li><p>It looks like your sleeve disappeared, but don’t worry – it’s still there. What happened is that your new cap <code>div</code> is taking up the entire width of the marker, and is pushing the sleeve down to the next line.</p>
<p>This is because the default <code>display</code> property for <code>div</code> elements is <code>block</code>. So when two <code>block</code> elements are next to each other, they stack like actual blocks. For example, your marker elements are all stacked on top of each other.</p>
<p>To position two <code>div</code> elements on the same line, set their <code>display</code> properties to <code>inline-block</code>.</p>
<p>Create a new rule to target both the <code>cap</code> and <code>sleeve</code> classes, and set <code>display</code> to <code>inline-block</code>.</p>
</li>
<li><p>In the last project, you learned a little bit about borders and the <code>border-color</code> property.</p>
<p>All HTML elements have borders, though they’re usually set to <code>none</code> by default. With CSS, you can control all aspects of an element’s border, and set the border on all sides, or just one side at a time. For a border to be visible, you need to set its width and style.</p>
<p>In the <code>.sleeve</code> CSS rule, add the <code>border-left-width</code> property with the value <code>10px</code>.</p>
</li>
<li><p>Borders have several styles to choose from. You can make your border a solid line, but you can also use a dashed or dotted line if you prefer. Solid border lines are probably the most common.</p>
<p>In the <code>.sleeve</code> CSS rule, add the <code>border-left-style</code> property with the value <code>solid</code>.</p>
</li>
<li><p>Your border should be visible now. If no color is set, black is used by default.</p>
<p>But to make your code more readable, it’s better to set the border color explicitly.</p>
<p>In the <code>.sleeve</code> CSS rule, add the <code>border-left-color</code> property with the value <code>black</code>.</p>
</li>
<li><p>The <code>border-left</code> shorthand property lets you to set the left border’s width, style, and color at the same time.</p>
<p>Here is the syntax:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-left</span>: width style color;</span><br></pre></td></tr></table></figure>

<p>In the <code>.sleeve</code> CSS rule, replace the <code>border-left-width</code>, <code>border-left-style</code>, and <code>border-left-color</code> properties with the <code>border-left</code> shorthand property. The values for the width, style, and color of the left border should be the same.</p>
</li>
<li><p>Your marker is looking good. But to make it look even more realistic, you can change the border style to double solid borders.</p>
<p>For the <code>border-left</code> shorthand property, change the border style value from <code>solid</code> to <code>double</code>.</p>
</li>
<li><p>The black color of your border looks pretty harsh against the more transparent sleeve. You can use an alpha channel to lower the opacity of the black border.</p>
<p>For the <code>border-left</code> shorthand property, use the <code>rgba</code> function to set the color value to pure black with 75% opacity.</p>
</li>
<li><p>Awesome. Your red marker is looking good. Now all you need to do is add the caps and sleeves to your other markers.</p>
<p>Add a cap and sleeve to both the green and blue markers. You can just copy the <code>div</code> elements from the red marker and paste them into the other two markers.</p>
</li>
<li><p>The last thing you’ll do is add a slight shadow to each marker to make them look even more realistic.</p>
<p>The <code>box-shadow</code> property lets you apply one or more shadows around an element. Here is basic syntax:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: offsetX offsetY color;</span><br></pre></td></tr></table></figure>

<p>Here’s how the <code>offsetX</code> and <code>offsetY</code> values work:</p>
<ul>
<li>both <code>offsetX</code> and <code>offsetY</code> accept number values in <code>px</code> and other CSS units</li>
<li>a positive <code>offsetX</code> value moves the shadow right and a negative value moves it left</li>
<li>a positive <code>offsetY</code> value moves the shadow down and a negative value moves it up</li>
<li>if you want a value of zero (<code>0</code>) for any or both <code>offsetX</code> and <code>offsetY</code>, you don’t need to add a unit. Every browser understands that zero means no change.</li>
</ul>
<p>The height and width of the shadow is determined by the height and width of the element it’s applied to. You can also use an optional <code>spreadRadius</code> value to spread out the reach of the shadow. More on that later.</p>
<p>Start by adding a simple shadow to the red marker.</p>
<p>In the <code>.red</code> CSS rule, add the <code>box-shadow</code> property with the values <code>5px</code> for <code>offsetX</code>, <code>5px</code> for <code>offsetY</code>, and <code>red</code> for <code>color</code>.</p>
</li>
<li><p>As you can see, you added a simple red shadow around your marker that’s 5 pixels to the right, and 5 pixels down.</p>
<p>But what if you wanted to position your shadow on the opposite side? You can do that by using negative values for <code>offsetX</code> and <code>offsetY</code>.</p>
<p>Update the values for the <code>box-shadow</code> property, and set <code>offsetX</code> to <code>-5px</code>, and <code>offsetY</code> to <code>-5px</code>.</p>
</li>
<li><p>Notice that the edges of the shadow are sharp. This is because there is an optional <code>blurRadius</code> value for the <code>box-shadow</code> property:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: offsetX offsetY blurRadius color;</span><br></pre></td></tr></table></figure>

<p>If a <code>blurRadius</code> value isn’t included, it defaults to <code>0</code> and produces sharp edges. The higher the value of <code>blurRadius</code>, the greater the blurring effect is.</p>
<p>In the <code>.green</code> CSS rule, add the <code>box-shadow</code> property with the values <code>5px</code> for <code>offsetX</code>, <code>5px</code> for <code>offsetY</code>, <code>5px</code> for <code>blurRadius</code>, and <code>green</code> for <code>color</code>.</p>
</li>
<li><p>But what if you wanted to expand the shadow out further? You can do that with the optional <code>spreadRadius</code> value:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: offsetX offsetY blurRadius spreadRadius color;</span><br></pre></td></tr></table></figure>

<p>Like <code>blurRadius</code>, <code>spreadRadius</code> defaults to <code>0</code> if it isn’t included.</p>
<p>Practice by adding a 5 pixel shadow directly around the blue marker.</p>
<p>In the <code>.blue</code> CSS rule, add the <code>box-shadow</code> property with the values <code>0</code> for <code>offsetX</code>, <code>0</code> for <code>offsetY</code>, <code>0</code> for <code>blurRadius</code>, <code>5px</code> for <code>spreadRadius</code>, and <code>blue</code> for <code>color</code>.</p>
</li>
<li><p>Now that you’re familiar with the <code>box-shadow</code> property you can finalize the shadows, starting with the one for the red marker.</p>
<p>In the <code>.red</code> CSS rule, update the values for the <code>box-shadow</code> property so <code>offsetX</code> is <code>0</code>,<code>offsetY</code> is <code>0</code>, <code>blurRadius</code> is <code>20px</code>, <code>spreadRadius</code> is <code>0</code>, and <code>color</code> is <code>red</code>. Remember that you don’t need to add units to a zero value.</p>
</li>
<li><p>Next, update the <code>color</code> value of the red marker’s <code>box-shadow</code> property.</p>
<p>Replace the named color with the <code>rgba</code> function. Use the values <code>83</code> for red, <code>14</code> for green, <code>14</code> for blue and <code>0.8</code> for the alpha channel.</p>
</li>
<li><p>The shadows for your green and blue markers will have the same position, blur, and spread. The only difference will be the colors.</p>
<p>In the <code>.green</code> and <code>.blue</code> CSS rules, update the values for the <code>box-shadow</code> properties so <code>offsetX</code> is <code>0</code>,<code>offsetY</code> is <code>0</code>, <code>blurRadius</code> is <code>20px</code>, and <code>spreadRadius</code> is <code>0</code>. Leave the colors as <code>green</code> and <code>blue</code> for now.</p>
</li>
<li><p>For the green marker’s <code>box-shadow</code> property, replace the named color with a hex color code. Use the values <code>3B</code> for red, <code>7E</code> for green, <code>20</code> for blue, and <code>CC</code> for the alpha channel.</p>
</li>
<li><p>Finally, for the blue marker’s <code>box-shadow</code> property, replace the named color with the <code>hsla</code> function. Use the values <code>223</code> for hue, <code>59%</code> for saturation, <code>31%</code> for lightness, and <code>0.8</code> for the alpha channel.</p>
<p>And with that, your set of colored markers is complete! Well done.</p>
</li>
<li><p>```html</p>
<!DOCTYPE html>
<html lang="en"> 
    <head>
        <title>Colored Markers</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="utf-8">
        <link rel="stylesheet" href="styles.css">     
    </head>

<pre><code>&lt;body&gt;
    &lt;h1&gt;CSS Color Markers&lt;/h1&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;marker red&quot;&gt; 
            &lt;div class=&quot;cap&quot;&gt;&lt;/div&gt;
            &lt;div class=&quot;sleeve&quot;&gt;&lt;/div&gt;
        &lt;/div&gt; 
        &lt;div class=&quot;marker green&quot;&gt; 
            &lt;div class=&quot;cap&quot;&gt;&lt;/div&gt;
            &lt;div class=&quot;sleeve&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;marker blue&quot;&gt;               
            &lt;div class=&quot;cap&quot;&gt;&lt;/div&gt;
            &lt;div class=&quot;sleeve&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

&lt;/body&gt;
</code></pre>
</html>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```css</span><br><span class="line">h1 &#123;</span><br><span class="line">  text-align:center; </span><br><span class="line">  /*background-color:rgb(0,255,255);*/</span><br><span class="line">&#125; </span><br><span class="line">.container&#123;</span><br><span class="line">  background-color:rgb(255,255,255); </span><br><span class="line">  padding:10px 0;</span><br><span class="line">&#125;</span><br><span class="line">.marker &#123;</span><br><span class="line">  /* background-color:red;*/ </span><br><span class="line">  height:25px;</span><br><span class="line">  width:200px; </span><br><span class="line">  margin:10px auto;</span><br><span class="line">&#125;  </span><br><span class="line">.cap&#123;</span><br><span class="line">  width:60px;</span><br><span class="line">  height:25px;</span><br><span class="line">&#125;</span><br><span class="line">.sleeve&#123;</span><br><span class="line">  width: 110px;</span><br><span class="line">  height: 25px;</span><br><span class="line">  background-color: rgba(255, 255, 255, 0.5);</span><br><span class="line">  border-left: 10px double rgba(0, 0, 0, 0.75);</span><br><span class="line">&#125; </span><br><span class="line">.cap,</span><br><span class="line">.sleeve&#123;</span><br><span class="line">  display:inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.red&#123;</span><br><span class="line">  /*background-color:rgb(255,127,0);*/</span><br><span class="line">  background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));</span><br><span class="line">  box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);</span><br><span class="line">&#125; </span><br><span class="line">.green&#123;</span><br><span class="line">  background: linear-gradient(180deg, #55680D, #71F53E,#116C31);</span><br><span class="line">  box-shadow: 0 0 20px 0 #3B7E20CC;</span><br><span class="line">&#125;</span><br><span class="line">.blue&#123;</span><br><span class="line">  background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%),hsl(240, 56%, 42%));</span><br><span class="line">  box-shadow: 0 0 20px 0 hsla(223,59%,31%,0.8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>CSS,color</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(五)</title>
    <url>/responsive-web-dedign-%E4%BA%94/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-the-CSS-Box-Model-by-Building-a-Rothko-Painting"><a href="#Learn-the-CSS-Box-Model-by-Building-a-Rothko-Painting" class="headerlink" title="Learn the CSS Box Model by Building a Rothko Painting"></a>Learn the CSS Box Model by Building a Rothko Painting</h4><span id="more"></span>

<ol>
<li><p>By now, you should be familiar with the basic elements an HTML page should have.</p>
<p>Set up your code with a <code>DOCTYPE</code> declaration, an <code>html</code> element with the language set to English, a <code>head</code> element, and a <code>body</code> element.</p>
</li>
<li><p>Within the <code>head</code> element, add a <code>meta</code> tag which sets the <code>charset</code> to <code>UTF-8</code>, and a <code>title</code> element with the value <code>Rothko Painting</code>.</p>
<p>Within the <code>body</code> element, add an <code>img</code> element with a <code>src</code> of <code>https://cdn.freecodecamp.org/curriculum/css-box-model/diagram-1.png</code>.</p>
</li>
<li><p>In the CSS box model, every HTML element is treated as a box with four areas.</p>
<p>Imagine you receive a box from your favorite online retailer – the content is the item in the box, or in our case, a header, paragraph, or image element.</p>
<p>Change the <code>src</code> attribute in the <code>&lt;img&gt;</code> from <code>https://cdn.freecodecamp.org/curriculum/css-box-model/diagram-1.png</code> to <code>https://cdn.freecodecamp.org/curriculum/css-box-model/diagram-2.png</code>.</p>
</li>
<li><p>The content is surrounded by a space called padding, similar to how bubble wrap separates an item from the box around it.</p>
<p>Think of the border like the cardboard box your item was shipped in.</p>
<p>Change the <code>src</code> attribute to <code>https://cdn.freecodecamp.org/curriculum/css-box-model/diagram-3.png</code></p>
</li>
<li><p>Margin is the area outside of the box, and can be used to control the space between other boxes or elements.</p>
<p>Here the bottom element has a larger top margin, pushing it further down the page.</p>
<p>Now that you understand the CSS box model, let’s get started on the Rothko painting.</p>
<p>Remove the <code>&lt;img&gt;</code> element.</p>
</li>
<li><p>Add a <code>div</code> element in the <code>body</code>.</p>
<p>Set the <code>class</code> attribute equal to <code>canvas</code>. For example, <code>&lt;div class=&quot;my-div&quot;&gt;</code>.</p>
<p>This will act as the canvas for your painting.</p>
</li>
<li><p>Before you can start styling the <code>div</code> you added, you need to link your CSS to your HTML.</p>
<p>Add a <code>link</code> element to link your <code>styles.css</code> file. Set the <code>href</code> to <code>styles.css</code>, and remember to set the <code>rel</code> attribute to <code>stylesheet</code>.</p>
</li>
<li><p>Time for CSS.</p>
<p>Even though your <code>&lt;div&gt;</code> has no text, it’s still treated as a box with content. Write a CSS rule that uses the <code>.canvas</code> class selector and set its <code>width</code> to 500 pixels. Here’s a CSS rule that sets the width of the class <code>card</code> to 300 pixels:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Add the <code>height</code> property with the value <code>600px</code> to your <code>.canvas</code> rule.</p>
</li>
<li><p>Change the <code>background-color</code> of the canvas to <code>#4d0f00</code>.</p>
</li>
<li><p>Every painting needs a frame.</p>
<p>Wrap the <code>.canvas</code> element in another <code>div</code>. Give that <code>div</code> the <code>frame</code> class.</p>
</li>
<li><p>Write a new rule using the <code>.frame</code> class selector.</p>
<p>Use the <code>border</code> shorthand declaration to give the <code>.frame</code> element a solid, black border with a width of <code>50px</code>.</p>
</li>
<li><p>The frame is much too wide.</p>
<p>In <code>.frame</code>, set its <code>width</code> to 500 pixels.</p>
</li>
<li><p>Use padding to adjust the spacing within an element.</p>
<p>In <code>.frame</code>, use the <code>padding</code> shorthand property to increase the space between the <code>.frame</code> and <code>.canvas</code> elements by <code>50px</code>. The shorthand will increase space in the top, bottom, left, and right of the element’s border and canvas within.</p>
</li>
<li><p>Use margins to adjust the spacing outside of an element.</p>
<p>Using the <code>margin</code> property, give the <code>.frame</code> element vertical margin of <code>20px</code>, and horizontal margin of <code>auto</code>. This will move the frame down 20 pixels and horizontally center it on the page.</p>
</li>
<li><p>Add a new <code>div</code> element inside of your <code>.canvas</code> element.</p>
<p>Give the new <code>div</code> the <code>class</code> attribute with a value of <code>one</code>. This will be your first rectangle.</p>
</li>
<li><p>Write a new rule that targets <code>.one</code> and set its <code>width</code> to 425 pixels.</p>
</li>
<li><p>Now set the <code>height</code> for <code>.one</code> to 150 pixels.</p>
</li>
<li><p>Set the <code>background-color</code> of <code>.one</code> to <code>#efb762</code>.</p>
</li>
<li><p>Use margins to position the <code>.one</code> element on the canvas.</p>
<p>Add the shorthand <code>margin</code> property with a vertical margin of <code>20px</code> and a horizontal margin of <code>auto</code>.</p>
</li>
<li><p>Now <code>.one</code> is centered horizontally, but its top margin is pushing past the canvas and onto the frame’s border, shifting the entire canvas down 20 pixels.</p>
<p>Add <code>padding</code> of <code>1px</code> to the <code>.canvas</code> element to give the <code>.one</code> element something solid to push off of.</p>
</li>
<li><p>Adding 1 pixel of padding to the top, bottom, left, and right of the canvas changed its dimensions to 502 pixels x 602 pixels.</p>
<p>Replace the <code>padding</code> property with <code>overflow</code> set to <code>hidden</code> - changing the canvas back to its original dimensions.</p>
</li>
<li><p>Add another <code>div</code> with a <code>class</code> value of <code>two</code> just below your <code>one</code> element. This will be your second rectangle.</p>
</li>
<li><p>Create a new CSS rule using the <code>.two</code> selector and set its <code>width</code> to 475 pixels.</p>
</li>
<li><p>Set the <code>height</code> of the <code>.two</code> element to 200 pixels.</p>
</li>
<li><p>Set the <code>background-color</code> of the <code>.two</code> element to <code>#8f0401</code>.</p>
</li>
<li><p>Center the <code>.two</code> element by setting its <code>margin</code> to <code>auto</code>.</p>
</li>
<li><p>Create a new <code>div</code> with a <code>class</code> value of <code>three</code> right under the <code>.two</code> element. This will be your third rectangle.</p>
</li>
<li><p>You don’t always have to use pixels when sizing an element.</p>
<p>Create a new rule, <code>.three</code>, and set its <code>width</code> to <code>91%</code>.</p>
</li>
<li><p>Set the <code>height</code> of <code>.three</code> to <code>28%</code>.</p>
</li>
<li><p>Change the <code>background-color</code> of <code>.three</code> to <code>#b20403</code>.</p>
</li>
<li><p>Center the <code>.three</code> element on the canvas by setting its <code>margin</code> to <code>auto</code>.</p>
</li>
<li><p>It’s helpful to have your margins push in one direction.</p>
<p>In this case, the bottom margin of the <code>.one</code> element pushes <code>.two</code> down 20 pixels.</p>
<p>In the <code>.two</code> selector, use <code>margin</code> shorthand property to set top margin to <code>0</code>, horizontal margin to <code>auto</code>, and bottom margin to <code>20px</code>. This will remove its top margin, horizontally center it, and set its bottom margin to 20 pixels.</p>
</li>
<li><p>The colors and shapes of your painting are too sharp to pass as a Rothko.</p>
<p>Use the <code>filter</code> property to <code>blur</code> the painting by <code>2px</code> in the <code>.canvas</code> element.</p>
<p>Here’s an example of a rule that add a 3px <code>blur</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">3px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Create a rule that targets both <code>.one</code> and <code>.two</code> and increase their <code>blur</code> effect by 1 pixel.</p>
</li>
<li><p>Increase the <code>blur</code> of <code>.three</code> by 2 pixels.</p>
</li>
<li><p>The rectangles are too small and their edges don’t have the soft quality of a painting.</p>
<p>Increase the area and soften the edges of <code>.one</code> by setting its <code>box-shadow</code> to <code>0 0 3px 3px #efb762</code>.</p>
</li>
<li><p>The rectangles are too small and their edges don’t have the soft quality of a painting.</p>
<p>Increase the area and soften the edges of <code>.one</code> by setting its <code>box-shadow</code> to <code>0 0 3px 3px #efb762</code>.</p>
</li>
<li><p>Add a <code>box-shadow</code> to <code>.three</code> with the values <code>0 0 5px 5px #b20403</code>.</p>
</li>
<li><p>The corners of each rectangle are still too sharp.</p>
<p>Round each corner of the <code>.one</code> element by 9 pixels, using the <code>border-radius</code> property.</p>
</li>
<li><p>Use the <code>border-radius</code> property on the <code>.two</code> selector, to set its top-left radius and bottom-right radius to <code>8px</code>, and top-right radius and bottom-left radius to <code>10px</code>.</p>
</li>
<li><p>The <code>border-radius</code> property accepts up to four values to round the top-left, top-right, bottom-right, and bottom-left corners.</p>
<p>Round the top-left corner of <code>.three</code> by 30 pixels, the top-right by 25 pixels, the bottom-right by 60 pixels, and bottom-left by 12 pixels.</p>
</li>
<li><p>Rotate each rectangle to give them more of an imperfect, hand-painted look.</p>
<p>Use the <code>transform</code> property on the <code>.one</code> selector to <code>rotate</code> it counter clockwise by 0.6 degrees.</p>
</li>
<li><p>Rotate the <code>.two</code> element clockwise by 0.4 degrees.</p>
</li>
<li><p>Rotate <code>.three</code> counter clockwise by 0.2 degrees.</p>
<p>With this final step, your Rothko painting is now complete.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Rothko Painting<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;frame&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.canvas</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4d0f00</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.frame</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">425px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efb762</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#efb762</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">9px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">0.6deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">475px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#8f0401</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#8f0401</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0.4deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span>, <span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">91%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b20403</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">2px</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#b20403</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">30px</span> <span class="number">25px</span> <span class="number">60px</span> <span class="number">12px</span>; </span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">0.2deg</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(六)</title>
    <url>/responsive-web-dedign-%E5%85%AD/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-CSS-Flexbox-by-Building-a-Photo-Gallery"><a href="#Learn-CSS-Flexbox-by-Building-a-Photo-Gallery" class="headerlink" title="Learn CSS Flexbox by Building a Photo Gallery"></a>Learn CSS Flexbox by Building a Photo Gallery</h4><span id="more"></span>

<ol>
<li><p>Begin with your standard HTML boilerplate. Add a <code>DOCTYPE</code> declaration, an <code>html</code> element, a <code>head</code> element, and a <code>body</code> element.</p>
<p>Add the <code>lang</code> attribute to the opening <code>&lt;html&gt;</code> tag with <code>en</code> set as the value.</p>
</li>
<li><p>Within your <code>head</code> element, add a <code>meta</code> tag with the <code>name</code> set to <code>viewport</code> and the <code>content</code> set to <code>width=device-width, initial-scale=1</code>.</p>
<p>Also add a <code>meta</code> tag with the <code>charset</code> set to <code>UTF-8</code>.</p>
</li>
<li><p>Within your <code>head</code> element, add a <code>title</code> element with the text set to <code>Photo Gallery</code>, and a <code>link</code> element to add your <code>styles.css</code> file to the page.</p>
</li>
<li><p>Add a <code>header</code> element within the <code>body</code> element and assign a class of <code>header</code> to it.</p>
<p>Inside the <code>header</code>, create an <code>h1</code> with <code>css flexbox photo gallery</code> as the text.</p>
</li>
<li><p>Below your <code>.header</code> element, create a new <code>div</code> element and assign it a <code>class</code> of <code>gallery</code>. This <code>div</code> will act as a container for the gallery images.</p>
<p>Inside that <code>.gallery</code> element, create nine <code>img</code> elements.</p>
</li>
<li><p>Next, give each <code>img</code> a <code>src</code> attribute according to its order in the document. The first <code>img</code> should have a <code>src</code> of <code>https://cdn.freecodecamp.org/curriculum/css-photo-gallery/1.jpg</code>. The rest should be the same, except replace the <code>1</code> with the number the <code>img</code> is in the document.</p>
</li>
<li><p>Normalize your box model by creating a <code>*</code> selector and setting the <code>box-sizing</code> property to <code>border-box</code> as the value.</p>
</li>
<li><p>Your images are too big. Create a <code>.gallery img</code> selector to target them. Give them all a <code>width</code> of <code>100%</code> and a <code>max-width</code> of <code>350px</code> so they shrink as needed but don’t get too big.</p>
<p>Also set the <code>height</code> property to <code>300px</code> to keep your images a uniform size.</p>
</li>
<li><p>Remove the margin from your <code>body</code> element, set the <code>font-family</code> to <code>sans-serif</code>, and give it a <code>background-color</code> of <code>#f5f6f7</code> as the value.</p>
</li>
<li><p>Align your <code>.header</code> text in the center. Make the text uppercase using the <code>text-transform</code> property with <code>uppercase</code> as the value.</p>
<p>Give it a padding of <code>32px</code> on all sides. Set the background to <code>#0a0a23</code> and the text to <code>#fff</code> as the color values.</p>
<p>Add a <code>border-bottom</code> with <code>4px solid #fdb347</code> as the value.</p>
</li>
<li><p>Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.</p>
<p>To use it, give an element a <code>display</code> property of <code>flex</code>. This will make the element a <em>flex container</em>. Any direct children of a flex container are called <em>flex items</em>.</p>
<p>Create a <code>.gallery</code> selector and make it a flex container.</p>
</li>
<li><p>Flexbox has a main and cross axis. The main axis is defined by the <code>flex-direction</code> property, which has four possible values:</p>
<ul>
<li><code>row</code> (default): horizontal axis with flex items from left to right</li>
<li><code>row-reverse</code>: horizontal axis with flex items from right to left</li>
<li><code>column</code>: vertical axis with flex items from top to bottom</li>
<li><code>column-reverse</code>: vertical axis with flex items from bottom to top</li>
</ul>
<blockquote>
<p>The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.</p>
<p>Try the different values to see how they affect the layout.</p>
<p>When you are done, set an explicit <code>flex-direction</code> of <code>row</code> on the <code>.gallery</code> element.</p>
</blockquote>
</li>
<li><p>The <code>flex-wrap</code> property determines how your flex items behave when the flex container is too small. Setting it to <code>wrap</code> will allow the items to wrap to the next row or column. <code>nowrap</code> (default) will prevent your items from wrapping and shrink them if needed.</p>
<p>Make it so your flex items wrap to the next row when they run out of space.</p>
</li>
<li><p>The <code>justify-content</code> property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.</p>
<p>Give your <code>.gallery</code> selector a <code>justify-content</code> property with <code>center</code> as the value.</p>
</li>
<li><p>The <code>align-items</code> property positions the flex content along the cross axis. In this case, with your <code>flex-direction</code> set to <code>row</code>, your cross axis would be vertical.</p>
<p>To vertically center your images, give your <code>.gallery</code> selector an <code>align-items</code> property with <code>center</code> as the value.</p>
</li>
<li><p>Give your <code>.gallery</code> selector a <code>padding</code> property set to <code>20px 10px</code> to create some space around the container.</p>
<p>Then, give it a <code>max-width</code> of <code>1400px</code> and add a <code>margin</code> of <code>0 auto</code> to center it.</p>
</li>
<li><p>Notice how some of your images have become distorted. This is because the images have different aspect ratios. Rather than setting each aspect ratio individually, you can use the <code>object-fit</code> property to determine how images should behave.</p>
<p>Give your <code>.gallery img</code> selector the <code>object-fit</code> property and set it to <code>cover</code>. This will tell the image to fill the <code>img</code> container while maintaining aspect ratio, resulting in cropping to fit.</p>
</li>
<li><p>Your images need some space between them.</p>
<p>The <code>gap</code> CSS shorthand property sets the gaps, also knowns as gutters, between rows and columns. The <code>gap</code> property and its <code>row-gap</code> and <code>column-gap</code> sub-properties provide this functionality for flex, grid, and multi-column layout. You apply the property to the container element.</p>
<p>Give your <code>.gallery</code> flex container a <code>gap</code> property with <code>16px</code> as the value.</p>
</li>
<li><p>Smooth out your images a bit by giving the <code>.gallery img</code> selector a <code>border-radius</code> property with <code>10px</code> set as the value.</p>
</li>
<li><p>The <code>::after</code> pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same <code>width</code> as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set <code>justify-content: center</code> on the flex container.</p>
<p>Example:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">860px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create a new selector using an <code>::after</code> pseudo-element on the <code>.gallery</code> element. Add a <code>content</code> property set to an empty string <code>&quot;&quot;</code> and <code>350px</code> set for the <code>width</code> property.</p>
</li>
<li><p>The <code>alt</code> image attribute should describe the image content. Screen readers announce the alternative text in place of images. If the image can’t be loaded, this text is presented in place of the image.</p>
<p>To complete the project, add an <code>alt</code> attribute to all nine of your cat images to describe them. Use a value at least five characters long for each.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Photo Gallery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>css flexbox photo gallery<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/1.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/2.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/3.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/4.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/5.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/6.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/7.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/8.jpg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/curriculum/css-photo-gallery/9.jpg&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5f6f7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid <span class="number">#fdb347</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
        <tag>Flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(四)</title>
    <url>/responsive-web-dedign-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-HTML-Forms-by-Building-a-Registration-Form"><a href="#Learn-HTML-Forms-by-Building-a-Registration-Form" class="headerlink" title="Learn HTML Forms by Building a Registration Form"></a>Learn HTML Forms by Building a Registration Form</h4><span id="more"></span>

<ol>
<li><p>Welcome to the Registration Form project! Start by adding the declaration at the top of the document so the browser knows what type of document it’s reading.<code>!DOCTYPE html</code></p>
</li>
<li><p>Below the <code>DOCTYPE</code>, add an <code>html</code> element with a <code>lang</code> attribute set to <code>en</code>, so that you have a place to start putting some code.</p>
</li>
<li><p>Next, add opening and closing <code>head</code> and <code>body</code> tags within the <code>html</code> element.</p>
</li>
<li><p>Add a <code>title</code> and a <code>meta</code> element to the <code>head</code>. Give your project a title of <code>Registration Form</code>, and give a <code>charset</code> attribute with a value of <code>UTF-8</code> to your <code>meta</code> element.</p>
</li>
<li><p>Nest a self-closing <code>link</code> element within the <code>head</code> element. Give it a <code>rel</code> attribute with value of <code>stylesheet</code> and an <code>href</code> attribute with a value of <code>styles.css</code>.</p>
</li>
<li><p>Within the <code>body</code>, provide a heading context for the content, by adding an <code>h1</code> with the text <code>Registration Form</code>.</p>
</li>
<li><p>Below the heading, use the following text within a paragraph element to encourage users to register:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Please fill out this form with the required information</span><br></pre></td></tr></table></figure></li>
<li><p>The <code>vh</code> unit stands for viewport height, and is relative to 1% of the <code>height</code> of the viewport.</p>
<p>It is time to spruce the project up with some CSS. Begin by giving the <code>body</code> a <code>width</code> of <code>100%</code>, and a <code>height</code> of <code>100vh</code>.</p>
</li>
<li><p>Now, get rid of the horizontal scroll-bar, by setting the <code>body</code> default <code>margin</code> added by some browsers to <code>0</code>.</p>
</li>
<li><p>That is better. Now, make the background easy on the eyes, by changing the <code>body</code> <code>background-color</code> to <code>#1b1b32</code>. Then, to see the text, change the <code>color</code> to <code>#f5f6f7</code>.</p>
</li>
<li><p>As suggested by the title, you are creating a form. So, after the <code>p</code> element, insert a <code>form</code> with an <code>action</code> attribute targeting <code>https://register-demo.freecodecamp.org</code>.</p>
</li>
<li><p>The <code>method</code> attribute specifies how to send form-data to the URL specified in the <code>action</code> attribute. The form-data can be sent via a <code>GET</code> request as URL parameters (with <code>method=&quot;get&quot;</code>) or via a <code>POST</code> request as data in the request body (with <code>method=&quot;post&quot;</code>).</p>
<p>Set the <code>method</code> attribute to send your form data via a <code>POST</code> request.</p>
</li>
<li><p>As the form will have three distinct sections, add three <code>fieldset</code> elements within the <code>form</code> element.</p>
</li>
<li><p>The first <code>fieldset</code> will hold name, email, and password fields. Start by adding four <code>label</code> elements to the first <code>fieldset</code>.</p>
</li>
<li><p>Add the following text to the <code>label</code> elements:</p>
<ul>
<li><code>Enter Your First Name:</code></li>
<li><code>Enter Your Last Name:</code></li>
<li><code>Enter Your Email:</code></li>
<li><code>Create a New Password:</code></li>
</ul>
</li>
<li><p>The <code>rem</code> unit stands for root <code>em</code>, and is relative to the font size of the <code>html</code> element.</p>
<p>As <code>label</code> elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add <code>display: block</code> to the <code>label</code> element, and add a <code>margin</code> of <code>0.5rem 0</code>, to separate them from each other.</p>
</li>
<li><p>Nest an <code>input</code> element within each <code>label</code>. Be sure to add each <code>input</code> after the <code>label</code> text, and include a space after the colon.</p>
</li>
<li><p>Following accessibility best practices, link the <code>input</code> elements and the <code>label</code> elements together using the <code>for</code> attribute.</p>
<p>Use <code>first-name</code>, <code>last-name</code>, <code>email</code>, and <code>new-password</code> as values for the respective <code>id</code> attributes.</p>
</li>
<li><p>Specifying the <code>type</code> attribute of a form element is important for the browser to know what kind of data it should expect. If the <code>type</code> is not specified, the browser will default to <code>text</code>.</p>
<p>Give the first two <code>input</code> elements a <code>type</code> attribute of <code>text</code>, the third a <code>type</code> attribute of <code>email</code>, and the fourth a <code>type</code> attribute of <code>password</code>.</p>
<p>The <code>email</code> type only allows emails with a <code>@</code> and a <code>.</code> in the domain. The <code>password</code> type obscures the input, and warns if the site does not use HTTPS.</p>
</li>
<li><p>The first <code>input</code> element with a <code>type</code> of <code>submit</code> is automatically set to submit its nearest parent <code>form</code> element.</p>
<p>To handle the form submission, after the last <code>fieldset</code> element add an <code>input</code> element with the <code>type</code> attribute set to <code>submit</code> and the <code>value</code> attribute set to <code>Submit</code>.</p>
</li>
<li><p>At this point, you should be able to submit the form. However, you might notice not much happens.</p>
<p>To make the form more interactive, add the <code>required</code> attribute to the <code>input</code> elements in the first <code>fieldset</code>.</p>
<p>Now, if you try to submit the form without filling in the required fields, you will see an error message.</p>
</li>
<li><p>Certain <code>type</code> attribute values come with built-in form validation. For example, <code>type=&quot;email&quot;</code> requires that the value be a valid email address.</p>
<p>Add custom validation to the password <code>input</code> element, by adding a <code>minlength</code> attribute with a value of <code>8</code>. Doing so prevents inputs of less than 8 characters being submitted.</p>
</li>
<li><p>With <code>type=&quot;password&quot;</code> you can use the <code>pattern</code> attribute to define a regular expression that the password must match to be considered valid.</p>
<p>Add a <code>pattern</code> attribute to the password <code>input</code> element to require the input match: <code>[a-z0-5]&#123;8,&#125;</code></p>
<p>The above is a regular expression which matches eight or more lowercase letters or the digits <code>0</code> to <code>5</code>. Then, remove the <code>minlength</code> attribute, and try it out.</p>
</li>
<li><p>Let us go to the next part of the registration form. This section will ask for the type of account the user is opening, and will confirm the user has read the terms and conditions.</p>
<p>Start by adding three <code>label</code> elements to the second <code>fieldset</code>.</p>
</li>
<li><p>Users will be allowed to choose either a <code>Personal Account</code> or <code>Business Account</code>.</p>
<p>To do this, within each of the first two <code>label</code> elements, add one <code>input</code> element with <code>type=&quot;radio&quot;</code>.</p>
</li>
<li><p>For the terms and conditions, add an <code>input</code> with a <code>type</code> of <code>checkbox</code> to the third <code>label</code> element. Make this <code>input</code> element <code>required</code> because users should not sign up without reading the terms and conditions.</p>
</li>
<li><p>Within each corresponding <code>label</code> element, and immediately after the <code>input</code> element, add a space and add the following text:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Personal Account</span><br><span class="line">Business Account</span><br><span class="line">I accept the terms and conditions</span><br></pre></td></tr></table></figure></li>
<li><p>You only want one radio input to be selectable at a time. However, the form does not know the radio inputs are related.</p>
<p>To relate the radio inputs, give them the same <code>name</code> attribute with a value of <code>account-type</code>. Now, it is not possible to select both radio inputs at the same time.</p>
</li>
<li><p>Follow accessibility best practices by linking the <code>input</code> elements and the <code>label</code> elements in the second <code>fieldset</code>.</p>
<p>Use <code>personal-account</code>, <code>business-account</code>, and <code>terms-and-conditions</code> as values for the respective <code>id</code> attributes.</p>
</li>
<li><p>To finish this <code>fieldset</code> off, link the text <code>terms and conditions</code> in the third <code>label</code> to the following location:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">https://www.freecodecamp.org/news/terms-of-service/</span><br></pre></td></tr></table></figure></li>
<li><p>Moving on to the final <code>fieldset</code>. What if you wanted to allow a user to upload a profile picture?</p>
<p>Well, the <code>input</code> type <code>file</code> allows just that. Add a <code>label</code> with the text <code>Upload a profile picture:</code> , and nest an <code>input</code> accepting a file upload.</p>
</li>
<li><p>Add another <code>label</code> after the first, with the text <code>Input your age (years):</code> . Then, nest an <code>input</code> with the <code>type</code> of <code>number</code>.</p>
<p>Next, add a <code>min</code> attribute to the <code>input</code> with a value of <code>13</code> because users under the age of 13 should not register. Also, users probably will not be over the age of 120; add a <code>max</code> attribute with a value of <code>120</code>.</p>
<p>Now, if someone tries to submit the form with values outside of the range, a warning will appear, and the form will not submit. Give it a try.</p>
</li>
<li><p>Adding a dropdown to the form is easy with the <code>select</code> element. The <code>select</code> element is a container for a group of <code>option</code> elements, and the <code>option</code> element acts as a label for each dropdown option. Both elements require closing tags.</p>
<p>Start by adding a <code>select</code> element below the two <code>label</code> elements. Then nest 5 <code>option</code> elements within the <code>select</code> element.</p>
</li>
<li><p>Nest the <code>select</code> element (with its <code>option</code> elements) within a <code>label</code> element with the text <code>How did you hear about us?</code>. The text should come before the <code>select</code> element.</p>
</li>
<li><p>The dropdown options are currently empty. To give them content, add the following text to each subsequent <code>option</code> element:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">(select one)</span><br><span class="line">freeCodeCamp News</span><br><span class="line">freeCodeCamp YouTube Channel</span><br><span class="line">freeCodeCamp Forum</span><br><span class="line">Other</span><br></pre></td></tr></table></figure></li>
<li><p>Submitting the form with an option selected would not send a useful value to the server. As such, each <code>option</code> needs to be given a <code>value</code> attribute. Without which, the text content of the <code>option</code> will be submitted to the server.</p>
<p>Give the first <code>option</code> a <code>value</code> of <code>&quot;&quot;</code>, and the subsequent <code>option</code> elements <code>value</code> attributes from <code>1</code> to <code>4</code>.</p>
</li>
<li><p>The <code>textarea</code> element acts like an <code>input</code> element of type <code>text</code>, but comes with the added benefit of being able to receive multi-line text, and an initial number of text rows and columns.</p>
<p>Users will be able to register with a bio. Add a <code>label</code> with the text <code>Provide a bio:</code> at the end of the <code>fieldset</code>. Add a <code>textarea</code> element inside the <code>label</code> element. Note that the <code>textarea</code> requires a closing tag.</p>
</li>
<li><p>Link the applicable form elements and their <code>label</code> elements together.</p>
<p>Use <code>profile-picture</code>, <code>age</code>, <code>referrer</code>, and <code>bio</code> as values for the respective <code>id</code> attributes.</p>
</li>
<li><p>The <code>textarea</code> appears too small. To give it an initial size, you can add the <code>rows</code> and <code>cols</code> attributes.</p>
<p>Add an initial size of <code>3</code> rows and <code>30</code> columns.</p>
</li>
<li><p>To give Campers an idea of what to put in their bio, the <code>placeholder</code> attribute is used. The <code>placeholder</code> accepts a text value, which is displayed until the user starts typing.</p>
<p>Give the <code>textarea</code> a <code>placeholder</code> of <code>I like coding on the beach...</code>.</p>
</li>
<li><p>With form submissions, it is useful, and good practice, to provide each submittable element with a <code>name</code> attribute. This attribute is used to identify the element in the form submission.</p>
<p>Give each submittable element a unique <code>name</code> attribute of your choosing, except for the two <code>radio</code> inputs.</p>
</li>
<li><p>The HTML for the registration form is finished. Now, you can spruce it up a bit.</p>
<p>Start by changing the font to <code>Tahoma</code>, and the font size to <code>16px</code> in the <code>body</code>.</p>
</li>
<li><p>Center the <code>h1</code> and <code>p</code> elements by giving them a <code>margin</code> of <code>1em auto</code>. Then, align their text in the <code>center</code> as well.</p>
</li>
<li><p>Center the <code>form</code> element, by giving it a <code>margin</code> of <code>0 auto</code>. Then, fix its size to a maximum width of <code>500px</code>, and a minimum width of <code>300px</code>. In between that range, allow it to have a <code>width</code> of <code>60vw</code>.</p>
</li>
<li><p>During development, it is useful to see the <code>fieldset</code> default borders. However, they make the content appear too separated.</p>
<p>Remove the <code>border</code>, and add <code>2rem</code> of padding only to the top and bottom of each <code>fieldset</code>. Be sure to remove the <code>padding</code> from the left and right.</p>
</li>
<li><p>To give the <code>fieldset</code> elements a bit of separation, select them and give them a <code>border-bottom</code> of <code>3px solid #3b3b4f</code>.</p>
</li>
<li><p>The border of the last <code>fieldset</code> element looks a little out of place. You can select the last element of a specific type using the <code>last-of-type</code> CSS pseudo-class, like this:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:last-of-type</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>That will select the last <code>p</code> element. Create a new selector that targets the last <code>fieldset</code> element and set its <code>border-bottom</code> to <code>none</code>.</p>
</li>
<li><p>It would be nicer to have the <code>label</code> text appear above the form elements.</p>
<p>Select all <code>input</code>, <code>textarea</code>, and <code>select</code> elements, and make them take up the full width of their parent elements.</p>
<p>Also, add <code>10px</code> of <code>margin</code> to the top of the selected elements. Set the other margins to <code>0</code>.</p>
</li>
<li><p>For the second <code>fieldset</code>, you want the <code>input</code> and <code>label</code> text to appear on the same line.</p>
<p>Start, by giving the <code>input</code> elements in the second <code>fieldset</code> a class of <code>inline</code>.</p>
</li>
<li><p>Select only the <code>.inline</code> elements, and give them <code>width</code> of <code>unset</code>. This will remove the earlier rule which set all the <code>input</code> elements to <code>width: 100%</code>.</p>
</li>
<li><p>Add some space between the <code>.inline</code> elements and the <code>label</code> text, by giving a right <code>margin</code> of <code>0.5em</code>. Also, set all the other margin to <code>0</code>.</p>
</li>
<li><p>If you look close enough, you will notice the <code>.inline</code> elements are too high on the line.</p>
<p>To combat this, set the <code>vertical-align</code> property to <code>middle</code>.</p>
</li>
<li><p>To make the <code>input</code> and <code>textarea</code> elements blend in with the background theme, set their <code>background-color</code> to <code>#0a0a23</code>. Then, give them a <code>1px</code>, <code>solid</code> border with a color of <code>#0a0a23</code>.</p>
</li>
<li><p>Currently, if you type in the <code>input</code> or <code>textarea</code> elements, you will not be able to see the text. Also, their height is too small to be easy to use.</p>
<p>Fix this, by setting the <code>color</code> to <code>#ffffff</code>, and setting their <code>min-height</code> to <code>2em</code>.</p>
</li>
<li><p>You want the <code>select</code> element to remain with a white background, but now it is not getting the same <code>min-height</code> as the <code>input</code> and <code>textarea</code> elements.</p>
<p>Move the <code>min-height</code> property and value so that all three element types have the same <code>min-height</code> value, and the <code>select</code> element still has a white background.</p>
</li>
<li><p>To style the submit button, you can use an <em>attribute</em> selector, which selects an element based on the given attribute value. Here is an example:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;password&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>The above selects <code>input</code> elements with a <code>name</code> attribute value of <code>password</code>.</p>
<p>Now, use the attribute selector to style the submit button with a <code>display</code> of <code>block</code>, and a <code>width</code> of <code>60%</code>.</p>
</li>
<li><p>With a <code>display</code> of <code>block</code> the submit button sits flush against the left edge of its parent.</p>
<p>Use the same technique used to center the <code>form</code> to center the submit button.</p>
</li>
<li><p>To make the submit button look more in line with the rest of the form, give it the same <code>height</code> as the other fields (<code>2em</code>). Also, increase the <code>font-size</code> to <code>1.1rem</code>.</p>
</li>
<li><p>To make the submit button appear more distinct, give it a <code>background-color</code> of <code>#3b3b4f</code>, and a <code>border-color</code> of <code>white</code>.</p>
</li>
<li><p>Lastly, for the submit button, you want to separate it from the <code>fieldset</code> above, and adjust its width to never be below <code>300px</code>.</p>
<p>Change the <code>margin</code> property to include <code>1em</code> on the top and bottom, while leaving the right and left margins set to <code>auto</code>. Then set the width as described above.</p>
</li>
<li><p>Most browsers inject their own default CSS properties and values for different elements. If you look closely, you might be able to notice the file <code>input</code> is smaller than the other text <code>input</code> elements. By default, a <code>padding</code> of <code>1px 2px</code> is given to <code>input</code> elements you can type in.</p>
<p>Using another attribute selector, style the <code>input</code> with a <code>type</code> of <code>file</code> to be the same padding as the other <code>input</code> elements.</p>
</li>
<li><p>Speaking of <code>padding</code>, the submit button is sitting at the bottom of the <code>form</code> element. Add <code>2em</code> of <code>padding</code> only to the bottom of the <code>form</code>.</p>
</li>
<li><p>Last, but not least, change the text color of the <code>terms and conditions</code> link to <code>#dfdfe2</code>.</p>
<p>Well done! You have completed the final part of the <em>Registration Form</em> practice project.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Registration Form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Registration Form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Please fill out this form with the required information<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&#x27;https://register-demo.freecodecamp.org&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;first-name&quot;</span>&gt;</span>Enter Your First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;first-name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;first-name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;last-name&quot;</span>&gt;</span>Enter Your Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;last-name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;last-name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Enter Your Email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;new-password&quot;</span>&gt;</span>Create a New Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;new-password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;new-password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[a-z0-5]&#123;8,&#125;&quot;</span> <span class="attr">required</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;personal-account&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;personal-account&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account-type&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span> /&gt;</span> Personal Account<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;business-account&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;business-account&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account-type&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span> /&gt;</span> Business Account<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;terms-and-conditions&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;terms-and-conditions&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">&quot;terms-and-conditions&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span> /&gt;</span> I accept the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.freecodecamp.org/news/terms-of-service/&quot;</span>&gt;</span>terms and conditions<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;profile-picture&quot;</span>&gt;</span>Upload a profile picture: <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;profile-picture&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>Input your age (years): <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">min</span>=<span class="string">&quot;13&quot;</span> <span class="attr">max</span>=<span class="string">&quot;120&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;referrer&quot;</span>&gt;</span>How did you hear about us?</span><br><span class="line">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>(select one)<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>freeCodeCamp News<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>freeCodeCamp YouTube Channel<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>freeCodeCamp Forum<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>Other<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;bio&quot;</span>&gt;</span>Provide a bio:</span><br><span class="line">          <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;bio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bio&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;I like coding on the beach...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f5f6f7</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Tahoma;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60vw</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto; </span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">fieldset</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#3b3b4f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">fieldset</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line">select &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: unset;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.5em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3b3b4f</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: white;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</span><br><span class="line">  <span class="attribute">min-width</span>:<span class="number">300px</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">1px</span> <span class="number">2px</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#dfdfe2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(七)</title>
    <url>/responsive-web-dedign-%E4%B8%83/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-Typography-by-Building-a-Nutrition-Label"><a href="#Learn-Typography-by-Building-a-Nutrition-Label" class="headerlink" title="Learn Typography by Building a Nutrition Label"></a>Learn Typography by Building a Nutrition Label</h4><span id="more"></span>

<ol>
<li><p>We’ve provided a basic HTML boilerplate for you.</p>
<p>Create an <code>h1</code> element within your <code>body</code> element and give it the text <code>Nutrition Facts</code>.</p>
</li>
<li><p>Below your <code>h1</code> element, add a <code>p</code> element with the text <code>8 servings per container</code>.</p>
</li>
<li><p>Add a second <code>p</code> element with the text <code>Serving size 2/3 cup (55g)</code>.</p>
</li>
<li><p>Within your <code>head</code> element, add a <code>link</code> element with the <code>rel</code> attribute set to <code>stylesheet</code> and the <code>href</code> attribute set to <code>https://fonts.googleapis.com/css?family=Open+Sans:400,700,800</code>.</p>
<p>This will import the <code>Open Sans</code> font family, with the font weight values <code>400</code>, <code>700</code>, and <code>800</code>.</p>
<p>Also add a <code>link</code> element to link your <code>styles.css</code> file.</p>
</li>
<li><p>Create a <code>body</code> selector and give it a <code>font-family</code> set to <code>Open Sans</code> with a fallback of <code>sans-serif</code>.</p>
<p>Remember that fonts with spaces in the name must be wrapped in quotes for CSS.</p>
</li>
<li><p>The font is a bit small. Create an <code>html</code> selector and set the font to have a size of <code>16px</code>.</p>
</li>
<li><p>Wrap your <code>h1</code> and <code>p</code> elements in a <code>div</code> element. Give that <code>div</code> a <code>class</code> attribute set to <code>label</code>.</p>
</li>
<li><p>Borders can be used to group and prioritize content.</p>
<p>Create a <code>.label</code> selector and give it a <code>border</code> set to <code>2px solid black</code>.</p>
</li>
<li><p>Good use of white space can bring focus to the important elements of your page, and help guide your user’s eyes through your text.</p>
<p>Give your <code>.label</code> selector a <code>width</code> property set to <code>270px</code>.</p>
</li>
<li><p>Give your <code>.label</code> selector a <code>margin</code> property set to <code>20px auto</code>, and a <code>padding</code> property set to <code>0 7px</code>.</p>
</li>
<li><p>If you inspect your <code>.label</code> element with your browser’s developer tools, you may notice that it’s actually 288 pixels wide instead of 270. This is because, by default, the browser includes the border and padding when determining an element’s size.</p>
<p>To solve this, reset the box model by creating a <code>*</code> selector and giving it a <code>box-sizing</code> property of <code>border-box</code>.</p>
</li>
<li><p>Remember that the use of <code>h1</code>, <code>h2</code>, and similar tags determine the semantic structure of your HTML. However, you can adjust the CSS of these elements to control the visual flow and hierarchy.</p>
<p>Create an <code>h1</code> rule and set the <code>font-weight</code> property to <code>800</code>. This will make your <code>h1</code> text bolder.</p>
</li>
<li><p>Give your <code>h1</code> selector a <code>text-align</code> property of <code>center</code>.</p>
</li>
<li><p>Fine-tune the placement of your <code>h1</code> by giving it a top and bottom margin of <code>-4px</code> and a left and right margin of <code>0</code>.</p>
</li>
<li><p>Create a <code>p</code> selector and remove all margins.</p>
</li>
<li><p>Lines can help separate and group important content, especially when space is limited.</p>
<p>Create a <code>div</code> element below your <code>h1</code> element, and give it a <code>class</code> attribute set to <code>divider</code>.</p>
</li>
<li><p>Create a selector for your new <code>.divider</code> and set the <code>border-bottom</code> property to <code>1px solid #888989</code>. Also give it a top and bottom margin of <code>2px</code>. It should not have any left or right margin.</p>
</li>
<li><p>The <code>letter-spacing</code> property can be used to adjust the space between each character of text in an element.</p>
<p>Give your <code>h1</code> selector a <code>letter-spacing</code> property set to <code>0.15px</code> to space them out a bit more.</p>
</li>
<li><p>Nutrition labels have a lot of bold text to draw attention to important information. Rather than targeting each element that needs to be bold, it is more efficient to use a class to apply the bold styling to every element.</p>
<p>Give your second <code>p</code> element a <code>class</code> attribute set to <code>bold</code>.</p>
</li>
<li><p>Your new class does not have any styling yet. Create a <code>.bold</code> selector and give it a <code>font-weight</code> property set to <code>800</code> to make the text bold.</p>
<p>Go ahead and remove the <code>font-weight</code> property from your <code>h1</code> selector as well.</p>
</li>
<li><p>Give your <code>h1</code> element a <code>class</code> attribute set to <code>bold</code>. This will make the text bold again.</p>
</li>
<li><p>Horizontal spacing between equally important elements can increase the readability of your text.</p>
<p>Wrap the text <code>2/3 cup (55g)</code> in a <code>span</code> element.</p>
</li>
<li><p>Now we can add the horizontal spacing using <code>flex</code>. In your <code>p</code> selector, add a <code>display</code> property set to <code>flex</code> and a <code>justify-content</code> property set to <code>space-between</code>.</p>
</li>
<li><p>Wrap everything within the <code>.label</code> element in a new <code>header</code> element.</p>
</li>
<li><p>Now update your <code>h1</code> selector to be <code>header h1</code> to specifically target your <code>h1</code> element within your new <code>header</code>.</p>
</li>
<li><p>Create a new <code>div</code> element below your <code>header</code> element, and give it a <code>class</code> attribute set to <code>divider large</code>.</p>
</li>
<li><p>Create a new <code>.large</code> selector and give it a <code>height</code> property set to <code>10px</code>. Also create an <code>.large, .medium</code> selector and set the <code>background-color</code> property to <code>black</code>.</p>
</li>
<li><p>You may notice there is still a small border at the bottom of your <code>.large</code> element. To reset this, give your <code>.large, .medium</code> selector a <code>border</code> property set to <code>0</code>.</p>
<p>Note: the <code>medium</code>(medium) class will be utilized in step 37 for the thinner bars of the nutrition label.</p>
</li>
<li><p>Create a new <code>div</code> below your <code>.large</code> element and give it a <code>class</code> attribute set to <code>calories-info</code>.</p>
</li>
<li><p>Within your <code>.calories-info</code> element, create a <code>div</code> element. Give that <code>div</code> element a <code>class</code> attribute set to <code>left-container</code>. Within the newly created <code>div</code> element, create a <code>h2</code> element with the text <code>Amount per serving</code>. Give the <code>h2</code> element a <code>class</code> attribute set to <code>bold small-text</code>.</p>
</li>
<li><p>The <code>rem</code> unit stands for <code>root em</code>, and is relative to the font size of the <code>html</code> element.</p>
<p>Create a <code>.small-text</code> selector and set the <code>font-size</code> to <code>0.85rem</code>, which would calculate to roughly <code>13.6px</code> (remember that you set your <code>html</code> to have a <code>font-size</code> of <code>16px</code>).</p>
</li>
<li><p>Create a <code>.calories-info h2</code> selector and remove all margins.</p>
</li>
<li><p>Below your <code>.small-text</code> element, create a new <code>p</code> element with the text <code>Calories</code>. Also below the <code>.left-container</code> element, create a new <code>span</code> element with the text <code>230</code>.</p>
</li>
<li><p>Create a new <code>.calories-info</code> selector and give it a <code>display</code> property set to <code>flex</code>. Also give it a <code>justify-content</code> property set to <code>space-between</code> and <code>align-items</code> property set to <code>flex-end</code>.</p>
</li>
<li><p>Create a new <code>.left-container p</code> selector setting the top and bottom margin to <code>-5px</code>, and the left and right margin to <code>-2px</code>. Also set the <code>font-size</code> to <code>2em</code> and <code>font-weight</code> to <code>700</code>.</p>
</li>
<li><p>Create a <code>.calories-info span</code> selector, set its <code>font-size</code> to <code>2.4em</code> and <code>font-weight</code> to <code>700</code>.</p>
</li>
<li><p>Typography is often more art than science. You may have to tweak things like alignment until it looks correct.</p>
<p>Give your <code>.calories-info span</code> selector a <code>margin</code> set to <code>-7px -2px</code>. This will shift your <code>230</code> text into place.</p>
</li>
<li><p>Below your <code>.calories-info</code> element, add a <code>div</code> with the <code>class</code> attribute set to <code>divider medium</code>.5</p>
</li>
<li><p>Create an <code>.medium</code> selector and give it a <code>height</code> property of <code>5px</code>.</p>
</li>
<li><p>Create a new <code>div</code> element below your <code>.medium</code> element. Give it a <code>class</code> attribute set to <code>daily-value small-text</code>. Within this new <code>div</code>, add a <code>p</code> element with the text <code>% Daily Value *</code>, and set the <code>class</code> attribute to <code>bold right</code>.</p>
</li>
<li><p>The text <code>* Daily Value %</code> should be aligned to the right. Create a <code>.right</code> selector and use the <code>justify-content</code> property to do it.</p>
<blockquote>
<p>采用justify-content:flex-end;</p>
</blockquote>
</li>
<li><p>Use your existing <code>.divider</code> element as an example to add a new divider after the <code>p</code> element.</p>
</li>
<li><p>After your last <code>.divider</code> element, create a <code>p</code> element and give it the text <code>Total Fat 8g 10%</code>. Wrap the text <code>Total Fat</code> in a <code>span</code> element with the <code>class</code> of <code>bold</code>. Wrap the text <code>10%</code> in another <code>span</code> element with the <code>class</code> of <code>bold</code>. Finally, nest the <code>Total Fat</code> <code>span</code> element and the text <code>8g</code> in an additional <code>span</code> element for alignment.</p>
</li>
<li><p>Below your element with the <code>Total Fat</code> text, create a new <code>p</code> element with the text <code>Saturated Fat 1g 5%</code>. Wrap the <code>5%</code> in a <code>span</code> with the <code>class</code> attribute set to <code>bold</code>. In this case this is enough to align the percentage to <code>5%</code>.</p>
</li>
<li><p>This new <code>p</code> element will need to be indented. Give it a <code>class</code> set to <code>indent</code>.</p>
</li>
<li><p>Create a new <code>.indent</code> selector and give it a <code>margin-left</code> property set to <code>1em</code>.</p>
</li>
<li><p>Create a <code>.daily-value p</code> selector to target all of your <code>p</code> elements in the <code>daily-value</code> section. Give this new selector a <code>border-bottom</code> set to <code>1px solid #888989</code>.</p>
</li>
<li><p>The bottom borders under your <code>% Daily Value *</code> and <code>Saturated Fat 1g 5%</code> elements do not extend the full width of the label. Add <code>no-divider</code> to the <code>class</code> for these two elements.</p>
</li>
<li><p>The <code>:not</code> pseudo-selector can be used to select all elements that do not match the given CSS rule.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#example</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The above selects all <code>div</code> elements without an <code>id</code> of <code>example</code>.</p>
<p>Modify your <code>.daily-value p</code> selector to exclude the <code>.no-divider</code> elements.</p>
</li>
<li><p>Now you will have to add separate dividers below your <code>.no-divider</code> elements.</p>
<p>Your first <code>.no-divider</code> element has a <code>.divider</code> after it. Create another <code>.divider</code> after your second <code>.no-divider</code> element.</p>
</li>
<li><p>After your last <code>.divider</code>, create another <code>p</code> element with the text <code>Trans Fat 0g</code>. Italicize the word <code>Trans</code> by wrapping it in an <code>i</code> element. Give the new <code>p</code> element the <code>class</code> attribute set to <code>indent no-divider</code>. Wrap <code>Trans Fat 0g</code> in a <code>span</code> element for alignment.</p>
</li>
<li><p>Create another <code>.divider</code> after your last <code>p</code> element.</p>
</li>
<li><p>After your last <code>.divider</code>, create a new <code>p</code> element with the text <code>Cholesterol 0mg 0%</code>. Wrap the text <code>Cholesterol</code> in a <code>span</code> element, and give that <code>span</code> element the <code>class</code> of <code>bold</code>. Wrap the text <code>0%</code> in another <code>span</code> element, with the <code>class</code> of <code>bold</code>. Finally, nest the <code>Cholesterol</code> <code>span</code> element and the text <code>0mg</code> in an additional <code>span</code> element for alignment.</p>
</li>
<li><p>Below your last <code>p</code> element, create another <code>p</code> element with the text <code>Sodium 160mg 7%</code>. Wrap the text <code>Sodium</code> in a <code>span</code> element with a <code>class</code> attribute set to <code>bold</code>. Wrap the <code>7%</code> text in another <code>span</code> element with the <code>class</code> set to <code>bold</code>. Also add an additional <code>span</code> element around <code>Sodium 160mg</code> for aligning it correctly.</p>
</li>
<li><p>Add another <code>p</code> element with the text <code>Total Carbohydrate 37g 13%</code>. Like before, use <code>span</code> elements to make the text <code>Total Carbohydrate</code> and <code>13%</code> bold. Also add an additional <code>span</code> element to wrap the <code>Total Carbohydrate 37g</code> text in a span element so to have it aligned to the left, and <code>13%</code> to the right.</p>
</li>
<li><p>Below your last <code>p</code> element, add another <code>p</code> element with the text <code>Dietary Fiber 4g</code>. Give the <code>p</code> element the <code>class</code> necessary to indent it and remove the dividing border. Then create a divider below that <code>p</code> element.</p>
</li>
<li><p>Create another <code>p</code> element after your last <code>.divider</code>, and give it the text <code>Total Sugars 12g</code>. Assign that <code>p</code> element the <code>class</code> values necessary to indent it and remove the bottom border. Then create another <code>.divider</code> below your new <code>p</code> element.</p>
</li>
<li><p>The advantage to creating these dividers is that you can apply specific classes to style them individually. Add <code>double-indent</code> to the <code>class</code> for your last <code>.divider</code>.</p>
</li>
<li><p>Create a <code>.double-indent</code> selector and give it a left margin of <code>2em</code>.</p>
</li>
<li><p>Below your <code>.double-indent</code> element, add a new <code>p</code> element with the text <code>Includes 10g Added Sugars 20%</code>. Your new <code>p</code> element should also be double indented, and have no bottom border. Use a <code>span</code> to make the <code>20%</code> bold and right aligned.</p>
<p>Then create another divider after that <code>p</code> element.</p>
</li>
<li><p>After your last divider, create another <code>p</code> element with the text <code>Protein 3g</code>. Use the necessary classes to remove the bottom border, and a <code>span</code> to make the <code>Protein</code> bold.</p>
<p>Following this element, create a large divider.</p>
</li>
<li><p>Create another <code>p</code> element below your large divider. Give the <code>p</code> element the text <code>Vitamin D 2mcg 10%</code>.</p>
<p>The <code>p</code> element contains only text, you can wrap the percentage in a <code>span</code> element so that it is considered a separate entity from the rest of the text, and it’s moved to the right.</p>
</li>
<li><p>Create another <code>p</code> element, give it the text <code>Calcium 260mg 20%</code>. Align <code>20%</code> to the right. Below that, create a <code>p</code> element with the text <code>Iron 8mg 45%</code>, aligning the <code>45%</code> to the right.</p>
</li>
<li><p>Create the final <code>p</code> element for your <code>.daily-value</code> section. Give it the text <code>Potassium 235mg 6%</code>. Align the <code>6%</code> text to the right, and remove the bottom border of the <code>p</code> element.</p>
</li>
<li><p>Add a medium divider after your <code>.daily-value</code> element. Below that new divider, create a <code>p</code> element with the <code>class</code> attribute set to <code>note</code>.</p>
<p>Give the <code>p</code> element the following text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily diet. 2,000 calories a day is used for general nutrition advice.</span><br></pre></td></tr></table></figure></li>
<li><p>Create a <code>.note</code> selector, and set the size of the font to <code>0.6rem</code>. Also set the top and bottom margins to <code>5px</code>, removing the left and right margins.</p>
</li>
<li><p>Give the <code>.note</code> selector a left and right padding of <code>8px</code>, removing the top and bottom padding. Also set the <code>text-indent</code> property to <code>-8px</code>.</p>
<p>With these last changes, your nutrition label is complete!</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Nutrition Label<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,700,800&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Nutrition Facts<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>8 servings per container<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Serving size <span class="tag">&lt;<span class="name">span</span>&gt;</span>2/3 cup (55g)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calories-info&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;bold small-text&quot;</span>&gt;</span>Amount per serving<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Calories<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>230<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider medium&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;daily-value small-text&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bold right no-divider&quot;</span>&gt;</span>% Daily Value *<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Total Fat<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 8g<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>10%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span>Saturated Fat 1g <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>5%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>Trans<span class="tag">&lt;/<span class="name">i</span>&gt;</span> Fat 0g<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Cholesterol<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 0mg<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Sodium<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 160mg<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>7%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Total Carbohydrate<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 37g<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>13%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span>Dietary Fiber 4g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent no-divider&quot;</span>&gt;</span>Total Sugars 12g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider double-indent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;double-indent no-divider&quot;</span>&gt;</span>Includes 10g Added Sugars <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>20%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;no-divider&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>Protein<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 3g<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider large&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Vitamin D 2mcg <span class="tag">&lt;<span class="name">span</span>&gt;</span>10%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Calcium 260mg <span class="tag">&lt;<span class="name">span</span>&gt;</span>20%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Iron 8mg <span class="tag">&lt;<span class="name">span</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;no-divider&quot;</span>&gt;</span>Potassium 235mg <span class="tag">&lt;<span class="name">span</span>&gt;</span>6%<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divider medium&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;note&quot;</span>&gt;</span>* The % Daily Value (DV) tells you how much a nutrient in a serving of food contributes to a daily</span><br><span class="line">      diet. 2,000 calories a day is used for general nutrition advice.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Open Sans&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.label</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">270px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">4px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0.15px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.divider</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#888989</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bold</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.large</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.large</span>, <span class="selector-class">.medium</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.medium</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.small-text</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.85rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.calories-info</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.calories-info</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left-container</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">5px</span> -<span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.calories-info</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">7px</span> -<span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.4em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.indent</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.double-indent</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.daily-value</span> <span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.no-divider</span>) &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#888989</span>;</span><br><span class="line">&#125;</span><br><span class="line">n-<span class="attribute">left</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.daily-value</span> <span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.no-divider</span>) &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#888989</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(八)</title>
    <url>/responsive-web-dedign-%E5%85%AB/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-Accessibility-by-Building-a-Quiz"><a href="#Learn-Accessibility-by-Building-a-Quiz" class="headerlink" title="Learn Accessibility by Building a Quiz"></a>Learn Accessibility by Building a Quiz</h4><span id="more"></span>

<ol>
<li><p>Welcome to the first part of the Accessibility Quiz. As you are becoming a seasoned HTML and CSS developer, we have started you off with the basic boilerplate.</p>
<p>Start this accessibility journey by providing a <code>lang</code> attribute to your <code>html</code> element. This will assist screen readers in identifying the language of the page.</p>
</li>
<li><p>You may be familiar with the <code>meta</code> element already; it is used to specify information about the page, such as the title, description, keywords, and author.</p>
<p>Give your page a <code>meta</code> element with an appropriate <code>charset</code> value.</p>
<p>The <code>charset</code> attribute specifies the character encoding of the page, and, nowadays, <code>UTF-8</code> is the only encoding supported by most browsers.</p>
</li>
<li><p>Continuing with the <code>meta</code> elements, a <code>viewport</code> definition tells the browser how to render the page. Including one betters visual accessibility on mobile, and improves <em>SEO</em> (search engine optimization).</p>
<p>Add a <code>viewport</code> definition with a <code>content</code> attribute detailing the <code>width</code> and <code>initial-scale</code> of the page.</p>
<blockquote>
<p> <code> &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code> </p>
</blockquote>
</li>
<li><p>Another important <code>meta</code> element for accessibility and SEO is the <code>description</code> definition. The value of the <code>content</code> attribute is used by search engines to provide a description of your page.</p>
<p>Add a <code>meta</code> element with the <code>name</code> attribute set to <code>description</code>, and give it a useful <code>content</code> attribute.</p>
</li>
<li><p>Lastly in the <code>head</code>, the <code>title</code> element is useful for screen readers to understand the content of a page. Furthermore, it is an important part of <em>SEO</em>.</p>
<p>Give your page a <code>title</code> that is descriptive and concise.</p>
</li>
<li><p>Navigation is a core part of accessibility, and screen readers rely on you to provide the structure of your page. This is accomplished with semantic HTML elements.</p>
<p>Add a <code>header</code> and a <code>main</code> element to your page.</p>
<p>The <code>header</code> element will be used to introduce the page, as well as provide a navigation menu.</p>
<p>The <code>main</code> element will contain the core content of your page.</p>
</li>
<li><p>Within the <code>header</code>, provide context about the page by nesting one <code>img</code>, <code>h1</code>, and <code>nav</code> element.</p>
<p>The <code>img</code> should point to <code>https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg</code>, and have an <code>id</code> of <code>logo</code>.</p>
<p>The <code>h1</code> should contain the text <code>HTML/CSS Quiz</code>.</p>
</li>
<li><p>A useful property of an <em>SVG</em> (scalable vector graphics) is that it contains a <code>path</code> attribute which allows the image to be scaled without affecting the resolution of the resultant image.</p>
<p>Currently, the <code>img</code> is assuming its default size, which is too large. Correctly, scale the image using it’s <code>id</code> as a selector, and setting the <code>width</code> to <code>max(100px, 18vw)</code>.</p>
</li>
<li><p>As described in the <a href="https://design-style-guide.freecodecamp.org/">freeCodeCamp Style Guide</a>, the logo should retain an aspect ratio of <code>35 / 4</code>, and have padding around the text.</p>
<p>First, change the <code>background-color</code> to <code>#0a0a23</code> so you can see the logo. Then, use the <code>aspect-ratio</code> property to set the desired aspect ratio to <code>35 / 4</code>. Finally, add a <code>padding</code> of <code>0.4rem</code> all around.</p>
</li>
<li><p>Make the <code>header</code> take up the full width of its parent container, set its <code>height</code> to <code>50px</code>, and set the <code>background-color</code> to <code>#1b1b32</code>. Then, set the <code>display</code> to use <em>Flexbox</em>.</p>
</li>
<li><p>Change the <code>h1</code> font color to <code>#f1be32</code>, and set the font size to <code>min(5vw, 1.2em)</code>.</p>
</li>
<li><p>To enable navigation on the page, add an unordered list with the following three list items:</p>
<ul>
<li><code>INFO</code></li>
<li><code>HTML</code></li>
<li><code>CSS</code></li>
</ul>
<p>The list items text should be wrapped in anchor tags.</p>
<blockquote>
<p><code>&lt;li&gt;</code> 中内容需要用a标签进行嵌套</p>
</blockquote>
</li>
<li><p>Target unordered list elements within <code>nav</code> elements, and use <em>Flexbox</em> to evenly space the children.</p>
</li>
<li><p>As this is a quiz, you will need a form for users to submit answers. You can semantically separate the content within the form using <code>section</code> elements.</p>
<p>Within the <code>main</code> element, create a form with three nested <code>section</code> elements. Then, make the form submit to <code>https://freecodecamp.org/practice-project/accessibility-quiz</code>, using the correct method.</p>
</li>
<li><p>To increase the page accessibility, the <code>role</code> attribute can be used to indicate the purpose behind an element on the page to assistive technologies. The <code>role</code> attribute is a part of the <em>Web Accessibility Initiative</em> (WAI), and accepts preset values.</p>
<p>Give each of the <code>section</code> elements the <code>region</code> role.</p>
</li>
<li><p>Every <code>region</code> role requires a label, which helps screen reader users understand the purpose of the region. One method for adding a label is to add a heading element inside the region and then reference it with the <code>aria-labelledby</code> attribute.</p>
<p>Add the following <code>aria-labelledby</code> attributes to the <code>section</code> elements:</p>
<ul>
<li><code>student-info</code></li>
<li><code>html-questions</code></li>
<li><code>css-questions</code></li>
</ul>
<p>Then, within each <code>section</code> element, nest one <code>h2</code> element with an <code>id</code> matching the corresponding <code>aria-labelledby</code> attribute. Give each <code>h2</code> suitable text content.</p>
</li>
<li><p>Typeface plays an important role in the accessibility of a page. Some fonts are easier to read than others, and this is especially true on low-resolution screens.</p>
<p>Change the font for both the <code>h1</code> and <code>h2</code> elements to <code>Verdana</code>, and use another web-safe font in the sans-serif family as a fallback.</p>
<p>Also, add a <code>border-bottom</code> of <code>4px solid #dfdfe2</code> to <code>h2</code> elements to make the sections distinct.</p>
</li>
<li><p>To be able to navigate within the page, give each anchor element an <code>href</code> corresponding to the <code>id</code> of the <code>h2</code> elements.</p>
</li>
<li><p>Filling out the content of the quiz, below <code>#student-info</code>, add three <code>div</code> elements with a <code>class</code> of <code>info</code>.</p>
<p>Then, within each <code>div</code> nest one <code>label</code> element, and one <code>input</code> element.</p>
</li>
<li><p>It is important to link each <code>input</code> to the corresponding <code>label</code> element. This provides assistive technology users with a visual reference to the input.</p>
<p>This is done by giving the <code>label</code> a <code>for</code> attribute, which contains the <code>id</code> of the <code>input</code>.</p>
<p>This section will take a student’s name, email address, and date of birth. Give the <code>label</code> elements appropriate <code>for</code> attributes, as well as text content. Then, link the <code>input</code> elements to the corresponding <code>label</code> elements.</p>
</li>
<li><p>Keeping in mind best-practices for form inputs, give each <code>input</code> an appropriate <code>type</code> and <code>name</code> attribute. Then, give the first <code>input</code> a <code>placeholder</code> attribute.</p>
</li>
<li><p>Even though you added a <code>placeholder</code> to the first <code>input</code> element in the previous lesson, this is actually not a best-practice for accessibility; too often, users confuse the placeholder text with an actual input value - they think there is already a value in the input.</p>
<p>Remove the placeholder text from the first <code>input</code> element, relying on the <code>label</code> being the best-practice.</p>
</li>
<li><p>Arguably, <code>D.O.B.</code> is not descriptive enough. This is especially true for visually impaired users. One way to get around such an issue, without having to add visible text to the label, is to add text only a screen reader can read.</p>
<p>Append a <code>span</code> element with a class of <code>sr-only</code> to the current text content of the third <code>label</code> element.</p>
</li>
<li><p>Within the <code>span</code> element, add the text <code>(Date of Birth)</code>.</p>
</li>
<li><p>The <code>.sr-only</code> text is still visible. There is a common pattern to visually hide text for only screen readers to read.</p>
<p>This pattern is to set the following CSS properties:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: -<span class="number">1px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>Use the above to define the <code>sr-only</code> class.</p>
</li>
<li><p>Within the second <code>section</code> element, add two <code>div</code> elements with a class of <code>question-block</code>.</p>
<p>Then, within each <code>div.question-block</code> element, add one <code>p</code> element with text of incrementing numbers, starting at <code>1</code>, and one <code>fieldset</code> element with a class of <code>question</code>.</p>
</li>
<li><p>Each <code>fieldset</code> will contain a true/false question.</p>
<p>Within each <code>fieldset</code>, nest one <code>legend</code> element, and one <code>ul</code> element with two options.</p>
</li>
<li><p>Give each <code>fieldset</code> an adequate <code>name</code> attribute. Then, give both unordered lists a <code>class</code> of <code>answers-list</code>.</p>
<p>Finally, use the <code>legend</code> to caption the content of the <code>fieldset</code> by placing a true/false question as the text content.</p>
</li>
<li><p>To provide the functionality of the true/false questions, we need a set of inputs which do not allow both to be selected at the same time.</p>
<p>Within each list element, nest one <code>label</code> element, and within each <code>label</code> element, nest one <code>input</code> element with the appropriate <code>type</code>.</p>
</li>
<li><p>Add an <code>id</code> to all of your radio <code>input</code>s so you can link your labels to them. Give the first one an <code>id</code> of <code>q1-a1</code>. Give the rest of them <code>id</code>s of <code>q1-a2</code>, <code>q2-a1</code>, and <code>q2-a2</code>, respectively.</p>
</li>
<li><p>Although not required for <code>label</code> elements with a nested <code>input</code>, it is still best-practice to explicitly link a <code>label</code> with its corresponding <code>input</code> element.</p>
<p>Now, add a <code>for</code> attribute to each of your four <code>label</code>s that links the <code>label</code> to its corresponding radio <code>input</code>.</p>
</li>
<li><p>Give the <code>label</code> elements text such that the <code>input</code> comes before the text. Then, give the <code>input</code> elements a <code>value</code> matching the text.</p>
<p>The text should either be <code>True</code> or <code>False</code>.</p>
</li>
<li><p>If you click on the radio inputs, you might notice both inputs within the same true/false fieldset can be selected at the same time.</p>
<p>Group the relevant inputs together such that only one input from a pair can be selected at a time.</p>
</li>
<li><p>To prevent unnecessary repetition, target the <code>before</code> pseudo-element of the <code>p</code> element, and give it a <code>content</code> property of <code>&quot;Question #&quot;</code>.</p>
</li>
<li><p>The final section of this quiz will contain a dropdown, and a text box.</p>
<p>Begin by nesting a <code>div</code> with a <code>class</code> of <code>formrow</code>, and nest four <code>div</code> elements inside of it, alternating their <code>class</code> attributes with <code>question-block</code> and <code>answer</code>.</p>
</li>
<li><p>Within the <code>div.question-block</code> elements, nest one <code>label</code> element, and give the <code>label</code> elements text content</p>
</li>
<li><p>Within the first <code>div.answer</code> element, nest one required <code>select</code> element with three <code>option</code> elements.</p>
<p>Give the first <code>option</code> element a <code>value</code> of <code>&quot;&quot;</code>, and the text <code>Select an option</code>. Give the second <code>option</code> element a <code>value</code> of <code>yes</code>, and the text <code>Yes</code>. Give the third <code>option</code> element a <code>value</code> of <code>no</code>, and the text <code>No</code>.</p>
</li>
<li><p>Link the first <code>label</code> element to the <code>select</code> element, and give the <code>select</code> element a <code>name</code> attribute.</p>
</li>
<li><p>Nest one <code>textarea</code> element within the second <code>div.answer</code> element, and set the number of rows and columns it has.</p>
<p>Then, give the <code>textarea</code> placeholder text describing an example answer.</p>
</li>
<li><p>As with the other <code>input</code> and <code>label</code> elements, link the <code>textarea</code> to its corresponding <code>label</code> element, and give it a <code>name</code> attribute.</p>
</li>
<li><p>Do not forget to give your <code>form</code> a submit button with the text <code>Send</code>.</p>
</li>
<li><p>Two final semantic HTML elements for this project are the <code>footer</code> and <code>address</code> elements. The <code>footer</code> element is a container for a collection of content that is related to the page, and the <code>address</code> element is a container for contact information for the author of the page.</p>
<p>After the <code>main</code> element, add one <code>footer</code> element, and nest one <code>address</code> element within it.</p>
</li>
<li><p>Within the <code>address</code> element, add the following:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">freeCodeCamp<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">San Francisco<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">California<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">USA</span><br></pre></td></tr></table></figure></li>
<li><p>The <code>address</code> element does not have to contain a physical geographical location. It can be used to provide a link to the subject.</p>
<p>Wrap a link around the text <code>freeCodeCamp</code>, and set its location to <code>https://freecodecamp.org</code>.</p>
</li>
<li><p>Back to styling the page. Select the list elements within the navigation bar, and give them the following styles:</p>
</li>
<li><p>On the topic of visual accessibility, contrast between elements is a key factor. For example, the contrast between the text and the background of a heading should be at least 4.5:1.</p>
<p>Change the font color of all the anchor elements within the list elements to something with a contrast ratio of at least 7:1.</p>
</li>
<li><p>To make the navigation buttons look more like typical buttons, remove the underline from the anchor tags.</p>
<p>Then, create a new selector targeting the navigation list elements so that when the cursor hovers over them, the background color and text color are switched, and the cursor becomes a pointer.</p>
</li>
<li><p>Tidy up the <code>header</code>, by using <em>Flexbox</em> to put space between the children, and vertically center them.</p>
<p>Then, fix the <code>header</code> to the top of the viewport.</p>
</li>
<li><p>When the screen width is small, the <code>h1</code> does not wrap its text content how it should. Align the text for the <code>h1</code> element in the center.</p>
<p>Then, give the <code>main</code> padding such that the <code>Student Info</code> section header can be fully seen.</p>
</li>
<li><p>On small screens, the unordered list in the navigation bar overflows the right side of the screen.</p>
<p>Fix this by using <em>Flexbox</em> to wrap the <code>ul</code> content. Then, set the following CSS properties to correctly align the text:</p>
</li>
<li><p>Set the width of the <code>section</code> elements to <code>80%</code> of their parent container. Then, use margins to center the <code>section</code> elements, adding <code>10px</code> to the bottom margin.</p>
<p>Also, ensure the <code>section</code> elements cannot be larger than <code>600px</code> in width.</p>
</li>
<li><p>Replace the top margin of the <code>h2</code> elements with <code>60px</code> of top padding.</p>
</li>
<li><p>Add padding to the top and left of the <code>.info</code> elements, and set the other values to <code>0</code>.</p>
</li>
<li><p>Give the <code>.formrow</code> elements top margin, and left and right padding. The other padding values should be <code>0</code>.</p>
<p>Then, increase the font size for all <code>input</code> elements.</p>
</li>
<li><p>To make the first section look more inline, target only the <code>input</code> elements within <code>.info</code> elements, and set their <code>width</code> to <code>50%</code>, and left-align their text.</p>
</li>
<li><p>Target all <code>label</code> elements within <code>.info</code> elements, and set their <code>width</code> to <code>10%</code>, and make it so they do not take up less than <code>55px</code>.</p>
</li>
<li><p>To align the input boxes with each other, create a new ruleset that targets all <code>input</code> and <code>label</code> elements within an <code>.info</code> element and set the <code>display</code> property to <code>inline-block</code>.</p>
<p>Also, align the <code>label</code> element’s text to the right.</p>
</li>
<li><p>To neaten the <code>.question-block</code> elements, set the following CSS properties:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>Make the paragraph elements appear as a higher priority, with the following CSS properties:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>It is useful to see the default border around the <code>fieldset</code> elements, during development. However, it might not be the style you want.</p>
<p>Remove the border and bottom padding on the <code>.question</code> elements.</p>
</li>
<li><p>Remove the default styling for the list items of <code>.answers-list</code>, and remove the unordered list padding.</p>
</li>
<li><p>Give the submit button a freeCodeCamp-style design, with the following CSS properties:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">23px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#d0d0d5</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#3b3b4f</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>Set the <code>footer</code> background color to <code>#2a2a40</code>, and use <em>Flexbox</em> to horizontally center the text.</p>
</li>
<li><p>Now, we cannot read the text. Target the <code>footer</code> and the anchor element within to set the font color to a color of adequate contrast ratio.5</p>
</li>
<li><p>Horizontally center all the text within the <code>address</code> element, and add some padding.</p>
</li>
<li><p>Clicking on the navigation links should jump the viewport to the relevant section. However, this jumping can be disorienting for some users.</p>
<p>Select all elements, and set the <code>scroll-behavior</code> to <code>smooth</code>.</p>
</li>
<li><p>Certain types of motion-based animations can cause discomfort for some users. In particular, people with vestibular disorders have sensitivity to certain motion triggers.</p>
<p>The <code>@media</code> at-rule has a media feature called <code>prefers-reduced-motion</code> to set CSS based on the user’s preferences. It can take one of the following values:</p>
<ul>
<li><code>reduce</code></li>
<li><code>no-preference</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">feature</span>: value) &#123;</span><br><span class="line">  selector &#123;</span><br><span class="line">    styles</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>Wrap the style rule that sets <code>scroll-behavior: smooth</code> within an <code>@media</code> at-rule with the media feature <code>prefers-reduced-motion</code> having <code>no-preference</code> set as the value.</p>
</li>
<li><p>Finally, the navigation accessibility can be improved by providing keyboard shortcuts.</p>
<p>The <code>accesskey</code> attribute accepts a space-separated list of access keys. For example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;s&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Give each of the navigation links a single-letter access key.</p>
<p><em>Note: It is not always advised to use access keys, but they can be useful</em></p>
<p>Well done. You have completed the <em>Accessibility Quiz</em> practice project.</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;freeCodeCamp Accessibility Quiz practice project&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Accessibility Quiz<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML/CSS Quiz<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#student-info&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;i&quot;</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#html-questions&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;h&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#css-questions&quot;</span> <span class="attr">accesskey</span>=<span class="string">&quot;c&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;https://freecodecamp.org/practice-project/accessibility-quiz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">role</span>=<span class="string">&quot;region&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;student-info&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;student-info&quot;</span>&gt;</span>Student Info<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;student-name&quot;</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student-name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;student-name&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;student-email&quot;</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student-email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;student-email&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;birth-date&quot;</span>&gt;</span>D.O.B.<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(Date of Birth)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birth-date&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birth-date&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">role</span>=<span class="string">&quot;region&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;html-questions&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;html-questions&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;question&quot;</span> <span class="attr">name</span>=<span class="string">&quot;html-question-one&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line">                The legend element represents a caption for the content of its</span><br><span class="line">                parent fieldset element</span><br><span class="line">              <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;answers-list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q1-a1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q1-a1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                    True</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q1-a2&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q1-a2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">                    False</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;question&quot;</span> <span class="attr">name</span>=<span class="string">&quot;html-question-two&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line">                A label element nesting an input element is required to have a</span><br><span class="line">                for attribute with the same value as the input&#x27;s id</span><br><span class="line">              <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;answers-list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q2-a1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q2-a1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                    True</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;q2-a2&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;q2-a2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">                    False</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">role</span>=<span class="string">&quot;region&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;css-questions&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;css-questions&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;formrow&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;customer&quot;</span>&gt;</span>Are you a frontend developer?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;answer&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">id</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>Select an option<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;no&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;question-block&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;css-questions&quot;</span>&gt;</span>Do you have any questions:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;answer&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;css-questions&quot;</span> <span class="attr">name</span>=<span class="string">&quot;css-questions&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;24&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Who is flexbox...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://freecodecamp.org&quot;</span>&gt;</span>freeCodeCamp<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        San Francisco<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        California<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        USA</span><br><span class="line">      <span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-reduced-motion</span>: no-preference) &#123;</span><br><span class="line">  * &#123;</span><br><span class="line">    scroll-behavior: smooth;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5f6f7</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">100px</span>, <span class="number">18vw</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">  aspect-ratio: <span class="number">35</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f1be32</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">min</span>(<span class="number">5vw</span>, <span class="number">1.2em</span>);</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding-inline-start</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-block</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#dfdfe2</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &gt; <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#dfdfe2</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1b1b32</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">10px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Verdana, Tahoma;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">4px</span> solid <span class="number">#dfdfe2</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.formrow</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-tag">label</span>, <span class="selector-class">.info</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">55px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.question-block</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;Question #&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.question</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.answers-list</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">23px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#d0d0d5</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#3b3b4f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#2a2a40</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">footer</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#dfdfe2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sr-only</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Responsive Web Dedign(九)</title>
    <url>/responsive-web-dedign-%E4%B9%9D/</url>
    <content><![CDATA[<h1 id="freeCodeCamp-—-Responsive-Web-Dedign"><a href="#freeCodeCamp-—-Responsive-Web-Dedign" class="headerlink" title="freeCodeCamp —- Responsive Web Dedign"></a>freeCodeCamp —- Responsive Web Dedign</h1><hr>
<h4 id="Learn-More-About-CSS-Pseudo-Selectors-By-Building-A-Balance-Sheet"><a href="#Learn-More-About-CSS-Pseudo-Selectors-By-Building-A-Balance-Sheet" class="headerlink" title="Learn More About CSS Pseudo Selectors By Building A Balance Sheet"></a>Learn More About CSS Pseudo Selectors By Building A Balance Sheet</h4><span id="more"></span>

<ol>
<li><p>Set up your HTML with the <code>DOCTYPE</code>, <code>html</code> indicating this document is in English, <code>head</code>, and <code>body</code> elements.</p>
<p>Give your <code>head</code> element the appropriate <code>meta</code> elements for the <code>charset</code> and <code>viewport</code>, a <code>title</code> element with an appropriate title, and a <code>link</code> element for your stylesheet.</p>
</li>
<li><p>Within your <code>body</code> element, nest a <code>section</code> element within a <code>main</code> element.</p>
</li>
<li><p>Within your <code>section</code> element, add an <code>h1</code> element with a nested <code>span</code> element.</p>
</li>
<li><p>Screen readers announce HTML elements based on the document flow. We will eventually want the balance sheet to have a heading of “Balance Sheet” and a subheading of “AcmeWidgetCorp”. However, this order does not make sense if announced by a screen reader.</p>
<p>Give your existing <code>span</code> the <code>class</code> attribute set to <code>flex</code>, and add two <code>span</code> elements within it. Give the first the text <code>AcmeWidgetCorp</code>. Give the second the text <code>Balance Sheet</code>. You will use CSS to reverse the order of the text on the page, but the HTML order will make more sense for a screen reader.</p>
</li>
<li><p>Below your <code>h1</code> element, create a <code>div</code> element. Give it an <code>id</code> attribute set to <code>years</code>. You want this particular element to be hidden from screen readers, so give it the <code>aria-hidden</code> attribute set to <code>true</code>.</p>
</li>
<li><p>Within your <code>div</code> element, add three <code>span</code> elements. Give each of them a <code>class</code> attribute set to <code>year</code>, and add the following text (in order): <code>2019</code>, <code>2020</code>, and <code>2021</code>.</p>
</li>
<li><p>Below your existing <code>div</code> element, add a new <code>div</code> element with a <code>class</code> set to <code>table-wrap</code>. This will be the container for your tables.</p>
<p>Within that, add three <code>table</code> elements. You will be using CSS to style these into a single table, but using separate tables will help screen readers understand the document flow.</p>
</li>
<li><p>HTML tables use the <code>caption</code> element to describe what the table is about. The <code>caption</code> element should always be the first child of a <code>table</code>, but can be positioned with the <code>caption-side</code> CSS property.</p>
<p>Add a <code>caption</code> element to your first <code>table</code>, and give it the text <code>Assets</code>.</p>
</li>
<li><p>The <code>thead</code> and <code>tbody</code> elements are used to indicate which portion of your table is the header, and which portion contains the primary data or content.</p>
<p>Add a <code>thead</code> and <code>tbody</code> to your first <code>table</code>, below the <code>caption</code> element.</p>
</li>
<li><p>The <code>tr</code> element is used to indicate a table row. Add a <code>tr</code> element within your <code>thead</code> element. In your new <code>tr</code> element, add a <code>td</code> element, followed by three <code>th</code> elements.</p>
<p>The <code>td</code> element indicates a data cell, while the <code>th</code> element indicates a header cell.</p>
</li>
<li><p>Within each of your new <code>th</code> elements, nest a <code>span</code> element with the <code>class</code> set to <code>sr-only year</code>. Give them the following text (in order): <code>2019</code>, <code>2020</code>, and <code>2021</code>.</p>
<p>Give your third <code>th</code> element the <code>class</code> attribute set to <code>current</code>.</p>
<p>Leave the <code>td</code> element empty. This element exists only to ensure your table has a four-column layout and associate the headers with the correct columns.</p>
</li>
<li><p>Within your <code>tbody</code> element, add four <code>tr</code> elements. Give the first three a <code>class</code> attribute set to <code>data</code>, and the fourth a <code>class</code> attribute set to <code>total</code>.</p>
</li>
<li><p>In your first <code>tr</code>, add a <code>th</code> element with the text <code>Cash This is the cash we currently have on hand.</code>. Wrap all of that text except <code>Cash</code> in a <code>span</code> element with the <code>class</code> set to <code>description</code>.</p>
<p>Following that, add three <code>td</code> elements with the following text (in order): <code>$25</code>, <code>$30</code>, <code>$28</code>. Give the third <code>td</code> element a <code>class</code> attribute set to <code>current</code>.</p>
</li>
<li><p>In your second <code>tr</code> element, add a <code>th</code> element with the text <code>Checking Our primary transactional account.</code>. Wrap that text, except for <code>Checking</code> , in a <code>span</code> element with the <code>class</code> attribute set to <code>description</code>.</p>
<p>Following that, add three <code>td</code> elements with the following text (in order): <code>$54</code>, <code>$56</code>, <code>$53</code>. Give the third <code>td</code> element a <code>class</code> attribute set to <code>current</code>.</p>
</li>
<li><p>In your third <code>tr</code> element, add a <code>th</code> element with the text <code>Savings Funds set aside for emergencies.</code>. Wrap that text, except for <code>Savings</code> , in a <code>span</code> element with the <code>class</code> attribute set to <code>description</code>.</p>
<p>Following that, add three <code>td</code> elements with the following text (in order): <code>$500</code>, <code>$650</code>, <code>$728</code>. Give the third <code>td</code> element a <code>class</code> attribute set to <code>current</code>.</p>
</li>
<li><p>In your fourth <code>tr</code> element, add a <code>th</code> element with the text <code>Total Assets</code>. Wrap the text <code>Assets</code> in a <code>span</code> element with the <code>class</code> attribute set to <code>sr-only</code>.</p>
<p>Following that, add three <code>td</code> elements with the following text (in order): <code>$579</code>, <code>$736</code>, <code>$809</code>. Give the third <code>td</code> element a <code>class</code> attribute set to <code>current</code>.</p>
</li>
<li><p>Time to move on to your second table. Start by giving it a <code>caption</code> element set to <code>Liabilities</code>. Then add your <code>thead</code> and <code>tbody</code>.</p>
</li>
<li><p>Within your <code>thead</code>, add a <code>tr</code>. Inside that, add a <code>td</code> and three <code>th</code> elements.</p>
</li>
<li><p>Give each <code>th</code> element a <code>span</code> element with the class set to <code>sr-only</code> and the following text, in order: <code>2019</code>, <code>2020</code>, and <code>2021</code>.</p>
</li>
<li><p>Within the <code>tbody</code> element, add four <code>tr</code> elements. Give the first three the <code>class</code> attribute set to <code>data</code>, and the fourth the <code>class</code> attribute set to <code>total</code>.</p>
</li>
<li><p>Within the first <code>tr</code>, add a <code>th</code> element with the text <code>Loans The outstanding balance on our startup loan.</code>. Wrap that text, except for <code>Loans</code> , within a <code>span</code> element with the <code>class</code> set to <code>description</code>.</p>
<p>Add three <code>td</code> elements below that, and give them the following text, in order: <code>$500</code>, <code>$250</code>, and <code>$0</code>. Give the third <code>td</code> element a <code>class</code> set to <code>current</code>.</p>
</li>
<li><p>Within the second <code>tr</code>, add a <code>th</code> element with the text <code>Expenses Annual anticipated expenses, such as payroll.</code>. Wrap that text, except for <code>Expenses</code> , within a <code>span</code> element with the <code>class</code> set to <code>description</code>.</p>
<p>Add three <code>td</code> elements below that, and give them the following text, in order: <code>$200</code>, <code>$300</code>, and <code>$400</code>. Give the third <code>td</code> element a <code>class</code> set to <code>current</code>.</p>
</li>
<li><p>Within the third <code>tr</code>, add a <code>th</code> element with the text <code>Credit The outstanding balance on our credit card.</code>. Wrap that text, except for <code>Credit</code> , within a <code>span</code> element with the <code>class</code> set to <code>description</code>.</p>
<p>Add three <code>td</code> elements below that, and give them the following text, in order: <code>$50</code>, <code>$50</code>, and <code>$75</code>. Give the third <code>td</code> element a <code>class</code> set to <code>current</code>.</p>
</li>
<li><p>In your fourth <code>tr</code> element, add a <code>th</code> element with the text <code>Total Liabilities</code>. Wrap the text <code>Liabilities</code> in a <code>span</code> element with the <code>class</code> attribute set to <code>sr-only</code>.</p>
<p>Following that, add three <code>td</code> elements with the following text (in order): <code>$750</code>, <code>$600</code>, <code>$475</code>. Give the third <code>td</code> element a <code>class</code> attribute set to <code>current</code>.</p>
</li>
<li><p>For your third table, add a <code>caption</code> with the text <code>Net Worth</code>, and set up a table header and table body.</p>
</li>
<li><p>Within your <code>thead</code>, create a <code>tr</code> element. In that, add a <code>td</code> and three <code>th</code> elements. Within each of the <code>th</code> elements, add a <code>span</code> element with the <code>class</code> set to <code>sr-only</code> and the following text, in order: <code>2019</code>, <code>2020</code>, and <code>2021</code>.</p>
</li>
<li><p>Within the <code>tbody</code>, add a <code>tr</code> with the <code>class</code> set to <code>total</code>. In that, add a <code>th</code> with the text <code>Total Net Worth</code>, and wrap <code>Net Worth</code> in a <code>span</code> with the <code>class</code> set to <code>sr-only</code>.</p>
<p>Then add three <code>td</code> elements, giving the third a <code>class</code> set to <code>current</code>, and giving each the following text: <code>$-171</code>, <code>$136</code>, <code>$334</code>.</p>
</li>
<li><p>Time to style your table. Start by resetting the box model. Create an <code>html</code> selector and give it a <code>box-sizing</code> property set to <code>border-box</code>.</p>
</li>
<li><p>Create a <code>body</code> selector and give it a <code>font-family</code> property set to <code>sans-serif</code> and a <code>color</code> set to <code>#0a0a23</code>.</p>
</li>
<li><p>Before you get too far into your styling, you should make use of the <code>sr-only</code> class. You can use CSS to make elements with this class completely hidden from the visual page, but still be announced by screen readers.</p>
<p>The CSS you are about to write is a common set of properties used to ensure elements are completely hidden visually.</p>
<p>The <code>span[class~=&quot;sr-only&quot;]</code> selector will select any <code>span</code> element whose <code>class</code> <em>includes</em> <code>sr-only</code>. Create that selector, and give it a <code>border</code> property set to <code>0</code>.</p>
</li>
<li><p>The CSS <code>clip</code> property is used to define the visible portions of an element. Set the <code>span[class~=&quot;sr-only&quot;]</code> selector to have a <code>clip</code> property of <code>rect(1px, 1px, 1px, 1px)</code>.</p>
<p>The <code>clip-path</code> property determines the shape the <code>clip</code> property should take. Set the <code>clip-path</code> property to the value of <code>inset(50%)</code>, forming the clip-path into a rectangle within the element.</p>
</li>
<li><p>Now you need to size these elements down. Give your <code>span[class~=&quot;sr-only&quot;]</code> selector a <code>width</code> and <code>height</code> property set to <code>1px</code>.5</p>
</li>
<li><p>To prevent the text content from overflowing, give your <code>span[class~=&quot;sr-only&quot;]</code> selector an <code>overflow</code> property set to <code>hidden</code> and a <code>white-space</code> property set to <code>nowrap</code>.</p>
</li>
<li><p>Finally, you need to take these hidden elements out of the document flow. Give the <code>span[class~=&quot;sr-only&quot;]</code> selector a <code>position</code> property set to <code>absolute</code>, a <code>padding</code> property set to <code>0</code>, and a <code>margin</code> property set to <code>-1px</code>. This will ensure that not only are they no longer visible, but they are not even within the page view.</p>
</li>
<li><p>Time to style your table heading. Create an <code>h1</code> selector. Give it a <code>max-width</code> property set to <code>37.25rem</code>, a <code>margin</code> property set to <code>0 auto</code>, and a <code>padding</code> property set to <code>1.5rem 1.25rem</code>.</p>
</li>
<li><p>Target your flex container with an <code>h1 .flex</code> selector. Give it a <code>display</code> property set to <code>flex</code> to enable the flexbox layout. Then set the <code>flex-direction</code> property to <code>column-reverse</code> - this will display the nested elements from bottom to top. Finally, set the <code>gap</code> property to <code>1rem</code> to create some space between the elements.</p>
</li>
<li><p>The <code>:first-of-type</code> pseudo-selector is used to target the first element that matches the selector. Create an <code>h1 .flex span:first-of-type</code> selector to target the first <code>span</code> element in your <code>.flex</code> container. Remember that your <code>span</code> elements are reversed, visually, so this will appear to be the second element on the page.</p>
<p>Give your new selector a <code>font-size</code> property of <code>0.7em</code> to make it look like a sub-heading.</p>
</li>
<li><p>The <code>:last-of-type</code> pseudo-selector does the exact opposite - it targets the last element that matches the selector. Create an <code>h1 .flex span:last-of-type</code> selector to target the last <code>span</code> in your flex container, and give it a <code>font-size</code> property set to <code>1.2em</code> to make it look like a header.</p>
</li>
<li><p>You wrapped your table in a section element - now you can style that to give your table a border. Create a <code>section</code> selector, and give it a <code>max-width</code> property set to <code>40rem</code> for responsive design. Set the <code>margin</code> property to <code>0 auto</code> to center it, and set the <code>border</code> property to <code>2px solid #d0d0d5</code>.</p>
</li>
<li><p>The last part of your table heading is your years. Create a <code>#years</code> selector, and enable flexbox. Justify the content to the end of the flex direction, and make the element sticky. Fix it to the top of its container with <code>top: 0</code>.</p>
</li>
<li><p>Now apply some color to your <code>#years</code>. Make the text <code>#fff</code> and the background <code>#0a0a23</code>.</p>
</li>
<li><p>The <code>calc()</code> function is a CSS function that allows you to calculate a value based on other values. For example, you can use it to calculate the width of the viewport minus the margin of an element:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Give <code>#years</code> a <code>margin</code> of <code>0 -2px</code>, and a <code>padding</code> set to <code>0.5rem calc(1.25rem + 2px) 0.5rem 0</code>.</p>
</li>
<li><p>Adding position <code>sticky</code> moved the element into its own stack. To ensure your <code>#years</code> element does not get hidden by different stacks, add a <code>z-index</code> property set to <code>999</code> in the <code>#years</code> rule.</p>
</li>
<li><p>Style the text within your <code>#years</code> element by creating a <code>#years span[class]</code> selector. The <code>span[class]</code> syntax will target any <code>span</code> element that has a <code>class</code> attribute set, regardless of the attribute’s value.</p>
<p>Give your new selector a <code>bold</code> font, a width of <code>4.5rem</code>, and text aligned to the right.</p>
</li>
<li><p>You wrapped your tables in a container with the <code>table-wrap</code> class. Create a selector for that class, and give it a <code>padding</code> set to <code>0 0.75rem 1.5rem 0.75rem</code>.</p>
</li>
<li><p>Before you start diving in to the table itself, your <code>span</code> elements are currently bolded. Create a <code>span:not(.sr-only)</code> selector and give it a <code>font-weight</code> property set to <code>normal</code>.</p>
<p>The <code>:not()</code> pseudo-selector is used to target all elements that do not match the selector - in this case, any of your <code>span</code> elements that do not have the <code>sr-only</code> class. This ensures that your earlier rules for the <code>span[class~=&quot;sr-only&quot;]</code> selector are not overwritten.</p>
</li>
<li><p>Rather than having to constantly double-check you are not overwriting your earlier properties, you can use the <code>!important</code> keyword to ensure these properties are always applied, regardless of order or specificity.</p>
<p>Give each property in your <code>span[class~=&quot;sr-only&quot;]</code> selector an <code>!important</code> keyword. Do not change any of the values.</p>
</li>
<li><p>Now that you have added the <code>!important</code> keyword, you can remove the <code>:not(.sr-only)</code> from your <code>span</code> selector.</p>
</li>
<li><p>Create a <code>table</code> selector to target your tables. Set the <code>border-collapse</code> property to <code>collapse</code>, which will allow cell borders to collapse into a single border, instead of a border around each cell. Also set the <code>border</code> property to <code>0</code> to hide the borders themselves.</p>
</li>
<li><p>Create a <code>table</code> selector to target your tables. Set the <code>border-collapse</code> property to <code>collapse</code>, which will allow cell borders to collapse into a single border, instead of a border around each cell. Also set the <code>border</code> property to <code>0</code> to hide the borders themselves.</p>
</li>
<li><p>Next you need to style your <code>caption</code> elements to look more like headers. Create a <code>table caption</code> selector. Set the text to have a color of <code>#356eaf</code>, a size of <code>1.3em</code>, and a normal weight.</p>
</li>
<li><p>Now give the captions an absolute position, and shift them <code>-2.25rem</code> from the top and <code>0.5rem</code> from the left.</p>
</li>
<li><p>Create a selector to target your <code>td</code> elements within your table body. Give them a width to fill the viewport, with a minimum and maximum of <code>4rem</code>. This approach ensures that the width is fixed, whereas setting <code>width</code> specifically would allow the elements to shrink to the container.5</p>
</li>
<li><p>Now target the <code>th</code> elements within your table body, and give them a width of the entire container, less <code>12rem</code>.</p>
</li>
<li><p>The <code>[attribute=&quot;value&quot;]</code> selector targets any element that has an attribute with a specific value. Create a <code>tr[class=&quot;total&quot;]</code> selector to target specifically your <code>tr</code> elements with the <code>total</code> class. Give it a bottom border of <code>4px double #0a0a23</code> and make the font bold.</p>
</li>
<li><p>Using the same selector syntax, target the <code>th</code> elements within your table rows where the <code>class</code> is <code>total</code>. Align the text to the left, and give them a padding of <code>0.5rem 0 0.25rem 0.5rem</code>.</p>
</li>
<li><p>The key difference between <code>tr[class=&quot;total&quot;]</code> and <code>tr.total</code> is that the first will select <code>tr</code> elements where the <em>only</em> class is <code>total</code>. The second will select <code>tr</code> elements where the class <em>includes</em> <code>total</code>.</p>
<p>In your case, <code>tr.total</code> will work. You can use this selector to target all <code>td</code> elements within your <code>.total</code> rows. Align the text to the right, and give them a padding of <code>0 0.25rem</code>.</p>
</li>
<li><p>The <code>:nth-of-type()</code> pseudo-selector is used to target specific elements based on their order among siblings of the same type. Use this pseudo-selector to target the third <code>td</code> element within your <code>total</code> table rows. Give it a right padding of <code>0.5rem</code>.</p>
</li>
<li><p>Give your <code>tr.total</code> elements a hover effect that changes the background to <code>#99c9ff</code>.</p>
</li>
<li><p>Select your <code>td</code> elements with the <code>class</code> value of <code>current</code>, and make the font italic.</p>
</li>
<li><p>Select the <code>tr</code> elements with the <code>class</code> set to <code>data</code>. Give them a background image of <code>linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem)</code>.</p>
</li>
<li><p>Select the <code>th</code> elements within your <code>tr.data</code> elements. Align the text to the left, and give them a top padding of <code>0.3rem</code> and a left padding of <code>0.5rem</code>.</p>
</li>
<li><p>Create a <code>tr.data th .description</code> selector to target the elements with the <code>class</code> set to <code>description</code> that are within your <code>th</code> elements in your <code>.data</code> table rows. Give them a block display, make the text italic with a normal weight, and position them with a <code>padding</code> set to <code>1rem 0 0.75rem</code> and a right margin of <code>-13.5rem</code>.</p>
</li>
<li><p>Your <code>span</code> elements now all have more specific styling, which means you can remove your <code>span</code> rule.</p>
</li>
<li><p>Your dollar amounts are currently misaligned. Create a selector to target the <code>td</code> elements within your <code>tr.data</code> elements. Vertically align the text to the top, horizontally align the text to the right, and set the padding to <code>0.3rem 0.25rem 0</code>.</p>
</li>
<li><p>Create another selector for the <code>td</code> elements within your <code>tr.data</code> element, but specifically select the last one. Give this a right padding of <code>0.5rem</code>.</p>
<p>With this, your balance sheet is complete!</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Balance Sheet<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./styles.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>AcmeWidgetCorp<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Balance Sheet<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;years&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;year&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;year&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;year&quot;</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-wrap&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Assets<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only year&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only year&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only year&quot;</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cash <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>This is the cash we currently have on hand.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$28<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Checking <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>Our primary transactional account.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$54<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$56<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$53<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>Funds set aside for emergencies.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$650<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$728<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Total <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Assets<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$579<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$736<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$809<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Liabilities<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Loans <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>The outstanding balance on our startup loan.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$250<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Expenses <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>Annual anticipated expenses, such as payroll.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$400<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Credit <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span>The outstanding balance on our credit card.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$75<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Total <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Liabilities<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$750<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$475<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>Net Worth<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>2019<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>2020<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>2021<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Total <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Net Worth<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$-171<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$136<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>$334<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class~=<span class="string">&quot;sr-only&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">1px</span>, <span class="number">1px</span>, <span class="number">1px</span>, <span class="number">1px</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">37.25rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1.5rem</span> <span class="number">1.25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.flex</span> <span class="selector-tag">span</span><span class="selector-pseudo">:first</span>-of-type &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.flex</span> <span class="selector-tag">span</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">40rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#d0d0d5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#years</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="built_in">calc</span>(<span class="number">1.25rem</span> + <span class="number">2px</span>) <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#years</span> <span class="selector-tag">span</span><span class="selector-attr">[class]</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4.5rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.table-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.75rem</span> <span class="number">1.5rem</span> <span class="number">0.75rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">caption</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#356eaf</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">2.25rem</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tbody</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">12rem</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-attr">[class=<span class="string">&quot;total&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">4px</span> double <span class="number">#0a0a23</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-attr">[class=<span class="string">&quot;total&quot;</span>]</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">0</span> <span class="number">0.25rem</span> <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.total</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.total</span> <span class="selector-tag">td</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.total</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#99c9ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span><span class="selector-class">.current</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#dfdfe2</span> <span class="number">1.845rem</span>, white <span class="number">1.845rem</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0.3rem</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> <span class="selector-tag">th</span> <span class="selector-class">.description</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">0</span> <span class="number">0.75rem</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">13.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-class">.data</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0.25rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>freeCodeCamp</category>
        <category>Responsive Web Dedign</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>TED —— 如何成为一个自信的人</title>
    <url>/ted-%E2%80%94%E2%80%94-%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E4%BF%A1%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[<h2 id="TED-——-The-Skill-of-Self-Confidence"><a href="#TED-——-The-Skill-of-Self-Confidence" class="headerlink" title="TED —— The Skill of Self Confidence"></a>TED —— The Skill of Self Confidence</h2><p>自信：相信自己可以<strong>完成任何任务</strong>的能力或信念，无论机遇如何，困难多大，哪怕身处逆境，<strong>相信自己可以做到</strong>。</p>
<p>自信是可以训练的（一种skill）</p>
<ul>
<li><p>不断地反复训练（坚持）</p>
<ul>
<li>做自己想做的，不要被“不”打败</li>
</ul>
</li>
<li><p>与自己谈话</p>
<ul>
<li><p>思想会影响行动</p>
</li>
<li><p>自我肯定 —— 自己都不相信自己，其他人又如何相信你</p>
</li>
</ul>
</li>
<li><p>远离打击你信心的人</p>
</li>
</ul>
<p><em>我们生来就是与众不同的，当别人的目光朝向你时，相信你自己</em></p>
]]></content>
      <categories>
        <category>心得笔记</category>
        <category>TED演讲</category>
      </categories>
      <tags>
        <tag>TED</tag>
        <tag>自信</tag>
      </tags>
  </entry>
  <entry>
    <title>TED —— 优秀的人是如何训练大脑的</title>
    <url>/ted-%E2%80%94%E2%80%94-%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%AD%E7%BB%83%E5%A4%A7%E8%84%91%E7%9A%84/</url>
    <content><![CDATA[<h2 id="TED-——-优秀的人是如何训练大脑的"><a href="#TED-——-优秀的人是如何训练大脑的" class="headerlink" title="TED —— 优秀的人是如何训练大脑的"></a>TED —— 优秀的人是如何训练大脑的</h2><ol>
<li>Tell your mind what you want;  </li>
</ol>
<p>告诉你的大脑你想要什么 —— 大脑永远在做它认为<strong>对你有利</strong>的事情，必须用非常具体、明确的话语来告诉大脑你想做的事情。</p>
<ol start="2">
<li>Link massive pleasure to going there and pain to not going there;  </li>
</ol>
<p>把达到目标的强烈<strong>快乐</strong>感与停滞不前的<strong>痛苦</strong>联系起来 —— 大脑的<strong>本能</strong>是将你<strong>带向快乐</strong>，并且使你远离痛苦。</p>
<ol start="3">
<li>Change the picture,change the words;  </li>
</ol>
<p>改变大脑中画面和语言 —— 在任何时候，对所有事物的感觉都来自于两点，脑海中想象的画面以及对自己说的话</p>
<ol start="4">
<li>Make the familiar , unfamiliar and unfamiliar ,familiar.  </li>
</ol>
<p>把熟悉的东西变陌生，把陌生东西变熟悉 —— 大脑爱做熟悉的事情，其设计就是不停地重复那些已经熟悉的事情。</p>
<p><strong>建议:</strong><br>1.给予自己<strong>积极的心理暗示</strong>，提高行动内驱力  </p>
<p>2.在一件事中更<strong>关注快乐的一面</strong>，不要放大痛苦  </p>
<p>3.<strong>建立良好的行为习惯</strong>，把陌生的良好的行为习惯变成日常，降低不利的行为习惯在日常生活中出现的频率  </p>
<p>4.<strong>积极信念</strong>能够<strong>塑造自我</strong>，潜力会随着努力的方向而增大</p>
]]></content>
      <categories>
        <category>心得笔记</category>
        <category>TED演讲</category>
      </categories>
      <tags>
        <tag>TED</tag>
        <tag>心理暗示</tag>
        <tag>大脑</tag>
      </tags>
  </entry>
  <entry>
    <title>TED —— 增强信心的三个技巧</title>
    <url>/ted-%E2%80%94%E2%80%94-%E5%A2%9E%E5%BC%BA%E4%BF%A1%E5%BF%83%E7%9A%84%E4%B8%89%E4%B8%AA%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="TED-——-增强信心的三个技巧"><a href="#TED-——-增强信心的三个技巧" class="headerlink" title="TED —— 增强信心的三个技巧"></a>TED —— 增强信心的三个技巧</h2><ol>
<li><p>快速<strong>补充自信</strong>：进行困难任务时，可以幻想一下自己成功时的模样。</p>
</li>
<li><p>认为自己会进步，培养自己的“<strong>成长型</strong>”思维。</p>
</li>
<li><p>练习失败</p>
</li>
</ol>
<p>要明白失败很正常，我们要<strong>重视过程</strong>中所获得的<strong>成长</strong>和<strong>启发</strong>。</p>
]]></content>
      <categories>
        <category>心得笔记</category>
        <category>TED演讲</category>
      </categories>
      <tags>
        <tag>TED</tag>
        <tag>自信</tag>
      </tags>
  </entry>
</search>
